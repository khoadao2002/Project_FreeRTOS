
HDH_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08007f30  08007f30  00017f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083cc  080083cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083d4  080083d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080083dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004990  200001e0  080085bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b70  080085bc  00024b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de42  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002501  00000000  00000000  0002e052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00030558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  000311f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d9d  00000000  00000000  00031d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceb7  00000000  00000000  00035b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea75  00000000  00000000  000429d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  000d149c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f14 	.word	0x08007f14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007f14 	.word	0x08007f14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADC_init>:
const osMessageQueueAttr_t temp_queue_attributes = {
  .name = "temp_queue"
};
/* USER CODE BEGIN PV */
void ADC_init()
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <ADC_init+0x84>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <ADC_init+0x84>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <ADC_init+0x84>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
	uint32_t* SMPR1 = (uint32_t*)0x4001200c;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <ADC_init+0x88>)
 8000f80:	617b      	str	r3, [r7, #20]
	*SMPR1 |= (0b111 << 18);
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f443 12e0 	orr.w	r2, r3, #1835008	; 0x1c0000
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	601a      	str	r2, [r3, #0]
	uint32_t* SMPR2 = (uint32_t*)0x40012010;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <ADC_init+0x8c>)
 8000f90:	613b      	str	r3, [r7, #16]
	*SMPR2 |= (0b111 << 0);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f043 0207 	orr.w	r2, r3, #7
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	601a      	str	r2, [r3, #0]
	uint32_t* JSQR = (uint32_t*)0x40012038;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <ADC_init+0x90>)
 8000fa0:	60fb      	str	r3, [r7, #12]
	*JSQR |= (16 << 15);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	601a      	str	r2, [r3, #0]
	uint32_t* CR2 = (uint32_t*)0x40012008;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <ADC_init+0x94>)
 8000fb0:	60bb      	str	r3, [r7, #8]
	*CR2 |= (0b01 << 20) | (1 << 0);
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	6013      	str	r3, [r2, #0]
	uint32_t* CCR = (uint32_t*)0x40012304;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <ADC_init+0x98>)
 8000fc4:	607b      	str	r3, [r7, #4]
	*CCR |= (1 << 23);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	371c      	adds	r7, #28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	4001200c 	.word	0x4001200c
 8000fe8:	40012010 	.word	0x40012010
 8000fec:	40012038 	.word	0x40012038
 8000ff0:	40012008 	.word	0x40012008
 8000ff4:	40012304 	.word	0x40012304

08000ff8 <Read_ADC>:
uint16_t Read_ADC()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
	uint32_t* CR2 = (uint32_t*)0x40012008;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <Read_ADC+0x4c>)
 8001000:	60fb      	str	r3, [r7, #12]
	*CR2 |= (1 << 22);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	601a      	str	r2, [r3, #0]
	uint32_t* SR = (uint32_t*)0x40012000;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <Read_ADC+0x50>)
 8001010:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 2) & 1) == 0);
 8001012:	bf00      	nop
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f8      	beq.n	8001014 <Read_ADC+0x1c>
	*SR &= ~(1 << 2);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 0204 	bic.w	r2, r3, #4
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	601a      	str	r2, [r3, #0]
	uint32_t* JDR1 = (uint32_t*)0x4001203c;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <Read_ADC+0x54>)
 8001030:	607b      	str	r3, [r7, #4]
	return *JDR1;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	40012008 	.word	0x40012008
 8001048:	40012000 	.word	0x40012000
 800104c:	4001203c 	.word	0x4001203c

08001050 <UART_init>:
void UART_init()
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <UART_init+0x94>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <UART_init+0x94>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <UART_init+0x94>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
	uint32_t* MODER = (uint32_t*)0x40020000;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <UART_init+0x98>)
 8001074:	617b      	str	r3, [r7, #20]
	*MODER |= (0b10 << 4) | (0b10 << 6);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	601a      	str	r2, [r3, #0]

	uint32_t* AFRL = (uint32_t*)0x40020020;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <UART_init+0x9c>)
 8001084:	613b      	str	r3, [r7, #16]
	*AFRL |= (7 << 8) | (7 << 12);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f443 42ee 	orr.w	r2, r3, #30464	; 0x7700
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	601a      	str	r2, [r3, #0]

	__HAL_RCC_USART2_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <UART_init+0x94>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <UART_init+0x94>)
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <UART_init+0x94>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
	uint32_t* BRR = (uint32_t*)0x40004408;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <UART_init+0xa0>)
 80010b0:	60fb      	str	r3, [r7, #12]
	*BRR |= (104 << 4) | (3 << 0);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 80010ba:	f043 0303 	orr.w	r3, r3, #3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	6013      	str	r3, [r2, #0]

	uint32_t* CR1 = (uint32_t*)0x4000440c;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <UART_init+0xa4>)
 80010c4:	60bb      	str	r3, [r7, #8]
	*CR1 |= (1 << 3) | (1 << 2) | (1 << 13);
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ce:	f043 030c 	orr.w	r3, r3, #12
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	6013      	str	r3, [r2, #0]

//	uint32_t* CR3 = (uint32_t*)0x40004414;
//	*CR3 |= (1 << 6); 				//enable DMA receiver
}
 80010d6:	bf00      	nop
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020020 	.word	0x40020020
 80010f0:	40004408 	.word	0x40004408
 80010f4:	4000440c 	.word	0x4000440c

080010f8 <UART_Send_Byte>:
void UART_Send_Byte(char data)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	uint32_t* SR = (uint32_t*)0x40004400;
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <UART_Send_Byte+0x48>)
 8001104:	60fb      	str	r3, [r7, #12]
	uint32_t* DR = (uint32_t*)0x40004404;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <UART_Send_Byte+0x4c>)
 8001108:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 7) & 1) != 1);
 800110a:	bf00      	nop
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	09db      	lsrs	r3, r3, #7
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f8      	beq.n	800110c <UART_Send_Byte+0x14>
	*DR = data;
 800111a:	79fa      	ldrb	r2, [r7, #7]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	601a      	str	r2, [r3, #0]
	while(((*SR >> 6) & 1) != 1);
 8001120:	bf00      	nop
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	099b      	lsrs	r3, r3, #6
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f8      	beq.n	8001122 <UART_Send_Byte+0x2a>
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40004400 	.word	0x40004400
 8001144:	40004404 	.word	0x40004404

08001148 <UART_Send_Multi_Byte>:
void UART_Send_Multi_Byte(char* arr, int size)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<size; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	e009      	b.n	800116c <UART_Send_Multi_Byte+0x24>
	{
		UART_Send_Byte(arr[i]);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ffc9 	bl	80010f8 <UART_Send_Byte>
	for(int i = 0; i<size; i++)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf1      	blt.n	8001158 <UART_Send_Multi_Byte+0x10>
	}
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f000 fac8 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f830 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f000 f88c 	bl	80012a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001190:	f001 f872 	bl	8002278 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temp_queue */
  temp_queueHandle = osMessageQueueNew (16, sizeof(float), &temp_queue_attributes);
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <main+0x4c>)
 8001196:	2104      	movs	r1, #4
 8001198:	2010      	movs	r0, #16
 800119a:	f001 f964 	bl	8002466 <osMessageQueueNew>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <main+0x50>)
 80011a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(send_data_task, NULL, &defaultTask_attributes);
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <main+0x54>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <main+0x58>)
 80011aa:	f001 f8af 	bl	800230c <osThreadNew>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <main+0x5c>)
 80011b2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(Read_data_temp_task, NULL, &myTask02_attributes);
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <main+0x60>)
 80011b6:	2100      	movs	r1, #0
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <main+0x64>)
 80011ba:	f001 f8a7 	bl	800230c <osThreadNew>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <main+0x68>)
 80011c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011c4:	f001 f87c 	bl	80022c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <main+0x48>
 80011ca:	bf00      	nop
 80011cc:	08007fc8 	.word	0x08007fc8
 80011d0:	20000204 	.word	0x20000204
 80011d4:	08007f80 	.word	0x08007f80
 80011d8:	080012dd 	.word	0x080012dd
 80011dc:	200001fc 	.word	0x200001fc
 80011e0:	08007fa4 	.word	0x08007fa4
 80011e4:	08001389 	.word	0x08001389
 80011e8:	20000200 	.word	0x20000200

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2230      	movs	r2, #48	; 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 ffae 	bl	800515c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <SystemClock_Config+0xb4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <SystemClock_Config+0xb4>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <SystemClock_Config+0xb4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <SystemClock_Config+0xb8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <SystemClock_Config+0xb8>)
 8001236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <SystemClock_Config+0xb8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001248:	2302      	movs	r3, #2
 800124a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001250:	2310      	movs	r3, #16
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fbb3 	bl	80019c8 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001268:	f000 f900 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fe16 	bl	8001eb8 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001292:	f000 f8eb 	bl	800146c <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	; 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_GPIO_Init+0x30>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <MX_GPIO_Init+0x30>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_GPIO_Init+0x30>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <send_data_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_send_data_task */
void send_data_task(void *argument)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	UART_init();
 80012e4:	f7ff feb4 	bl	8001050 <UART_init>
	float temp = 0;
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(temp_queueHandle, &temp, osPriorityNormal, 10000);
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <send_data_task+0x9c>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80012fa:	2218      	movs	r2, #24
 80012fc:	f001 f986 	bl	800260c <osMessageQueueGet>
	char temp_sensor[32] = {0};
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	619a      	str	r2, [r3, #24]
	char frac = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	frac = (temp - (int)(temp))*100;
 800131e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001322:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800132a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800137c <send_data_task+0xa0>
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133e:	edc7 7a00 	vstr	s15, [r7]
 8001342:	783b      	ldrb	r3, [r7, #0]
 8001344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	sprintf(temp_sensor,"temp: %d.%d *C\r\n", (int)temp, frac);
 8001348:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800134c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001354:	f107 0008 	add.w	r0, r7, #8
 8001358:	ee17 2a90 	vmov	r2, s15
 800135c:	4908      	ldr	r1, [pc, #32]	; (8001380 <send_data_task+0xa4>)
 800135e:	f004 fb6f 	bl	8005a40 <siprintf>
	UART_Send_Multi_Byte(temp_sensor, sizeof(temp_sensor));
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	2120      	movs	r1, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff feed 	bl	8001148 <UART_Send_Multi_Byte>
	osDelay(1000);
 800136e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001372:	f001 f85d 	bl	8002430 <osDelay>
  {
 8001376:	e7ba      	b.n	80012ee <send_data_task+0x12>
 8001378:	20000204 	.word	0x20000204
 800137c:	42c80000 	.word	0x42c80000
 8001380:	08007f54 	.word	0x08007f54
 8001384:	00000000 	.word	0x00000000

08001388 <Read_data_temp_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_data_temp_task */
void Read_data_temp_task(void *argument)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_data_temp_task */
	ADC_init();
 8001390:	f7ff fde4 	bl	8000f5c <ADC_init>
	Read_ADC();
 8001394:	f7ff fe30 	bl	8000ff8 <Read_ADC>
	uint16_t data_raw = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	82fb      	strh	r3, [r7, #22]
	float vin = 0, temp = 0;
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  data_raw = Read_ADC();
 80013a8:	f7ff fe26 	bl	8000ff8 <Read_ADC>
 80013ac:	4603      	mov	r3, r0
 80013ae:	82fb      	strh	r3, [r7, #22]
	  vin = (data_raw * 3.0)/4095.0;
 80013b0:	8afb      	ldrh	r3, [r7, #22]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8be 	bl	8000534 <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <Read_data_temp_task+0xd8>)
 80013be:	f7ff f923 	bl	8000608 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	a31f      	add	r3, pc, #124	; (adr r3, 8001448 <Read_data_temp_task+0xc0>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff fa44 	bl	800085c <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fbec 	bl	8000bb8 <__aeabi_d2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	613b      	str	r3, [r7, #16]
	  temp = ((vin - 0.76)/0.0025) + 25;
 80013e4:	6938      	ldr	r0, [r7, #16]
 80013e6:	f7ff f8b7 	bl	8000558 <__aeabi_f2d>
 80013ea:	a319      	add	r3, pc, #100	; (adr r3, 8001450 <Read_data_temp_task+0xc8>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7fe ff52 	bl	8000298 <__aeabi_dsub>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	a316      	add	r3, pc, #88	; (adr r3, 8001458 <Read_data_temp_task+0xd0>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff fa2b 	bl	800085c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <Read_data_temp_task+0xdc>)
 8001414:	f7fe ff42 	bl	800029c <__adddf3>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fbca 	bl	8000bb8 <__aeabi_d2f>
 8001424:	4603      	mov	r3, r0
 8001426:	60fb      	str	r3, [r7, #12]
	  osMessageQueuePut(temp_queueHandle, &temp, osPriorityNormal, 10000);
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <Read_data_temp_task+0xe0>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	f107 010c 	add.w	r1, r7, #12
 8001430:	f242 7310 	movw	r3, #10000	; 0x2710
 8001434:	2218      	movs	r2, #24
 8001436:	f001 f889 	bl	800254c <osMessageQueuePut>
	  osDelay(1000);
 800143a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143e:	f000 fff7 	bl	8002430 <osDelay>
	  data_raw = Read_ADC();
 8001442:	e7b1      	b.n	80013a8 <Read_data_temp_task+0x20>
 8001444:	f3af 8000 	nop.w
 8001448:	00000000 	.word	0x00000000
 800144c:	40affe00 	.word	0x40affe00
 8001450:	851eb852 	.word	0x851eb852
 8001454:	3fe851eb 	.word	0x3fe851eb
 8001458:	47ae147b 	.word	0x47ae147b
 800145c:	3f647ae1 	.word	0x3f647ae1
 8001460:	40080000 	.word	0x40080000
 8001464:	40390000 	.word	0x40390000
 8001468:	20000204 	.word	0x20000204

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>
	...

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_MspInit+0x54>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a11      	ldr	r2, [pc, #68]	; (80014cc <HAL_MspInit+0x54>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_MspInit+0x54>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_MspInit+0x54>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_MspInit+0x54>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_MspInit+0x54>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	210f      	movs	r1, #15
 80014ba:	f06f 0001 	mvn.w	r0, #1
 80014be:	f000 fa5a 	bl	8001976 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f95c 	bl	80017bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001504:	f002 fd8c 	bl	8004020 <xTaskGetSchedulerState>
 8001508:	4603      	mov	r3, r0
 800150a:	2b01      	cmp	r3, #1
 800150c:	d001      	beq.n	8001512 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800150e:	f003 fb73 	bl	8004bf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}

08001516 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  return 1;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <_kill>:

int _kill(int pid, int sig)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001530:	f003 fddc 	bl	80050ec <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	2216      	movs	r2, #22
 8001538:	601a      	str	r2, [r3, #0]
  return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_exit>:

void _exit (int status)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800154e:	f04f 31ff 	mov.w	r1, #4294967295
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffe7 	bl	8001526 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001558:	e7fe      	b.n	8001558 <_exit+0x12>

0800155a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e00a      	b.n	8001582 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156c:	f3af 8000 	nop.w
 8001570:	4601      	mov	r1, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	60ba      	str	r2, [r7, #8]
 8001578:	b2ca      	uxtb	r2, r1
 800157a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	dbf0      	blt.n	800156c <_read+0x12>
  }

  return len;
 800158a:	687b      	ldr	r3, [r7, #4]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e009      	b.n	80015ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	60ba      	str	r2, [r7, #8]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dbf1      	blt.n	80015a6 <_write+0x12>
  }
  return len;
 80015c2:	687b      	ldr	r3, [r7, #4]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_close>:

int _close(int file)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f4:	605a      	str	r2, [r3, #4]
  return 0;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_isatty>:

int _isatty(int file)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <_sbrk+0x5c>)
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_sbrk+0x60>)
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_sbrk+0x64>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <_sbrk+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001664:	f003 fd42 	bl	80050ec <__errno>
 8001668:	4603      	mov	r3, r0
 800166a:	220c      	movs	r2, #12
 800166c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e009      	b.n	8001688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <_sbrk+0x64>)
 8001684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20020000 	.word	0x20020000
 8001694:	00000400 	.word	0x00000400
 8001698:	20000208 	.word	0x20000208
 800169c:	20004b70 	.word	0x20004b70

080016a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ee:	f7ff ffd7 	bl	80016a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f003 fd01 	bl	80050f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fd43 	bl	8001180 <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001708:	080083dc 	.word	0x080083dc
  ldr r2, =_sbss
 800170c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001710:	20004b70 	.word	0x20004b70

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f90d 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	200f      	movs	r0, #15
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fe94 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f917 	bl	80019ae <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f8ed 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008
 80017e0:	2000020c 	.word	0x2000020c

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	2000020c 	.word	0x2000020c

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f7ff ff8e 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff47 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff5c 	bl	8001844 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff8e 	bl	80018b4 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5d 	bl	8001860 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffb0 	bl	800191c <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e267      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d075      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d00c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d112      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fe:	4b82      	ldr	r3, [pc, #520]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a0a:	d10b      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	4b7e      	ldr	r3, [pc, #504]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d05b      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x108>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d157      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e242      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x74>
 8001a2e:	4b76      	ldr	r3, [pc, #472]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a75      	ldr	r2, [pc, #468]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xb0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x98>
 8001a46:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6f      	ldr	r2, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6c      	ldr	r2, [pc, #432]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xb0>
 8001a60:	4b69      	ldr	r3, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a68      	ldr	r2, [pc, #416]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a65      	ldr	r2, [pc, #404]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff feb0 	bl	80017e4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff feac 	bl	80017e4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e207      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xc0>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fe9c 	bl	80017e4 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fe98 	bl	80017e4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1f3      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b51      	ldr	r3, [pc, #324]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xe8>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af6:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x152>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1c7      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4937      	ldr	r1, [pc, #220]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_RCC_OscConfig+0x244>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fe51 	bl	80017e4 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff fe4d 	bl	80017e4 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1a8      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4925      	ldr	r1, [pc, #148]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_RCC_OscConfig+0x244>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fe30 	bl	80017e4 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fe2c 	bl	80017e4 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e187      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d036      	beq.n	8001c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_RCC_OscConfig+0x248>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fe10 	bl	80017e4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fe0c 	bl	80017e4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e167      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x200>
 8001be6:	e01b      	b.n	8001c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_OscConfig+0x248>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fdf9 	bl	80017e4 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	e00e      	b.n	8001c14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fdf5 	bl	80017e4 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d907      	bls.n	8001c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e150      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	42470000 	.word	0x42470000
 8001c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	4b88      	ldr	r3, [pc, #544]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ea      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8097 	beq.w	8001d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b81      	ldr	r3, [pc, #516]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10f      	bne.n	8001c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4b7d      	ldr	r3, [pc, #500]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a7c      	ldr	r2, [pc, #496]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	4b77      	ldr	r3, [pc, #476]	; (8001e3c <HAL_RCC_OscConfig+0x474>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6a:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <HAL_RCC_OscConfig+0x474>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a73      	ldr	r2, [pc, #460]	; (8001e3c <HAL_RCC_OscConfig+0x474>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fdb5 	bl	80017e4 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff fdb1 	bl	80017e4 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e10c      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_RCC_OscConfig+0x474>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2ea>
 8001ca4:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca8:	4a63      	ldr	r2, [pc, #396]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x324>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x30c>
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	4a5e      	ldr	r2, [pc, #376]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	4b5c      	ldr	r3, [pc, #368]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a5b      	ldr	r2, [pc, #364]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0x324>
 8001cd4:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce0:	4b55      	ldr	r3, [pc, #340]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a54      	ldr	r2, [pc, #336]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d015      	beq.n	8001d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fd76 	bl	80017e4 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7ff fd72 	bl	80017e4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0cb      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0ee      	beq.n	8001cfc <HAL_RCC_OscConfig+0x334>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7ff fd60 	bl	80017e4 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7ff fd5c 	bl	80017e4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e0b5      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ee      	bne.n	8001d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d50:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a38      	ldr	r2, [pc, #224]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a1 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d05c      	beq.n	8001e2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d141      	bne.n	8001dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_RCC_OscConfig+0x478>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fd30 	bl	80017e4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff fd2c 	bl	80017e4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e087      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	491b      	ldr	r1, [pc, #108]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x478>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fd05 	bl	80017e4 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dde:	f7ff fd01 	bl	80017e4 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e05c      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x416>
 8001dfc:	e054      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x478>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fcee 	bl	80017e4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff fcea 	bl	80017e4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e045      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x444>
 8001e2a:	e03d      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e038      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x4ec>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d028      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d121      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d11a      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d111      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0cc      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b68      	ldr	r3, [pc, #416]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d90c      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b65      	ldr	r3, [pc, #404]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b8      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a58      	ldr	r2, [pc, #352]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	494d      	ldr	r1, [pc, #308]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d044      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d119      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e07f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e06f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e067      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b37      	ldr	r3, [pc, #220]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4934      	ldr	r1, [pc, #208]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff fc1c 	bl	80017e4 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7ff fc18 	bl	80017e4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e04f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 020c 	and.w	r2, r3, #12
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d20c      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e032      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4916      	ldr	r1, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800203e:	f000 f821 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002042:	4602      	mov	r2, r0
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	490a      	ldr	r1, [pc, #40]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	5ccb      	ldrb	r3, [r1, r3]
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1c8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fb7c 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00
 8002074:	40023800 	.word	0x40023800
 8002078:	08007fe0 	.word	0x08007fe0
 800207c:	20000000 	.word	0x20000000
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002088:	b090      	sub	sp, #64	; 0x40
 800208a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
 8002090:	2300      	movs	r3, #0
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002094:	2300      	movs	r3, #0
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_GetSysClockFreq+0x180>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d00d      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x40>
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	f200 80a1 	bhi.w	80021f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x34>
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x3a>
 80020b6:	e09b      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_GetSysClockFreq+0x184>)
 80020ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020bc:	e09b      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020be:	4b53      	ldr	r3, [pc, #332]	; (800220c <HAL_RCC_GetSysClockFreq+0x188>)
 80020c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020c2:	e098      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c4:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_RCC_GetSysClockFreq+0x180>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d028      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020da:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_RCC_GetSysClockFreq+0x180>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	099b      	lsrs	r3, r3, #6
 80020e0:	2200      	movs	r2, #0
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	627a      	str	r2, [r7, #36]	; 0x24
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020ec:	2100      	movs	r1, #0
 80020ee:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_RCC_GetSysClockFreq+0x188>)
 80020f0:	fb03 f201 	mul.w	r2, r3, r1
 80020f4:	2300      	movs	r3, #0
 80020f6:	fb00 f303 	mul.w	r3, r0, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	4a43      	ldr	r2, [pc, #268]	; (800220c <HAL_RCC_GetSysClockFreq+0x188>)
 80020fe:	fba0 1202 	umull	r1, r2, r0, r2
 8002102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002104:	460a      	mov	r2, r1
 8002106:	62ba      	str	r2, [r7, #40]	; 0x28
 8002108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210a:	4413      	add	r3, r2
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002110:	2200      	movs	r2, #0
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	61fa      	str	r2, [r7, #28]
 8002116:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800211a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800211e:	f7fe fd9b 	bl	8000c58 <__aeabi_uldivmod>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4613      	mov	r3, r2
 8002128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800212a:	e053      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212c:	4b35      	ldr	r3, [pc, #212]	; (8002204 <HAL_RCC_GetSysClockFreq+0x180>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	2200      	movs	r2, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	617a      	str	r2, [r7, #20]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800213e:	f04f 0b00 	mov.w	fp, #0
 8002142:	4652      	mov	r2, sl
 8002144:	465b      	mov	r3, fp
 8002146:	f04f 0000 	mov.w	r0, #0
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	0159      	lsls	r1, r3, #5
 8002150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002154:	0150      	lsls	r0, r2, #5
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	ebb2 080a 	subs.w	r8, r2, sl
 800215e:	eb63 090b 	sbc.w	r9, r3, fp
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800216e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002172:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002176:	ebb2 0408 	subs.w	r4, r2, r8
 800217a:	eb63 0509 	sbc.w	r5, r3, r9
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	00eb      	lsls	r3, r5, #3
 8002188:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800218c:	00e2      	lsls	r2, r4, #3
 800218e:	4614      	mov	r4, r2
 8002190:	461d      	mov	r5, r3
 8002192:	eb14 030a 	adds.w	r3, r4, sl
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	eb45 030b 	adc.w	r3, r5, fp
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021aa:	4629      	mov	r1, r5
 80021ac:	028b      	lsls	r3, r1, #10
 80021ae:	4621      	mov	r1, r4
 80021b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021b4:	4621      	mov	r1, r4
 80021b6:	028a      	lsls	r2, r1, #10
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021be:	2200      	movs	r2, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	60fa      	str	r2, [r7, #12]
 80021c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c8:	f7fe fd46 	bl	8000c58 <__aeabi_uldivmod>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4613      	mov	r3, r2
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	3301      	adds	r3, #1
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021ee:	e002      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetSysClockFreq+0x184>)
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3740      	adds	r7, #64	; 0x40
 80021fc:	46bd      	mov	sp, r7
 80021fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	00f42400 	.word	0x00f42400
 800220c:	017d7840 	.word	0x017d7840

08002210 <__NVIC_SetPriority>:
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002268:	2100      	movs	r1, #0
 800226a:	f06f 0004 	mvn.w	r0, #4
 800226e:	f7ff ffcf 	bl	8002210 <__NVIC_SetPriority>
#endif
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800227e:	f3ef 8305 	mrs	r3, IPSR
 8002282:	603b      	str	r3, [r7, #0]
  return(result);
 8002284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800228a:	f06f 0305 	mvn.w	r3, #5
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	e00c      	b.n	80022ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <osKernelInitialize+0x44>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <osKernelInitialize+0x44>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	e002      	b.n	80022ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000210 	.word	0x20000210

080022c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022c6:	f3ef 8305 	mrs	r3, IPSR
 80022ca:	603b      	str	r3, [r7, #0]
  return(result);
 80022cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <osKernelStart+0x1a>
    stat = osErrorISR;
 80022d2:	f06f 0305 	mvn.w	r3, #5
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	e010      	b.n	80022fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <osKernelStart+0x48>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d109      	bne.n	80022f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80022e2:	f7ff ffbf 	bl	8002264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <osKernelStart+0x48>)
 80022e8:	2202      	movs	r2, #2
 80022ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80022ec:	f001 fa50 	bl	8003790 <vTaskStartScheduler>
      stat = osOK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	e002      	b.n	80022fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000210 	.word	0x20000210

0800230c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b08e      	sub	sp, #56	; 0x38
 8002310:	af04      	add	r7, sp, #16
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800231c:	f3ef 8305 	mrs	r3, IPSR
 8002320:	617b      	str	r3, [r7, #20]
  return(result);
 8002322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002324:	2b00      	cmp	r3, #0
 8002326:	d17e      	bne.n	8002426 <osThreadNew+0x11a>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d07b      	beq.n	8002426 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002332:	2318      	movs	r3, #24
 8002334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d045      	beq.n	80023d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <osThreadNew+0x48>
        name = attr->name;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <osThreadNew+0x6e>
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b38      	cmp	r3, #56	; 0x38
 800236c:	d805      	bhi.n	800237a <osThreadNew+0x6e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <osThreadNew+0x72>
        return (NULL);
 800237a:	2300      	movs	r3, #0
 800237c:	e054      	b.n	8002428 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00e      	beq.n	80023b4 <osThreadNew+0xa8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b5b      	cmp	r3, #91	; 0x5b
 800239c:	d90a      	bls.n	80023b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <osThreadNew+0xa8>
        mem = 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	e010      	b.n	80023d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <osThreadNew+0xca>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <osThreadNew+0xca>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d104      	bne.n	80023d6 <osThreadNew+0xca>
          mem = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	e001      	b.n	80023d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d110      	bne.n	80023fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023e4:	9202      	str	r2, [sp, #8]
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6a3a      	ldr	r2, [r7, #32]
 80023f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fff6 	bl	80033e4 <xTaskCreateStatic>
 80023f8:	4603      	mov	r3, r0
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	e013      	b.n	8002426 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d110      	bne.n	8002426 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	b29a      	uxth	r2, r3
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f001 f841 	bl	800349e <xTaskCreate>
 800241c:	4603      	mov	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <osThreadNew+0x11a>
            hTask = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002426:	693b      	ldr	r3, [r7, #16]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002438:	f3ef 8305 	mrs	r3, IPSR
 800243c:	60bb      	str	r3, [r7, #8]
  return(result);
 800243e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <osDelay+0x1c>
    stat = osErrorISR;
 8002444:	f06f 0305 	mvn.w	r3, #5
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e007      	b.n	800245c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f001 f966 	bl	8003728 <vTaskDelay>
    }
  }

  return (stat);
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002466:	b580      	push	{r7, lr}
 8002468:	b08a      	sub	sp, #40	; 0x28
 800246a:	af02      	add	r7, sp, #8
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002476:	f3ef 8305 	mrs	r3, IPSR
 800247a:	613b      	str	r3, [r7, #16]
  return(result);
 800247c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800247e:	2b00      	cmp	r3, #0
 8002480:	d15f      	bne.n	8002542 <osMessageQueueNew+0xdc>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05c      	beq.n	8002542 <osMessageQueueNew+0xdc>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d059      	beq.n	8002542 <osMessageQueueNew+0xdc>
    mem = -1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d029      	beq.n	80024ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <osMessageQueueNew+0x62>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b4f      	cmp	r3, #79	; 0x4f
 80024a8:	d90e      	bls.n	80024c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	429a      	cmp	r2, r3
 80024c0:	d302      	bcc.n	80024c8 <osMessageQueueNew+0x62>
        mem = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	e014      	b.n	80024f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d110      	bne.n	80024f2 <osMessageQueueNew+0x8c>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10c      	bne.n	80024f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d108      	bne.n	80024f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d104      	bne.n	80024f2 <osMessageQueueNew+0x8c>
          mem = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	e001      	b.n	80024f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d10b      	bne.n	8002510 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2100      	movs	r1, #0
 8002502:	9100      	str	r1, [sp, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa2e 	bl	8002968 <xQueueGenericCreateStatic>
 800250c:	61f8      	str	r0, [r7, #28]
 800250e:	e008      	b.n	8002522 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002516:	2200      	movs	r2, #0
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fa9c 	bl	8002a58 <xQueueGenericCreate>
 8002520:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00c      	beq.n	8002542 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <osMessageQueueNew+0xd0>
        name = attr->name;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e001      	b.n	800253a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800253a:	6979      	ldr	r1, [r7, #20]
 800253c:	69f8      	ldr	r0, [r7, #28]
 800253e:	f000 fef3 	bl	8003328 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002542:	69fb      	ldr	r3, [r7, #28]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002564:	f3ef 8305 	mrs	r3, IPSR
 8002568:	617b      	str	r3, [r7, #20]
  return(result);
 800256a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800256c:	2b00      	cmp	r3, #0
 800256e:	d028      	beq.n	80025c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <osMessageQueuePut+0x36>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <osMessageQueuePut+0x36>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002582:	f06f 0303 	mvn.w	r3, #3
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	e038      	b.n	80025fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800258e:	f107 0210 	add.w	r2, r7, #16
 8002592:	2300      	movs	r3, #0
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	69b8      	ldr	r0, [r7, #24]
 8002598:	f000 fbba 	bl	8002d10 <xQueueGenericSendFromISR>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d003      	beq.n	80025aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80025a2:	f06f 0302 	mvn.w	r3, #2
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	e028      	b.n	80025fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d025      	beq.n	80025fc <osMessageQueuePut+0xb0>
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <osMessageQueuePut+0xbc>)
 80025b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	e01c      	b.n	80025fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <osMessageQueuePut+0x82>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80025ce:	f06f 0303 	mvn.w	r3, #3
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	e012      	b.n	80025fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80025d6:	2300      	movs	r3, #0
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	69b8      	ldr	r0, [r7, #24]
 80025de:	f000 fa99 	bl	8002b14 <xQueueGenericSend>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d009      	beq.n	80025fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80025ee:	f06f 0301 	mvn.w	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	e002      	b.n	80025fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80025f6:	f06f 0302 	mvn.w	r3, #2
 80025fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80025fc:	69fb      	ldr	r3, [r7, #28]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000ed04 	.word	0xe000ed04

0800260c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002622:	f3ef 8305 	mrs	r3, IPSR
 8002626:	617b      	str	r3, [r7, #20]
  return(result);
 8002628:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800262a:	2b00      	cmp	r3, #0
 800262c:	d028      	beq.n	8002680 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <osMessageQueueGet+0x34>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <osMessageQueueGet+0x34>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002640:	f06f 0303 	mvn.w	r3, #3
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	e037      	b.n	80026b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	461a      	mov	r2, r3
 8002652:	68b9      	ldr	r1, [r7, #8]
 8002654:	69b8      	ldr	r0, [r7, #24]
 8002656:	f000 fcd7 	bl	8003008 <xQueueReceiveFromISR>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d003      	beq.n	8002668 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002660:	f06f 0302 	mvn.w	r3, #2
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e027      	b.n	80026b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d024      	beq.n	80026b8 <osMessageQueueGet+0xac>
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <osMessageQueueGet+0xb8>)
 8002670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	e01b      	b.n	80026b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <osMessageQueueGet+0x80>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800268c:	f06f 0303 	mvn.w	r3, #3
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e011      	b.n	80026b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	69b8      	ldr	r0, [r7, #24]
 800269a:	f000 fbd5 	bl	8002e48 <xQueueReceive>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d009      	beq.n	80026b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80026aa:	f06f 0301 	mvn.w	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	e002      	b.n	80026b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80026b2:	f06f 0302 	mvn.w	r3, #2
 80026b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80026b8:	69fb      	ldr	r3, [r7, #28]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000ed04 	.word	0xe000ed04

080026c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80026d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <vApplicationGetIdleTaskMemory+0x30>)
 80026de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000214 	.word	0x20000214
 80026f8:	20000270 	.word	0x20000270

080026fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4a07      	ldr	r2, [pc, #28]	; (8002728 <vApplicationGetTimerTaskMemory+0x2c>)
 800270c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <vApplicationGetTimerTaskMemory+0x30>)
 8002712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800271a:	601a      	str	r2, [r3, #0]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	20000470 	.word	0x20000470
 800272c:	200004cc 	.word	0x200004cc

08002730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f103 0208 	add.w	r2, r3, #8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f103 0208 	add.w	r2, r3, #8
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f103 0208 	add.w	r2, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d103      	bne.n	80027f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e00c      	b.n	800280c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3308      	adds	r3, #8
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e002      	b.n	8002800 <vListInsert+0x2e>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	d2f6      	bcs.n	80027fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	601a      	str	r2, [r3, #0]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6892      	ldr	r2, [r2, #8]
 800285a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6852      	ldr	r2, [r2, #4]
 8002864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d103      	bne.n	8002878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1e5a      	subs	r2, r3, #1
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028be:	bf00      	nop
 80028c0:	e7fe      	b.n	80028c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028c2:	f002 f907 	bl	8004ad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	68f9      	ldr	r1, [r7, #12]
 80028d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	441a      	add	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	3b01      	subs	r3, #1
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	441a      	add	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	22ff      	movs	r2, #255	; 0xff
 8002906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	22ff      	movs	r2, #255	; 0xff
 800290e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d114      	bne.n	8002942 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01a      	beq.n	8002956 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3310      	adds	r3, #16
 8002924:	4618      	mov	r0, r3
 8002926:	f001 f9bd 	bl	8003ca4 <xTaskRemoveFromEventList>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d012      	beq.n	8002956 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <xQueueGenericReset+0xcc>)
 8002932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	e009      	b.n	8002956 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3310      	adds	r3, #16
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fef2 	bl	8002730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3324      	adds	r3, #36	; 0x24
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff feed 	bl	8002730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002956:	f002 f8ed 	bl	8004b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	e000ed04 	.word	0xe000ed04

08002968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08e      	sub	sp, #56	; 0x38
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <xQueueGenericCreateStatic+0x52>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <xQueueGenericCreateStatic+0x56>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <xQueueGenericCreateStatic+0x58>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	623b      	str	r3, [r7, #32]
}
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <xQueueGenericCreateStatic+0x7e>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <xQueueGenericCreateStatic+0x82>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <xQueueGenericCreateStatic+0x84>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	61fb      	str	r3, [r7, #28]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a06:	2350      	movs	r3, #80	; 0x50
 8002a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b50      	cmp	r3, #80	; 0x50
 8002a0e:	d00a      	beq.n	8002a26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	61bb      	str	r3, [r7, #24]
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f83f 	bl	8002acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3730      	adds	r7, #48	; 0x30
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	613b      	str	r3, [r7, #16]
}
 8002a7e:	bf00      	nop
 8002a80:	e7fe      	b.n	8002a80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3350      	adds	r3, #80	; 0x50
 8002a90:	4618      	mov	r0, r3
 8002a92:	f002 f941 	bl	8004d18 <pvPortMalloc>
 8002a96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d011      	beq.n	8002ac2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3350      	adds	r3, #80	; 0x50
 8002aa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ab0:	79fa      	ldrb	r2, [r7, #7]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f805 	bl	8002acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d103      	bne.n	8002ae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e002      	b.n	8002aee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002afa:	2101      	movs	r1, #1
 8002afc:	69b8      	ldr	r0, [r7, #24]
 8002afe:	f7ff fecb 	bl	8002898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	; 0x38
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <xQueueGenericSend+0x32>
	__asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b42:	bf00      	nop
 8002b44:	e7fe      	b.n	8002b44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <xQueueGenericSend+0x40>
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <xQueueGenericSend+0x44>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <xQueueGenericSend+0x46>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <xQueueGenericSend+0x60>
	__asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b70:	bf00      	nop
 8002b72:	e7fe      	b.n	8002b72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d103      	bne.n	8002b82 <xQueueGenericSend+0x6e>
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <xQueueGenericSend+0x72>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <xQueueGenericSend+0x74>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	623b      	str	r3, [r7, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	e7fe      	b.n	8002ba0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ba2:	f001 fa3d 	bl	8004020 <xTaskGetSchedulerState>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <xQueueGenericSend+0x9e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <xQueueGenericSend+0xa2>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <xQueueGenericSend+0xa4>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	61fb      	str	r3, [r7, #28]
}
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bd2:	f001 ff7f 	bl	8004ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <xQueueGenericSend+0xd4>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d129      	bne.n	8002c3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bee:	f000 fa8b 	bl	8003108 <prvCopyDataToQueue>
 8002bf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 f84f 	bl	8003ca4 <xTaskRemoveFromEventList>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <xQueueGenericSend+0x1f8>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	e00a      	b.n	8002c34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c24:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <xQueueGenericSend+0x1f8>)
 8002c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c34:	f001 ff7e 	bl	8004b34 <vPortExitCritical>
				return pdPASS;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e063      	b.n	8002d04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c42:	f001 ff77 	bl	8004b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e05c      	b.n	8002d04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 f889 	bl	8003d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c5e:	f001 ff69 	bl	8004b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c62:	f000 fdfb 	bl	800385c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c66:	f001 ff35 	bl	8004ad4 <vPortEnterCritical>
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c70:	b25b      	sxtb	r3, r3
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c76:	d103      	bne.n	8002c80 <xQueueGenericSend+0x16c>
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c86:	b25b      	sxtb	r3, r3
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d103      	bne.n	8002c96 <xQueueGenericSend+0x182>
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c96:	f001 ff4d 	bl	8004b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c9a:	1d3a      	adds	r2, r7, #4
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 f878 	bl	8003d98 <xTaskCheckForTimeOut>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d124      	bne.n	8002cf8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb0:	f000 fb22 	bl	80032f8 <prvIsQueueFull>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d018      	beq.n	8002cec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	3310      	adds	r3, #16
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 ff9e 	bl	8003c04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cca:	f000 faad 	bl	8003228 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cce:	f000 fdd3 	bl	8003878 <xTaskResumeAll>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f47f af7c 	bne.w	8002bd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <xQueueGenericSend+0x1f8>)
 8002cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	e772      	b.n	8002bd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cee:	f000 fa9b 	bl	8003228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cf2:	f000 fdc1 	bl	8003878 <xTaskResumeAll>
 8002cf6:	e76c      	b.n	8002bd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cfa:	f000 fa95 	bl	8003228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cfe:	f000 fdbb 	bl	8003878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3738      	adds	r7, #56	; 0x38
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	e000ed04 	.word	0xe000ed04

08002d10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b090      	sub	sp, #64	; 0x40
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <xQueueGenericSendFromISR+0x3c>
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <xQueueGenericSendFromISR+0x40>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <xQueueGenericSendFromISR+0x42>
 8002d50:	2300      	movs	r3, #0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d103      	bne.n	8002d7a <xQueueGenericSendFromISR+0x6a>
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <xQueueGenericSendFromISR+0x6e>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <xQueueGenericSendFromISR+0x70>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	623b      	str	r3, [r7, #32]
}
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d9a:	f001 ff7d 	bl	8004c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d9e:	f3ef 8211 	mrs	r2, BASEPRI
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	61fa      	str	r2, [r7, #28]
 8002db4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002db6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <xQueueGenericSendFromISR+0xbc>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d12f      	bne.n	8002e2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002de2:	f000 f991 	bl	8003108 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002de6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d112      	bne.n	8002e16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d016      	beq.n	8002e26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	3324      	adds	r3, #36	; 0x24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 ff51 	bl	8003ca4 <xTaskRemoveFromEventList>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00e      	beq.n	8002e26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e007      	b.n	8002e26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	b25a      	sxtb	r2, r3
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e26:	2301      	movs	r3, #1
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e2a:	e001      	b.n	8002e30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3740      	adds	r7, #64	; 0x40
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08c      	sub	sp, #48	; 0x30
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <xQueueReceive+0x30>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	623b      	str	r3, [r7, #32]
}
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <xQueueReceive+0x3e>
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <xQueueReceive+0x42>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueReceive+0x44>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueReceive+0x5e>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	61fb      	str	r3, [r7, #28]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ea6:	f001 f8bb 	bl	8004020 <xTaskGetSchedulerState>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <xQueueReceive+0x6e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <xQueueReceive+0x72>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueReceive+0x74>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <xQueueReceive+0x8e>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	61bb      	str	r3, [r7, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ed6:	f001 fdfd 	bl	8004ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01f      	beq.n	8002f26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eea:	f000 f977 	bl	80031dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	1e5a      	subs	r2, r3, #1
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00f      	beq.n	8002f1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	3310      	adds	r3, #16
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fece 	bl	8003ca4 <xTaskRemoveFromEventList>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f0e:	4b3d      	ldr	r3, [pc, #244]	; (8003004 <xQueueReceive+0x1bc>)
 8002f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f1e:	f001 fe09 	bl	8004b34 <vPortExitCritical>
				return pdPASS;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e069      	b.n	8002ffa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f2c:	f001 fe02 	bl	8004b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e062      	b.n	8002ffa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 ff14 	bl	8003d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f48:	f001 fdf4 	bl	8004b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f4c:	f000 fc86 	bl	800385c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f50:	f001 fdc0 	bl	8004ad4 <vPortEnterCritical>
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f5a:	b25b      	sxtb	r3, r3
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d103      	bne.n	8002f6a <xQueueReceive+0x122>
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f70:	b25b      	sxtb	r3, r3
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d103      	bne.n	8002f80 <xQueueReceive+0x138>
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f80:	f001 fdd8 	bl	8004b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f84:	1d3a      	adds	r2, r7, #4
 8002f86:	f107 0310 	add.w	r3, r7, #16
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 ff03 	bl	8003d98 <xTaskCheckForTimeOut>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d123      	bne.n	8002fe0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9a:	f000 f997 	bl	80032cc <prvIsQueueEmpty>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d017      	beq.n	8002fd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	3324      	adds	r3, #36	; 0x24
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fe29 	bl	8003c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb4:	f000 f938 	bl	8003228 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fb8:	f000 fc5e 	bl	8003878 <xTaskResumeAll>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d189      	bne.n	8002ed6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <xQueueReceive+0x1bc>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	e780      	b.n	8002ed6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fd6:	f000 f927 	bl	8003228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fda:	f000 fc4d 	bl	8003878 <xTaskResumeAll>
 8002fde:	e77a      	b.n	8002ed6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe2:	f000 f921 	bl	8003228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fe6:	f000 fc47 	bl	8003878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fec:	f000 f96e 	bl	80032cc <prvIsQueueEmpty>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f43f af6f 	beq.w	8002ed6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3730      	adds	r7, #48	; 0x30
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	e000ed04 	.word	0xe000ed04

08003008 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08e      	sub	sp, #56	; 0x38
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	623b      	str	r3, [r7, #32]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <xQueueReceiveFromISR+0x3a>
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <xQueueReceiveFromISR+0x3e>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <xQueueReceiveFromISR+0x40>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	61fb      	str	r3, [r7, #28]
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003062:	f001 fe19 	bl	8004c98 <vPortValidateInterruptPriority>
	__asm volatile
 8003066:	f3ef 8211 	mrs	r2, BASEPRI
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	61ba      	str	r2, [r7, #24]
 800307c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800307e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d02f      	beq.n	80030ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800309c:	f000 f89e 	bl	80031dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80030a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d112      	bne.n	80030d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	3310      	adds	r3, #16
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fdf0 	bl	8003ca4 <xTaskRemoveFromEventList>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00e      	beq.n	80030e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e007      	b.n	80030e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80030d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030dc:	3301      	adds	r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	b25a      	sxtb	r2, r3
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80030e8:	2301      	movs	r3, #1
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
 80030ec:	e001      	b.n	80030f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f383 8811 	msr	BASEPRI, r3
}
 80030fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003100:	4618      	mov	r0, r3
 8003102:	3738      	adds	r7, #56	; 0x38
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d14d      	bne.n	80031ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 ff92 	bl	800405c <xTaskPriorityDisinherit>
 8003138:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	e043      	b.n	80031ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d119      	bne.n	800317c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6858      	ldr	r0, [r3, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	461a      	mov	r2, r3
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	f001 fff4 	bl	8005140 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	441a      	add	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	429a      	cmp	r2, r3
 8003170:	d32b      	bcc.n	80031ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	e026      	b.n	80031ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68d8      	ldr	r0, [r3, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	461a      	mov	r2, r3
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	f001 ffda 	bl	8005140 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	425b      	negs	r3, r3
 8003196:	441a      	add	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d207      	bcs.n	80031b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	425b      	negs	r3, r3
 80031b2:	441a      	add	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d105      	bne.n	80031ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031d2:	697b      	ldr	r3, [r7, #20]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d018      	beq.n	8003220 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	441a      	add	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	d303      	bcc.n	8003210 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68d9      	ldr	r1, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	461a      	mov	r2, r3
 800321a:	6838      	ldr	r0, [r7, #0]
 800321c:	f001 ff90 	bl	8005140 <memcpy>
	}
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003230:	f001 fc50 	bl	8004ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800323a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800323c:	e011      	b.n	8003262 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3324      	adds	r3, #36	; 0x24
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fd2a 	bl	8003ca4 <xTaskRemoveFromEventList>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003256:	f000 fe01 	bl	8003e5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	3b01      	subs	r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	dce9      	bgt.n	800323e <prvUnlockQueue+0x16>
 800326a:	e000      	b.n	800326e <prvUnlockQueue+0x46>
					break;
 800326c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	22ff      	movs	r2, #255	; 0xff
 8003272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003276:	f001 fc5d 	bl	8004b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800327a:	f001 fc2b 	bl	8004ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003284:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003286:	e011      	b.n	80032ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3310      	adds	r3, #16
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fd05 	bl	8003ca4 <xTaskRemoveFromEventList>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032a0:	f000 fddc 	bl	8003e5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032a4:	7bbb      	ldrb	r3, [r7, #14]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	dce9      	bgt.n	8003288 <prvUnlockQueue+0x60>
 80032b4:	e000      	b.n	80032b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	22ff      	movs	r2, #255	; 0xff
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032c0:	f001 fc38 	bl	8004b34 <vPortExitCritical>
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032d4:	f001 fbfe 	bl	8004ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032e0:	2301      	movs	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e001      	b.n	80032ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ea:	f001 fc23 	bl	8004b34 <vPortExitCritical>

	return xReturn;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003300:	f001 fbe8 	bl	8004ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	429a      	cmp	r2, r3
 800330e:	d102      	bne.n	8003316 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003310:	2301      	movs	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e001      	b.n	800331a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800331a:	f001 fc0b 	bl	8004b34 <vPortExitCritical>

	return xReturn;
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e014      	b.n	8003362 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003338:	4a0f      	ldr	r2, [pc, #60]	; (8003378 <vQueueAddToRegistry+0x50>)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003344:	490c      	ldr	r1, [pc, #48]	; (8003378 <vQueueAddToRegistry+0x50>)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <vQueueAddToRegistry+0x50>)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800335a:	e006      	b.n	800336a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3301      	adds	r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b07      	cmp	r3, #7
 8003366:	d9e7      	bls.n	8003338 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200008cc 	.word	0x200008cc

0800337c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800338c:	f001 fba2 	bl	8004ad4 <vPortEnterCritical>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003396:	b25b      	sxtb	r3, r3
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d103      	bne.n	80033a6 <vQueueWaitForMessageRestricted+0x2a>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d103      	bne.n	80033bc <vQueueWaitForMessageRestricted+0x40>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033bc:	f001 fbba 	bl	8004b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3324      	adds	r3, #36	; 0x24
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fc3b 	bl	8003c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff26 	bl	8003228 <prvUnlockQueue>
	}
 80033dc:	bf00      	nop
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08e      	sub	sp, #56	; 0x38
 80033e8:	af04      	add	r7, sp, #16
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <xTaskCreateStatic+0x2a>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	623b      	str	r3, [r7, #32]
}
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <xTaskCreateStatic+0x46>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	61fb      	str	r3, [r7, #28]
}
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800342a:	235c      	movs	r3, #92	; 0x5c
 800342c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b5c      	cmp	r3, #92	; 0x5c
 8003432:	d00a      	beq.n	800344a <xTaskCreateStatic+0x66>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	61bb      	str	r3, [r7, #24]
}
 8003446:	bf00      	nop
 8003448:	e7fe      	b.n	8003448 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800344a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01e      	beq.n	8003490 <xTaskCreateStatic+0xac>
 8003452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01b      	beq.n	8003490 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003460:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800346a:	2300      	movs	r3, #0
 800346c:	9303      	str	r3, [sp, #12]
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	9302      	str	r3, [sp, #8]
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f850 	bl	8003528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800348a:	f000 f8dd 	bl	8003648 <prvAddNewTaskToReadyList>
 800348e:	e001      	b.n	8003494 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003494:	697b      	ldr	r3, [r7, #20]
	}
 8003496:	4618      	mov	r0, r3
 8003498:	3728      	adds	r7, #40	; 0x28
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b08c      	sub	sp, #48	; 0x30
 80034a2:	af04      	add	r7, sp, #16
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 fc30 	bl	8004d18 <pvPortMalloc>
 80034b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00e      	beq.n	80034de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034c0:	205c      	movs	r0, #92	; 0x5c
 80034c2:	f001 fc29 	bl	8004d18 <pvPortMalloc>
 80034c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
 80034d4:	e005      	b.n	80034e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	f001 fcea 	bl	8004eb0 <vPortFree>
 80034dc:	e001      	b.n	80034e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	2300      	movs	r3, #0
 80034f4:	9303      	str	r3, [sp, #12]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	9302      	str	r3, [sp, #8]
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f80e 	bl	8003528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800350c:	69f8      	ldr	r0, [r7, #28]
 800350e:	f000 f89b 	bl	8003648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003512:	2301      	movs	r3, #1
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e002      	b.n	800351e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003518:	f04f 33ff 	mov.w	r3, #4294967295
 800351c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800351e:	69bb      	ldr	r3, [r7, #24]
	}
 8003520:	4618      	mov	r0, r3
 8003522:	3720      	adds	r7, #32
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	461a      	mov	r2, r3
 8003540:	21a5      	movs	r1, #165	; 0xa5
 8003542:	f001 fe0b 	bl	800515c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003550:	3b01      	subs	r3, #1
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f023 0307 	bic.w	r3, r3, #7
 800355e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <prvInitialiseNewTask+0x58>
	__asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	617b      	str	r3, [r7, #20]
}
 800357c:	bf00      	nop
 800357e:	e7fe      	b.n	800357e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01f      	beq.n	80035c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	e012      	b.n	80035b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	7819      	ldrb	r1, [r3, #0]
 8003594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	3334      	adds	r3, #52	; 0x34
 800359c:	460a      	mov	r2, r1
 800359e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d006      	beq.n	80035ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	3301      	adds	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b0f      	cmp	r3, #15
 80035b6:	d9e9      	bls.n	800358c <prvInitialiseNewTask+0x64>
 80035b8:	e000      	b.n	80035bc <prvInitialiseNewTask+0x94>
			{
				break;
 80035ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035c4:	e003      	b.n	80035ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	2b37      	cmp	r3, #55	; 0x37
 80035d2:	d901      	bls.n	80035d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035d4:	2337      	movs	r3, #55	; 0x37
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	2200      	movs	r2, #0
 80035e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	3304      	adds	r3, #4
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f8be 	bl	8002770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	3318      	adds	r3, #24
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff f8b9 	bl	8002770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003602:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003612:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	2200      	movs	r2, #0
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	69b8      	ldr	r0, [r7, #24]
 8003628:	f001 f928 	bl	800487c <pxPortInitialiseStack>
 800362c:	4602      	mov	r2, r0
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800363c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800363e:	bf00      	nop
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003650:	f001 fa40 	bl	8004ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003654:	4b2d      	ldr	r3, [pc, #180]	; (800370c <prvAddNewTaskToReadyList+0xc4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	4a2c      	ldr	r2, [pc, #176]	; (800370c <prvAddNewTaskToReadyList+0xc4>)
 800365c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800365e:	4b2c      	ldr	r3, [pc, #176]	; (8003710 <prvAddNewTaskToReadyList+0xc8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003666:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <prvAddNewTaskToReadyList+0xc8>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <prvAddNewTaskToReadyList+0xc4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d110      	bne.n	8003696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003674:	f000 fc16 	bl	8003ea4 <prvInitialiseTaskLists>
 8003678:	e00d      	b.n	8003696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <prvAddNewTaskToReadyList+0xcc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003682:	4b23      	ldr	r3, [pc, #140]	; (8003710 <prvAddNewTaskToReadyList+0xc8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	429a      	cmp	r2, r3
 800368e:	d802      	bhi.n	8003696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003690:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <prvAddNewTaskToReadyList+0xc8>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <prvAddNewTaskToReadyList+0xd0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <prvAddNewTaskToReadyList+0xd0>)
 800369e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036a0:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <prvAddNewTaskToReadyList+0xd0>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <prvAddNewTaskToReadyList+0xd4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d903      	bls.n	80036bc <prvAddNewTaskToReadyList+0x74>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	4a18      	ldr	r2, [pc, #96]	; (800371c <prvAddNewTaskToReadyList+0xd4>)
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <prvAddNewTaskToReadyList+0xd8>)
 80036ca:	441a      	add	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f7ff f859 	bl	800278a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036d8:	f001 fa2c 	bl	8004b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <prvAddNewTaskToReadyList+0xcc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00e      	beq.n	8003702 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <prvAddNewTaskToReadyList+0xc8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d207      	bcs.n	8003702 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <prvAddNewTaskToReadyList+0xdc>)
 80036f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000de0 	.word	0x20000de0
 8003710:	2000090c 	.word	0x2000090c
 8003714:	20000dec 	.word	0x20000dec
 8003718:	20000dfc 	.word	0x20000dfc
 800371c:	20000de8 	.word	0x20000de8
 8003720:	20000910 	.word	0x20000910
 8003724:	e000ed04 	.word	0xe000ed04

08003728 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d017      	beq.n	800376a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <vTaskDelay+0x60>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <vTaskDelay+0x30>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	60bb      	str	r3, [r7, #8]
}
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003758:	f000 f880 	bl	800385c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800375c:	2100      	movs	r1, #0
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fcea 	bl	8004138 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003764:	f000 f888 	bl	8003878 <xTaskResumeAll>
 8003768:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <vTaskDelay+0x64>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000e08 	.word	0x20000e08
 800378c:	e000ed04 	.word	0xe000ed04

08003790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800379e:	463a      	mov	r2, r7
 80037a0:	1d39      	adds	r1, r7, #4
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe ff8e 	bl	80026c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037ac:	6839      	ldr	r1, [r7, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	9202      	str	r2, [sp, #8]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	2300      	movs	r3, #0
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	460a      	mov	r2, r1
 80037be:	4921      	ldr	r1, [pc, #132]	; (8003844 <vTaskStartScheduler+0xb4>)
 80037c0:	4821      	ldr	r0, [pc, #132]	; (8003848 <vTaskStartScheduler+0xb8>)
 80037c2:	f7ff fe0f 	bl	80033e4 <xTaskCreateStatic>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4a20      	ldr	r2, [pc, #128]	; (800384c <vTaskStartScheduler+0xbc>)
 80037ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037cc:	4b1f      	ldr	r3, [pc, #124]	; (800384c <vTaskStartScheduler+0xbc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037d4:	2301      	movs	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e001      	b.n	80037de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d102      	bne.n	80037ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80037e4:	f000 fcfc 	bl	80041e0 <xTimerCreateTimerTask>
 80037e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d116      	bne.n	800381e <vTaskStartScheduler+0x8e>
	__asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	613b      	str	r3, [r7, #16]
}
 8003802:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003804:	4b12      	ldr	r3, [pc, #72]	; (8003850 <vTaskStartScheduler+0xc0>)
 8003806:	f04f 32ff 	mov.w	r2, #4294967295
 800380a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <vTaskStartScheduler+0xc4>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <vTaskStartScheduler+0xc8>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003818:	f001 f8ba 	bl	8004990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800381c:	e00e      	b.n	800383c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d10a      	bne.n	800383c <vTaskStartScheduler+0xac>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	60fb      	str	r3, [r7, #12]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <vTaskStartScheduler+0xaa>
}
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	08007f68 	.word	0x08007f68
 8003848:	08003e75 	.word	0x08003e75
 800384c:	20000e04 	.word	0x20000e04
 8003850:	20000e00 	.word	0x20000e00
 8003854:	20000dec 	.word	0x20000dec
 8003858:	20000de4 	.word	0x20000de4

0800385c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <vTaskSuspendAll+0x18>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	4a03      	ldr	r2, [pc, #12]	; (8003874 <vTaskSuspendAll+0x18>)
 8003868:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800386a:	bf00      	nop
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	20000e08 	.word	0x20000e08

08003878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003886:	4b42      	ldr	r3, [pc, #264]	; (8003990 <xTaskResumeAll+0x118>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	603b      	str	r3, [r7, #0]
}
 80038a0:	bf00      	nop
 80038a2:	e7fe      	b.n	80038a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038a4:	f001 f916 	bl	8004ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <xTaskResumeAll+0x118>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	4a38      	ldr	r2, [pc, #224]	; (8003990 <xTaskResumeAll+0x118>)
 80038b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b2:	4b37      	ldr	r3, [pc, #220]	; (8003990 <xTaskResumeAll+0x118>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d162      	bne.n	8003980 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <xTaskResumeAll+0x11c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d05e      	beq.n	8003980 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038c2:	e02f      	b.n	8003924 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c4:	4b34      	ldr	r3, [pc, #208]	; (8003998 <xTaskResumeAll+0x120>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3318      	adds	r3, #24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe ffb7 	bl	8002844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3304      	adds	r3, #4
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe ffb2 	bl	8002844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <xTaskResumeAll+0x124>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d903      	bls.n	80038f4 <xTaskResumeAll+0x7c>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4a2a      	ldr	r2, [pc, #168]	; (800399c <xTaskResumeAll+0x124>)
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4a27      	ldr	r2, [pc, #156]	; (80039a0 <xTaskResumeAll+0x128>)
 8003902:	441a      	add	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3304      	adds	r3, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f7fe ff3d 	bl	800278a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <xTaskResumeAll+0x12c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <xTaskResumeAll+0x130>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <xTaskResumeAll+0x120>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1cb      	bne.n	80038c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003932:	f000 fb55 	bl	8003fe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <xTaskResumeAll+0x134>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003942:	f000 f847 	bl	80039d4 <xTaskIncrementTick>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <xTaskResumeAll+0x130>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3b01      	subs	r3, #1
 8003956:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f1      	bne.n	8003942 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <xTaskResumeAll+0x134>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <xTaskResumeAll+0x130>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800396c:	2301      	movs	r3, #1
 800396e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <xTaskResumeAll+0x138>)
 8003972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003980:	f001 f8d8 	bl	8004b34 <vPortExitCritical>

	return xAlreadyYielded;
 8003984:	68bb      	ldr	r3, [r7, #8]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000e08 	.word	0x20000e08
 8003994:	20000de0 	.word	0x20000de0
 8003998:	20000da0 	.word	0x20000da0
 800399c:	20000de8 	.word	0x20000de8
 80039a0:	20000910 	.word	0x20000910
 80039a4:	2000090c 	.word	0x2000090c
 80039a8:	20000df4 	.word	0x20000df4
 80039ac:	20000df0 	.word	0x20000df0
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <xTaskGetTickCount+0x1c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000de4 	.word	0x20000de4

080039d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039de:	4b4f      	ldr	r3, [pc, #316]	; (8003b1c <xTaskIncrementTick+0x148>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 808f 	bne.w	8003b06 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039e8:	4b4d      	ldr	r3, [pc, #308]	; (8003b20 <xTaskIncrementTick+0x14c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039f0:	4a4b      	ldr	r2, [pc, #300]	; (8003b20 <xTaskIncrementTick+0x14c>)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d120      	bne.n	8003a3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039fc:	4b49      	ldr	r3, [pc, #292]	; (8003b24 <xTaskIncrementTick+0x150>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <xTaskIncrementTick+0x48>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	603b      	str	r3, [r7, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <xTaskIncrementTick+0x46>
 8003a1c:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <xTaskIncrementTick+0x150>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b41      	ldr	r3, [pc, #260]	; (8003b28 <xTaskIncrementTick+0x154>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a3f      	ldr	r2, [pc, #252]	; (8003b24 <xTaskIncrementTick+0x150>)
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4a3f      	ldr	r2, [pc, #252]	; (8003b28 <xTaskIncrementTick+0x154>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <xTaskIncrementTick+0x158>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	4a3d      	ldr	r2, [pc, #244]	; (8003b2c <xTaskIncrementTick+0x158>)
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	f000 fad1 	bl	8003fe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a3e:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <xTaskIncrementTick+0x15c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d349      	bcc.n	8003adc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a48:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <xTaskIncrementTick+0x150>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <xTaskIncrementTick+0x15c>)
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	601a      	str	r2, [r3, #0]
					break;
 8003a5a:	e03f      	b.n	8003adc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5c:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <xTaskIncrementTick+0x150>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d203      	bcs.n	8003a7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a74:	4a2e      	ldr	r2, [pc, #184]	; (8003b30 <xTaskIncrementTick+0x15c>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a7a:	e02f      	b.n	8003adc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fedf 	bl	8002844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3318      	adds	r3, #24
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fed6 	bl	8002844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <xTaskIncrementTick+0x160>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d903      	bls.n	8003aac <xTaskIncrementTick+0xd8>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <xTaskIncrementTick+0x160>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <xTaskIncrementTick+0x164>)
 8003aba:	441a      	add	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7fe fe61 	bl	800278a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <xTaskIncrementTick+0x168>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3b8      	bcc.n	8003a48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ada:	e7b5      	b.n	8003a48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003adc:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <xTaskIncrementTick+0x168>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	4915      	ldr	r1, [pc, #84]	; (8003b38 <xTaskIncrementTick+0x164>)
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d901      	bls.n	8003af8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <xTaskIncrementTick+0x16c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e004      	b.n	8003b10 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <xTaskIncrementTick+0x170>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <xTaskIncrementTick+0x170>)
 8003b0e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b10:	697b      	ldr	r3, [r7, #20]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000e08 	.word	0x20000e08
 8003b20:	20000de4 	.word	0x20000de4
 8003b24:	20000d98 	.word	0x20000d98
 8003b28:	20000d9c 	.word	0x20000d9c
 8003b2c:	20000df8 	.word	0x20000df8
 8003b30:	20000e00 	.word	0x20000e00
 8003b34:	20000de8 	.word	0x20000de8
 8003b38:	20000910 	.word	0x20000910
 8003b3c:	2000090c 	.word	0x2000090c
 8003b40:	20000df4 	.word	0x20000df4
 8003b44:	20000df0 	.word	0x20000df0

08003b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b4e:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <vTaskSwitchContext+0xa8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b56:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <vTaskSwitchContext+0xac>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b5c:	e041      	b.n	8003be2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003b5e:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <vTaskSwitchContext+0xac>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b64:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <vTaskSwitchContext+0xb0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e010      	b.n	8003b8e <vTaskSwitchContext+0x46>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <vTaskSwitchContext+0x40>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	607b      	str	r3, [r7, #4]
}
 8003b84:	bf00      	nop
 8003b86:	e7fe      	b.n	8003b86 <vTaskSwitchContext+0x3e>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	491b      	ldr	r1, [pc, #108]	; (8003bfc <vTaskSwitchContext+0xb4>)
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0e4      	beq.n	8003b6c <vTaskSwitchContext+0x24>
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <vTaskSwitchContext+0xb4>)
 8003bae:	4413      	add	r3, r2
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d104      	bne.n	8003bd2 <vTaskSwitchContext+0x8a>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <vTaskSwitchContext+0xb8>)
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4a06      	ldr	r2, [pc, #24]	; (8003bf8 <vTaskSwitchContext+0xb0>)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6013      	str	r3, [r2, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000e08 	.word	0x20000e08
 8003bf4:	20000df4 	.word	0x20000df4
 8003bf8:	20000de8 	.word	0x20000de8
 8003bfc:	20000910 	.word	0x20000910
 8003c00:	2000090c 	.word	0x2000090c

08003c04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60fb      	str	r3, [r7, #12]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <vTaskPlaceOnEventList+0x44>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3318      	adds	r3, #24
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fe fdcd 	bl	80027d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c38:	2101      	movs	r1, #1
 8003c3a:	6838      	ldr	r0, [r7, #0]
 8003c3c:	f000 fa7c 	bl	8004138 <prvAddCurrentTaskToDelayedList>
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	2000090c 	.word	0x2000090c

08003c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	617b      	str	r3, [r7, #20]
}
 8003c70:	bf00      	nop
 8003c72:	e7fe      	b.n	8003c72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3318      	adds	r3, #24
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7fe fd84 	bl	800278a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	68b8      	ldr	r0, [r7, #8]
 8003c92:	f000 fa51 	bl	8004138 <prvAddCurrentTaskToDelayedList>
	}
 8003c96:	bf00      	nop
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	2000090c 	.word	0x2000090c

08003ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60fb      	str	r3, [r7, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe fdb5 	bl	8002844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <xTaskRemoveFromEventList+0xb0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d11d      	bne.n	8003d1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fdac 	bl	8002844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <xTaskRemoveFromEventList+0xb4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d903      	bls.n	8003d00 <xTaskRemoveFromEventList+0x5c>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <xTaskRemoveFromEventList+0xb4>)
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <xTaskRemoveFromEventList+0xb8>)
 8003d0e:	441a      	add	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f7fe fd37 	bl	800278a <vListInsertEnd>
 8003d1c:	e005      	b.n	8003d2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	3318      	adds	r3, #24
 8003d22:	4619      	mov	r1, r3
 8003d24:	480e      	ldr	r0, [pc, #56]	; (8003d60 <xTaskRemoveFromEventList+0xbc>)
 8003d26:	f7fe fd30 	bl	800278a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <xTaskRemoveFromEventList+0xc0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d905      	bls.n	8003d44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <xTaskRemoveFromEventList+0xc4>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e001      	b.n	8003d48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d48:	697b      	ldr	r3, [r7, #20]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000e08 	.word	0x20000e08
 8003d58:	20000de8 	.word	0x20000de8
 8003d5c:	20000910 	.word	0x20000910
 8003d60:	20000da0 	.word	0x20000da0
 8003d64:	2000090c 	.word	0x2000090c
 8003d68:	20000df4 	.word	0x20000df4

08003d6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <vTaskInternalSetTimeOutState+0x24>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <vTaskInternalSetTimeOutState+0x28>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	605a      	str	r2, [r3, #4]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	20000df8 	.word	0x20000df8
 8003d94:	20000de4 	.word	0x20000de4

08003d98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	613b      	str	r3, [r7, #16]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	60fb      	str	r3, [r7, #12]
}
 8003dd6:	bf00      	nop
 8003dd8:	e7fe      	b.n	8003dd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dda:	f000 fe7b 	bl	8004ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <xTaskCheckForTimeOut+0xbc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d102      	bne.n	8003dfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e023      	b.n	8003e46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <xTaskCheckForTimeOut+0xc0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d007      	beq.n	8003e1a <xTaskCheckForTimeOut+0x82>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	e015      	b.n	8003e46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d20b      	bcs.n	8003e3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad2      	subs	r2, r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff9b 	bl	8003d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	e004      	b.n	8003e46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e46:	f000 fe75 	bl	8004b34 <vPortExitCritical>

	return xReturn;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000de4 	.word	0x20000de4
 8003e58:	20000df8 	.word	0x20000df8

08003e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <vTaskMissedYield+0x14>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	20000df4 	.word	0x20000df4

08003e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e7c:	f000 f852 	bl	8003f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <prvIdleTask+0x28>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d9f9      	bls.n	8003e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <prvIdleTask+0x2c>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e98:	e7f0      	b.n	8003e7c <prvIdleTask+0x8>
 8003e9a:	bf00      	nop
 8003e9c:	20000910 	.word	0x20000910
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	e00c      	b.n	8003eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <prvInitialiseTaskLists+0x60>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fc36 	bl	8002730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b37      	cmp	r3, #55	; 0x37
 8003ece:	d9ef      	bls.n	8003eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ed0:	480d      	ldr	r0, [pc, #52]	; (8003f08 <prvInitialiseTaskLists+0x64>)
 8003ed2:	f7fe fc2d 	bl	8002730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ed6:	480d      	ldr	r0, [pc, #52]	; (8003f0c <prvInitialiseTaskLists+0x68>)
 8003ed8:	f7fe fc2a 	bl	8002730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003edc:	480c      	ldr	r0, [pc, #48]	; (8003f10 <prvInitialiseTaskLists+0x6c>)
 8003ede:	f7fe fc27 	bl	8002730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ee2:	480c      	ldr	r0, [pc, #48]	; (8003f14 <prvInitialiseTaskLists+0x70>)
 8003ee4:	f7fe fc24 	bl	8002730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ee8:	480b      	ldr	r0, [pc, #44]	; (8003f18 <prvInitialiseTaskLists+0x74>)
 8003eea:	f7fe fc21 	bl	8002730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <prvInitialiseTaskLists+0x78>)
 8003ef0:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <prvInitialiseTaskLists+0x64>)
 8003ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <prvInitialiseTaskLists+0x7c>)
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <prvInitialiseTaskLists+0x68>)
 8003ef8:	601a      	str	r2, [r3, #0]
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000910 	.word	0x20000910
 8003f08:	20000d70 	.word	0x20000d70
 8003f0c:	20000d84 	.word	0x20000d84
 8003f10:	20000da0 	.word	0x20000da0
 8003f14:	20000db4 	.word	0x20000db4
 8003f18:	20000dcc 	.word	0x20000dcc
 8003f1c:	20000d98 	.word	0x20000d98
 8003f20:	20000d9c 	.word	0x20000d9c

08003f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f2a:	e019      	b.n	8003f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f2c:	f000 fdd2 	bl	8004ad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <prvCheckTasksWaitingTermination+0x50>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe fc81 	bl	8002844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <prvCheckTasksWaitingTermination+0x54>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <prvCheckTasksWaitingTermination+0x54>)
 8003f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <prvCheckTasksWaitingTermination+0x58>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <prvCheckTasksWaitingTermination+0x58>)
 8003f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f56:	f000 fded 	bl	8004b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f810 	bl	8003f80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <prvCheckTasksWaitingTermination+0x58>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e1      	bne.n	8003f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000db4 	.word	0x20000db4
 8003f78:	20000de0 	.word	0x20000de0
 8003f7c:	20000dc8 	.word	0x20000dc8

08003f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d108      	bne.n	8003fa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 ff8a 	bl	8004eb0 <vPortFree>
				vPortFree( pxTCB );
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 ff87 	bl	8004eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fa2:	e018      	b.n	8003fd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d103      	bne.n	8003fb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 ff7e 	bl	8004eb0 <vPortFree>
	}
 8003fb4:	e00f      	b.n	8003fd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d00a      	beq.n	8003fd6 <prvDeleteTCB+0x56>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	60fb      	str	r3, [r7, #12]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <prvDeleteTCB+0x54>
	}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <prvResetNextTaskUnblockTime+0x38>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <prvResetNextTaskUnblockTime+0x3c>)
 8003ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ff8:	e008      	b.n	800400c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <prvResetNextTaskUnblockTime+0x38>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <prvResetNextTaskUnblockTime+0x3c>)
 800400a:	6013      	str	r3, [r2, #0]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	20000d98 	.word	0x20000d98
 800401c:	20000e00 	.word	0x20000e00

08004020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <xTaskGetSchedulerState+0x34>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800402e:	2301      	movs	r3, #1
 8004030:	607b      	str	r3, [r7, #4]
 8004032:	e008      	b.n	8004046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004034:	4b08      	ldr	r3, [pc, #32]	; (8004058 <xTaskGetSchedulerState+0x38>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800403c:	2302      	movs	r3, #2
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	e001      	b.n	8004046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004046:	687b      	ldr	r3, [r7, #4]
	}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	20000dec 	.word	0x20000dec
 8004058:	20000e08 	.word	0x20000e08

0800405c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d056      	beq.n	8004120 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004072:	4b2e      	ldr	r3, [pc, #184]	; (800412c <xTaskPriorityDisinherit+0xd0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	429a      	cmp	r2, r3
 800407a:	d00a      	beq.n	8004092 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	60fb      	str	r3, [r7, #12]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60bb      	str	r3, [r7, #8]
}
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	1e5a      	subs	r2, r3, #1
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d02c      	beq.n	8004120 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d128      	bne.n	8004120 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe fbb6 	bl	8002844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <xTaskPriorityDisinherit+0xd4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d903      	bls.n	8004100 <xTaskPriorityDisinherit+0xa4>
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <xTaskPriorityDisinherit+0xd4>)
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4a09      	ldr	r2, [pc, #36]	; (8004134 <xTaskPriorityDisinherit+0xd8>)
 800410e:	441a      	add	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fe fb37 	bl	800278a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004120:	697b      	ldr	r3, [r7, #20]
	}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	2000090c 	.word	0x2000090c
 8004130:	20000de8 	.word	0x20000de8
 8004134:	20000910 	.word	0x20000910

08004138 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004142:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004148:	4b20      	ldr	r3, [pc, #128]	; (80041cc <prvAddCurrentTaskToDelayedList+0x94>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fb78 	bl	8002844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d10a      	bne.n	8004172 <prvAddCurrentTaskToDelayedList+0x3a>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4819      	ldr	r0, [pc, #100]	; (80041d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800416c:	f7fe fb0d 	bl	800278a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004170:	e026      	b.n	80041c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <prvAddCurrentTaskToDelayedList+0x94>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	429a      	cmp	r2, r3
 8004188:	d209      	bcs.n	800419e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3304      	adds	r3, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f7fe fb1b 	bl	80027d2 <vListInsert>
}
 800419c:	e010      	b.n	80041c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <prvAddCurrentTaskToDelayedList+0x94>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f7fe fb11 	bl	80027d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d202      	bcs.n	80041c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80041ba:	4a08      	ldr	r2, [pc, #32]	; (80041dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	6013      	str	r3, [r2, #0]
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000de4 	.word	0x20000de4
 80041cc:	2000090c 	.word	0x2000090c
 80041d0:	20000dcc 	.word	0x20000dcc
 80041d4:	20000d9c 	.word	0x20000d9c
 80041d8:	20000d98 	.word	0x20000d98
 80041dc:	20000e00 	.word	0x20000e00

080041e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041ea:	f000 fb07 	bl	80047fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041ee:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <xTimerCreateTimerTask+0x80>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d021      	beq.n	800423a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041fe:	1d3a      	adds	r2, r7, #4
 8004200:	f107 0108 	add.w	r1, r7, #8
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe fa77 	bl	80026fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	9202      	str	r2, [sp, #8]
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	2302      	movs	r3, #2
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2300      	movs	r3, #0
 800421e:	460a      	mov	r2, r1
 8004220:	4910      	ldr	r1, [pc, #64]	; (8004264 <xTimerCreateTimerTask+0x84>)
 8004222:	4811      	ldr	r0, [pc, #68]	; (8004268 <xTimerCreateTimerTask+0x88>)
 8004224:	f7ff f8de 	bl	80033e4 <xTaskCreateStatic>
 8004228:	4603      	mov	r3, r0
 800422a:	4a10      	ldr	r2, [pc, #64]	; (800426c <xTimerCreateTimerTask+0x8c>)
 800422c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <xTimerCreateTimerTask+0x8c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	613b      	str	r3, [r7, #16]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004256:	697b      	ldr	r3, [r7, #20]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000e3c 	.word	0x20000e3c
 8004264:	08007f70 	.word	0x08007f70
 8004268:	080043a5 	.word	0x080043a5
 800426c:	20000e40 	.word	0x20000e40

08004270 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	623b      	str	r3, [r7, #32]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800429e:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <xTimerGenericCommand+0x98>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d02a      	beq.n	80042fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	dc18      	bgt.n	80042ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042b8:	f7ff feb2 	bl	8004020 <xTaskGetSchedulerState>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d109      	bne.n	80042d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <xTimerGenericCommand+0x98>)
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	f107 0110 	add.w	r1, r7, #16
 80042ca:	2300      	movs	r3, #0
 80042cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ce:	f7fe fc21 	bl	8002b14 <xQueueGenericSend>
 80042d2:	6278      	str	r0, [r7, #36]	; 0x24
 80042d4:	e012      	b.n	80042fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <xTimerGenericCommand+0x98>)
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	f107 0110 	add.w	r1, r7, #16
 80042de:	2300      	movs	r3, #0
 80042e0:	2200      	movs	r2, #0
 80042e2:	f7fe fc17 	bl	8002b14 <xQueueGenericSend>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24
 80042e8:	e008      	b.n	80042fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <xTimerGenericCommand+0x98>)
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	f107 0110 	add.w	r1, r7, #16
 80042f2:	2300      	movs	r3, #0
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	f7fe fd0b 	bl	8002d10 <xQueueGenericSendFromISR>
 80042fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3728      	adds	r7, #40	; 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000e3c 	.word	0x20000e3c

0800430c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <prvProcessExpiredTimer+0x94>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3304      	adds	r3, #4
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe fa8d 	bl	8002844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d022      	beq.n	800437e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	699a      	ldr	r2, [r3, #24]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	18d1      	adds	r1, r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	6978      	ldr	r0, [r7, #20]
 8004346:	f000 f8d1 	bl	80044ec <prvInsertTimerInActiveList>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01f      	beq.n	8004390 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004350:	2300      	movs	r3, #0
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	2100      	movs	r1, #0
 800435a:	6978      	ldr	r0, [r7, #20]
 800435c:	f7ff ff88 	bl	8004270 <xTimerGenericCommand>
 8004360:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d113      	bne.n	8004390 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	60fb      	str	r3, [r7, #12]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	b2da      	uxtb	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	6978      	ldr	r0, [r7, #20]
 8004396:	4798      	blx	r3
}
 8004398:	bf00      	nop
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000e34 	.word	0x20000e34

080043a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f857 	bl	8004464 <prvGetNextExpireTime>
 80043b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4619      	mov	r1, r3
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f803 	bl	80043c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80043c2:	f000 f8d5 	bl	8004570 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043c6:	e7f1      	b.n	80043ac <prvTimerTask+0x8>

080043c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043d2:	f7ff fa43 	bl	800385c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f866 	bl	80044ac <prvSampleTimeNow>
 80043e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d130      	bne.n	800444a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <prvProcessTimerOrBlockTask+0x3c>
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d806      	bhi.n	8004404 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043f6:	f7ff fa3f 	bl	8003878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ff85 	bl	800430c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004402:	e024      	b.n	800444e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <prvProcessTimerOrBlockTask+0x90>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <prvProcessTimerOrBlockTask+0x50>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <prvProcessTimerOrBlockTask+0x52>
 8004418:	2300      	movs	r3, #0
 800441a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <prvProcessTimerOrBlockTask+0x94>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	f7fe ffa7 	bl	800337c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800442e:	f7ff fa23 	bl	8003878 <xTaskResumeAll>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <prvProcessTimerOrBlockTask+0x98>)
 800443a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	f3bf 8f6f 	isb	sy
}
 8004448:	e001      	b.n	800444e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800444a:	f7ff fa15 	bl	8003878 <xTaskResumeAll>
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000e38 	.word	0x20000e38
 800445c:	20000e3c 	.word	0x20000e3c
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800446c:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <prvGetNextExpireTime+0x44>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <prvGetNextExpireTime+0x16>
 8004476:	2201      	movs	r2, #1
 8004478:	e000      	b.n	800447c <prvGetNextExpireTime+0x18>
 800447a:	2200      	movs	r2, #0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004488:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <prvGetNextExpireTime+0x44>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e001      	b.n	8004498 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004498:	68fb      	ldr	r3, [r7, #12]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000e34 	.word	0x20000e34

080044ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80044b4:	f7ff fa7e 	bl	80039b4 <xTaskGetTickCount>
 80044b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <prvSampleTimeNow+0x3c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d205      	bcs.n	80044d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80044c4:	f000 f936 	bl	8004734 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	e002      	b.n	80044d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044d6:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <prvSampleTimeNow+0x3c>)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044dc:	68fb      	ldr	r3, [r7, #12]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000e44 	.word	0x20000e44

080044ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	429a      	cmp	r2, r3
 8004510:	d812      	bhi.n	8004538 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	1ad2      	subs	r2, r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	429a      	cmp	r2, r3
 800451e:	d302      	bcc.n	8004526 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e01b      	b.n	800455e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <prvInsertTimerInActiveList+0x7c>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fe f94e 	bl	80027d2 <vListInsert>
 8004536:	e012      	b.n	800455e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d206      	bcs.n	800454e <prvInsertTimerInActiveList+0x62>
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	e007      	b.n	800455e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <prvInsertTimerInActiveList+0x80>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3304      	adds	r3, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f7fe f93a 	bl	80027d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800455e:	697b      	ldr	r3, [r7, #20]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000e38 	.word	0x20000e38
 800456c:	20000e34 	.word	0x20000e34

08004570 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08e      	sub	sp, #56	; 0x38
 8004574:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004576:	e0ca      	b.n	800470e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	da18      	bge.n	80045b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800457e:	1d3b      	adds	r3, r7, #4
 8004580:	3304      	adds	r3, #4
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	61fb      	str	r3, [r7, #28]
}
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a6:	6850      	ldr	r0, [r2, #4]
 80045a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045aa:	6892      	ldr	r2, [r2, #8]
 80045ac:	4611      	mov	r1, r2
 80045ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f2c0 80aa 	blt.w	800470c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	3304      	adds	r3, #4
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe f93b 	bl	8002844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ce:	463b      	mov	r3, r7
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ff6b 	bl	80044ac <prvSampleTimeNow>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b09      	cmp	r3, #9
 80045dc:	f200 8097 	bhi.w	800470e <prvProcessReceivedCommands+0x19e>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <prvProcessReceivedCommands+0x78>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	08004611 	.word	0x08004611
 80045ec:	08004611 	.word	0x08004611
 80045f0:	08004611 	.word	0x08004611
 80045f4:	08004685 	.word	0x08004685
 80045f8:	08004699 	.word	0x08004699
 80045fc:	080046e3 	.word	0x080046e3
 8004600:	08004611 	.word	0x08004611
 8004604:	08004611 	.word	0x08004611
 8004608:	08004685 	.word	0x08004685
 800460c:	08004699 	.word	0x08004699
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	18d1      	adds	r1, r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004630:	f7ff ff5c 	bl	80044ec <prvInsertTimerInActiveList>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d069      	beq.n	800470e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004640:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d05e      	beq.n	800470e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	441a      	add	r2, r3
 8004658:	2300      	movs	r3, #0
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2300      	movs	r3, #0
 800465e:	2100      	movs	r1, #0
 8004660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004662:	f7ff fe05 	bl	8004270 <xTimerGenericCommand>
 8004666:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d14f      	bne.n	800470e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	61bb      	str	r3, [r7, #24]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004696:	e03a      	b.n	800470e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	617b      	str	r3, [r7, #20]
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	18d1      	adds	r1, r2, r3
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046dc:	f7ff ff06 	bl	80044ec <prvInsertTimerInActiveList>
					break;
 80046e0:	e015      	b.n	800470e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80046f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f2:	f000 fbdd 	bl	8004eb0 <vPortFree>
 80046f6:	e00a      	b.n	800470e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	b2da      	uxtb	r2, r3
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800470a:	e000      	b.n	800470e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800470c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800470e:	4b08      	ldr	r3, [pc, #32]	; (8004730 <prvProcessReceivedCommands+0x1c0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	1d39      	adds	r1, r7, #4
 8004714:	2200      	movs	r2, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fb96 	bl	8002e48 <xQueueReceive>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	f47f af2a 	bne.w	8004578 <prvProcessReceivedCommands+0x8>
	}
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	3730      	adds	r7, #48	; 0x30
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000e3c 	.word	0x20000e3c

08004734 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800473a:	e048      	b.n	80047ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800473c:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004746:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3304      	adds	r3, #4
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe f875 	bl	8002844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02e      	beq.n	80047ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	429a      	cmp	r2, r3
 8004780:	d90e      	bls.n	80047a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800478e:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fe f81a 	bl	80027d2 <vListInsert>
 800479e:	e016      	b.n	80047ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047a0:	2300      	movs	r3, #0
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	2100      	movs	r1, #0
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff fd60 	bl	8004270 <xTimerGenericCommand>
 80047b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	603b      	str	r3, [r7, #0]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1b1      	bne.n	800473c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <prvSwitchTimerLists+0xc4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 80047e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80047e6:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <prvSwitchTimerLists+0xc4>)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	6013      	str	r3, [r2, #0]
}
 80047ec:	bf00      	nop
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000e34 	.word	0x20000e34
 80047f8:	20000e38 	.word	0x20000e38

080047fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004802:	f000 f967 	bl	8004ad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <prvCheckForValidListAndQueue+0x60>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d120      	bne.n	8004850 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800480e:	4814      	ldr	r0, [pc, #80]	; (8004860 <prvCheckForValidListAndQueue+0x64>)
 8004810:	f7fd ff8e 	bl	8002730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004814:	4813      	ldr	r0, [pc, #76]	; (8004864 <prvCheckForValidListAndQueue+0x68>)
 8004816:	f7fd ff8b 	bl	8002730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <prvCheckForValidListAndQueue+0x6c>)
 800481c:	4a10      	ldr	r2, [pc, #64]	; (8004860 <prvCheckForValidListAndQueue+0x64>)
 800481e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <prvCheckForValidListAndQueue+0x70>)
 8004822:	4a10      	ldr	r2, [pc, #64]	; (8004864 <prvCheckForValidListAndQueue+0x68>)
 8004824:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004826:	2300      	movs	r3, #0
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <prvCheckForValidListAndQueue+0x74>)
 800482c:	4a11      	ldr	r2, [pc, #68]	; (8004874 <prvCheckForValidListAndQueue+0x78>)
 800482e:	2110      	movs	r1, #16
 8004830:	200a      	movs	r0, #10
 8004832:	f7fe f899 	bl	8002968 <xQueueGenericCreateStatic>
 8004836:	4603      	mov	r3, r0
 8004838:	4a08      	ldr	r2, [pc, #32]	; (800485c <prvCheckForValidListAndQueue+0x60>)
 800483a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800483c:	4b07      	ldr	r3, [pc, #28]	; (800485c <prvCheckForValidListAndQueue+0x60>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <prvCheckForValidListAndQueue+0x60>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	490b      	ldr	r1, [pc, #44]	; (8004878 <prvCheckForValidListAndQueue+0x7c>)
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe fd6c 	bl	8003328 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004850:	f000 f970 	bl	8004b34 <vPortExitCritical>
}
 8004854:	bf00      	nop
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000e3c 	.word	0x20000e3c
 8004860:	20000e0c 	.word	0x20000e0c
 8004864:	20000e20 	.word	0x20000e20
 8004868:	20000e34 	.word	0x20000e34
 800486c:	20000e38 	.word	0x20000e38
 8004870:	20000ee8 	.word	0x20000ee8
 8004874:	20000e48 	.word	0x20000e48
 8004878:	08007f78 	.word	0x08007f78

0800487c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3b04      	subs	r3, #4
 800488c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3b04      	subs	r3, #4
 800489a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b04      	subs	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048ac:	4a0c      	ldr	r2, [pc, #48]	; (80048e0 <pxPortInitialiseStack+0x64>)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3b14      	subs	r3, #20
 80048b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3b04      	subs	r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f06f 0202 	mvn.w	r2, #2
 80048ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3b20      	subs	r3, #32
 80048d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048d2:	68fb      	ldr	r3, [r7, #12]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	080048e5 	.word	0x080048e5

080048e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048ee:	4b12      	ldr	r3, [pc, #72]	; (8004938 <prvTaskExitError+0x54>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d00a      	beq.n	800490e <prvTaskExitError+0x2a>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	60fb      	str	r3, [r7, #12]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <prvTaskExitError+0x28>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	60bb      	str	r3, [r7, #8]
}
 8004920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004922:	bf00      	nop
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0fc      	beq.n	8004924 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	2000000c 	.word	0x2000000c
 800493c:	00000000 	.word	0x00000000

08004940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <pxCurrentTCBConst2>)
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	6808      	ldr	r0, [r1, #0]
 8004946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494a:	f380 8809 	msr	PSP, r0
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f04f 0000 	mov.w	r0, #0
 8004956:	f380 8811 	msr	BASEPRI, r0
 800495a:	4770      	bx	lr
 800495c:	f3af 8000 	nop.w

08004960 <pxCurrentTCBConst2>:
 8004960:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004968:	4808      	ldr	r0, [pc, #32]	; (800498c <prvPortStartFirstTask+0x24>)
 800496a:	6800      	ldr	r0, [r0, #0]
 800496c:	6800      	ldr	r0, [r0, #0]
 800496e:	f380 8808 	msr	MSP, r0
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8814 	msr	CONTROL, r0
 800497a:	b662      	cpsie	i
 800497c:	b661      	cpsie	f
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	df00      	svc	0
 8004988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800498a:	bf00      	nop
 800498c:	e000ed08 	.word	0xe000ed08

08004990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004996:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <xPortStartScheduler+0x120>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a46      	ldr	r2, [pc, #280]	; (8004ab4 <xPortStartScheduler+0x124>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10a      	bne.n	80049b6 <xPortStartScheduler+0x26>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	613b      	str	r3, [r7, #16]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049b6:	4b3e      	ldr	r3, [pc, #248]	; (8004ab0 <xPortStartScheduler+0x120>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a3f      	ldr	r2, [pc, #252]	; (8004ab8 <xPortStartScheduler+0x128>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10a      	bne.n	80049d6 <xPortStartScheduler+0x46>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	60fb      	str	r3, [r7, #12]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049d6:	4b39      	ldr	r3, [pc, #228]	; (8004abc <xPortStartScheduler+0x12c>)
 80049d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	22ff      	movs	r2, #255	; 0xff
 80049e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <xPortStartScheduler+0x130>)
 80049fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049fe:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <xPortStartScheduler+0x134>)
 8004a00:	2207      	movs	r2, #7
 8004a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a04:	e009      	b.n	8004a1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a06:	4b2f      	ldr	r3, [pc, #188]	; (8004ac4 <xPortStartScheduler+0x134>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <xPortStartScheduler+0x134>)
 8004a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a22:	2b80      	cmp	r3, #128	; 0x80
 8004a24:	d0ef      	beq.n	8004a06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a26:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <xPortStartScheduler+0x134>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1c3 0307 	rsb	r3, r3, #7
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d00a      	beq.n	8004a48 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	60bb      	str	r3, [r7, #8]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a48:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <xPortStartScheduler+0x134>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <xPortStartScheduler+0x134>)
 8004a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <xPortStartScheduler+0x134>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <xPortStartScheduler+0x134>)
 8004a5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a66:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <xPortStartScheduler+0x138>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <xPortStartScheduler+0x138>)
 8004a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <xPortStartScheduler+0x138>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a14      	ldr	r2, [pc, #80]	; (8004ac8 <xPortStartScheduler+0x138>)
 8004a78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a7e:	f000 f8dd 	bl	8004c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a82:	4b12      	ldr	r3, [pc, #72]	; (8004acc <xPortStartScheduler+0x13c>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a88:	f000 f8fc 	bl	8004c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a8c:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <xPortStartScheduler+0x140>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0f      	ldr	r2, [pc, #60]	; (8004ad0 <xPortStartScheduler+0x140>)
 8004a92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a98:	f7ff ff66 	bl	8004968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a9c:	f7ff f854 	bl	8003b48 <vTaskSwitchContext>
	prvTaskExitError();
 8004aa0:	f7ff ff20 	bl	80048e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	e000ed00 	.word	0xe000ed00
 8004ab4:	410fc271 	.word	0x410fc271
 8004ab8:	410fc270 	.word	0x410fc270
 8004abc:	e000e400 	.word	0xe000e400
 8004ac0:	20000f38 	.word	0x20000f38
 8004ac4:	20000f3c 	.word	0x20000f3c
 8004ac8:	e000ed20 	.word	0xe000ed20
 8004acc:	2000000c 	.word	0x2000000c
 8004ad0:	e000ef34 	.word	0xe000ef34

08004ad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	607b      	str	r3, [r7, #4]
}
 8004aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004aee:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <vPortEnterCritical+0x58>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3301      	adds	r3, #1
 8004af4:	4a0d      	ldr	r2, [pc, #52]	; (8004b2c <vPortEnterCritical+0x58>)
 8004af6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <vPortEnterCritical+0x58>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10f      	bne.n	8004b20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <vPortEnterCritical+0x5c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	603b      	str	r3, [r7, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <vPortEnterCritical+0x4a>
	}
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <vPortExitCritical+0x50>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <vPortExitCritical+0x24>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	607b      	str	r3, [r7, #4]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <vPortExitCritical+0x50>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <vPortExitCritical+0x50>)
 8004b60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <vPortExitCritical+0x50>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <vPortExitCritical+0x42>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	f383 8811 	msr	BASEPRI, r3
}
 8004b74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000000c 	.word	0x2000000c
	...

08004b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b90:	f3ef 8009 	mrs	r0, PSP
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <pxCurrentTCBConst>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f01e 0f10 	tst.w	lr, #16
 8004ba0:	bf08      	it	eq
 8004ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	6010      	str	r0, [r2, #0]
 8004bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bb4:	f380 8811 	msr	BASEPRI, r0
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f7fe ffc2 	bl	8003b48 <vTaskSwitchContext>
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f380 8811 	msr	BASEPRI, r0
 8004bcc:	bc09      	pop	{r0, r3}
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	6808      	ldr	r0, [r1, #0]
 8004bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd6:	f01e 0f10 	tst.w	lr, #16
 8004bda:	bf08      	it	eq
 8004bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004be0:	f380 8809 	msr	PSP, r0
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	f3af 8000 	nop.w

08004bf0 <pxCurrentTCBConst>:
 8004bf0:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	607b      	str	r3, [r7, #4]
}
 8004c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c12:	f7fe fedf 	bl	80039d4 <xTaskIncrementTick>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <xPortSysTickHandler+0x40>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	2300      	movs	r3, #0
 8004c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f383 8811 	msr	BASEPRI, r3
}
 8004c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortSetupTimerInterrupt+0x34>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <vPortSetupTimerInterrupt+0x38>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <vPortSetupTimerInterrupt+0x3c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <vPortSetupTimerInterrupt+0x40>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <vPortSetupTimerInterrupt+0x44>)
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c5e:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <vPortSetupTimerInterrupt+0x34>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000e010 	.word	0xe000e010
 8004c74:	e000e018 	.word	0xe000e018
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	10624dd3 	.word	0x10624dd3
 8004c80:	e000e014 	.word	0xe000e014

08004c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c94 <vPortEnableVFP+0x10>
 8004c88:	6801      	ldr	r1, [r0, #0]
 8004c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c8e:	6001      	str	r1, [r0, #0]
 8004c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c92:	bf00      	nop
 8004c94:	e000ed88 	.word	0xe000ed88

08004c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c9e:	f3ef 8305 	mrs	r3, IPSR
 8004ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b0f      	cmp	r3, #15
 8004ca8:	d914      	bls.n	8004cd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004caa:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <vPortValidateInterruptPriority+0x70>)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <vPortValidateInterruptPriority+0x74>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	7afa      	ldrb	r2, [r7, #11]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d20a      	bcs.n	8004cd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	607b      	str	r3, [r7, #4]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <vPortValidateInterruptPriority+0x78>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cdc:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <vPortValidateInterruptPriority+0x7c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d90a      	bls.n	8004cfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	603b      	str	r3, [r7, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <vPortValidateInterruptPriority+0x60>
	}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	e000e3f0 	.word	0xe000e3f0
 8004d0c:	20000f38 	.word	0x20000f38
 8004d10:	e000ed0c 	.word	0xe000ed0c
 8004d14:	20000f3c 	.word	0x20000f3c

08004d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d24:	f7fe fd9a 	bl	800385c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d28:	4b5b      	ldr	r3, [pc, #364]	; (8004e98 <pvPortMalloc+0x180>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d30:	f000 f920 	bl	8004f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d34:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <pvPortMalloc+0x184>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f040 8093 	bne.w	8004e68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01d      	beq.n	8004d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d48:	2208      	movs	r2, #8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d014      	beq.n	8004d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f023 0307 	bic.w	r3, r3, #7
 8004d60:	3308      	adds	r3, #8
 8004d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <pvPortMalloc+0x6c>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	617b      	str	r3, [r7, #20]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d06e      	beq.n	8004e68 <pvPortMalloc+0x150>
 8004d8a:	4b45      	ldr	r3, [pc, #276]	; (8004ea0 <pvPortMalloc+0x188>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d869      	bhi.n	8004e68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d94:	4b43      	ldr	r3, [pc, #268]	; (8004ea4 <pvPortMalloc+0x18c>)
 8004d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d98:	4b42      	ldr	r3, [pc, #264]	; (8004ea4 <pvPortMalloc+0x18c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d9e:	e004      	b.n	8004daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d903      	bls.n	8004dbc <pvPortMalloc+0xa4>
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f1      	bne.n	8004da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dbc:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <pvPortMalloc+0x180>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d050      	beq.n	8004e68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2208      	movs	r2, #8
 8004dcc:	4413      	add	r3, r2
 8004dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	2308      	movs	r3, #8
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d91f      	bls.n	8004e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <pvPortMalloc+0xf8>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	613b      	str	r3, [r7, #16]
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	1ad2      	subs	r2, r2, r3
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e22:	69b8      	ldr	r0, [r7, #24]
 8004e24:	f000 f908 	bl	8005038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e28:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <pvPortMalloc+0x188>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <pvPortMalloc+0x188>)
 8004e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <pvPortMalloc+0x188>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <pvPortMalloc+0x190>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d203      	bcs.n	8004e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e42:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <pvPortMalloc+0x188>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <pvPortMalloc+0x190>)
 8004e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <pvPortMalloc+0x184>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <pvPortMalloc+0x194>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3301      	adds	r3, #1
 8004e64:	4a11      	ldr	r2, [pc, #68]	; (8004eac <pvPortMalloc+0x194>)
 8004e66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e68:	f7fe fd06 	bl	8003878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <pvPortMalloc+0x174>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60fb      	str	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <pvPortMalloc+0x172>
	return pvReturn;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3728      	adds	r7, #40	; 0x28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20004b48 	.word	0x20004b48
 8004e9c:	20004b5c 	.word	0x20004b5c
 8004ea0:	20004b4c 	.word	0x20004b4c
 8004ea4:	20004b40 	.word	0x20004b40
 8004ea8:	20004b50 	.word	0x20004b50
 8004eac:	20004b54 	.word	0x20004b54

08004eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d04d      	beq.n	8004f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	425b      	negs	r3, r3
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <vPortFree+0xb8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <vPortFree+0x44>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	60fb      	str	r3, [r7, #12]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <vPortFree+0x62>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	60bb      	str	r3, [r7, #8]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <vPortFree+0xb8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01e      	beq.n	8004f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d11a      	bne.n	8004f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <vPortFree+0xb8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	43db      	mvns	r3, r3
 8004f32:	401a      	ands	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f38:	f7fe fc90 	bl	800385c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <vPortFree+0xbc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4413      	add	r3, r2
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <vPortFree+0xbc>)
 8004f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f4a:	6938      	ldr	r0, [r7, #16]
 8004f4c:	f000 f874 	bl	8005038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <vPortFree+0xc0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a06      	ldr	r2, [pc, #24]	; (8004f70 <vPortFree+0xc0>)
 8004f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f5a:	f7fe fc8d 	bl	8003878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f5e:	bf00      	nop
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20004b5c 	.word	0x20004b5c
 8004f6c:	20004b4c 	.word	0x20004b4c
 8004f70:	20004b58 	.word	0x20004b58

08004f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f80:	4b27      	ldr	r3, [pc, #156]	; (8005020 <prvHeapInit+0xac>)
 8004f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3307      	adds	r3, #7
 8004f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <prvHeapInit+0xac>)
 8004fa4:	4413      	add	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fac:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <prvHeapInit+0xb0>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <prvHeapInit+0xb0>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a15      	ldr	r2, [pc, #84]	; (8005028 <prvHeapInit+0xb4>)
 8004fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <prvHeapInit+0xb4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <prvHeapInit+0xb4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <prvHeapInit+0xb4>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4a0a      	ldr	r2, [pc, #40]	; (800502c <prvHeapInit+0xb8>)
 8005002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4a09      	ldr	r2, [pc, #36]	; (8005030 <prvHeapInit+0xbc>)
 800500a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <prvHeapInit+0xc0>)
 800500e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005012:	601a      	str	r2, [r3, #0]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	20000f40 	.word	0x20000f40
 8005024:	20004b40 	.word	0x20004b40
 8005028:	20004b48 	.word	0x20004b48
 800502c:	20004b50 	.word	0x20004b50
 8005030:	20004b4c 	.word	0x20004b4c
 8005034:	20004b5c 	.word	0x20004b5c

08005038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005040:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <prvInsertBlockIntoFreeList+0xac>)
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e002      	b.n	800504c <prvInsertBlockIntoFreeList+0x14>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d8f7      	bhi.n	8005046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	4413      	add	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d108      	bne.n	800507a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	441a      	add	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	441a      	add	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d118      	bne.n	80050c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b15      	ldr	r3, [pc, #84]	; (80050e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d00d      	beq.n	80050b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	441a      	add	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e008      	b.n	80050c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050b6:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <prvInsertBlockIntoFreeList+0xb0>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e003      	b.n	80050c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d002      	beq.n	80050d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20004b40 	.word	0x20004b40
 80050e8:	20004b48 	.word	0x20004b48

080050ec <__errno>:
 80050ec:	4b01      	ldr	r3, [pc, #4]	; (80050f4 <__errno+0x8>)
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000010 	.word	0x20000010

080050f8 <__libc_init_array>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	4d0d      	ldr	r5, [pc, #52]	; (8005130 <__libc_init_array+0x38>)
 80050fc:	4c0d      	ldr	r4, [pc, #52]	; (8005134 <__libc_init_array+0x3c>)
 80050fe:	1b64      	subs	r4, r4, r5
 8005100:	10a4      	asrs	r4, r4, #2
 8005102:	2600      	movs	r6, #0
 8005104:	42a6      	cmp	r6, r4
 8005106:	d109      	bne.n	800511c <__libc_init_array+0x24>
 8005108:	4d0b      	ldr	r5, [pc, #44]	; (8005138 <__libc_init_array+0x40>)
 800510a:	4c0c      	ldr	r4, [pc, #48]	; (800513c <__libc_init_array+0x44>)
 800510c:	f002 ff02 	bl	8007f14 <_init>
 8005110:	1b64      	subs	r4, r4, r5
 8005112:	10a4      	asrs	r4, r4, #2
 8005114:	2600      	movs	r6, #0
 8005116:	42a6      	cmp	r6, r4
 8005118:	d105      	bne.n	8005126 <__libc_init_array+0x2e>
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005120:	4798      	blx	r3
 8005122:	3601      	adds	r6, #1
 8005124:	e7ee      	b.n	8005104 <__libc_init_array+0xc>
 8005126:	f855 3b04 	ldr.w	r3, [r5], #4
 800512a:	4798      	blx	r3
 800512c:	3601      	adds	r6, #1
 800512e:	e7f2      	b.n	8005116 <__libc_init_array+0x1e>
 8005130:	080083d4 	.word	0x080083d4
 8005134:	080083d4 	.word	0x080083d4
 8005138:	080083d4 	.word	0x080083d4
 800513c:	080083d8 	.word	0x080083d8

08005140 <memcpy>:
 8005140:	440a      	add	r2, r1
 8005142:	4291      	cmp	r1, r2
 8005144:	f100 33ff 	add.w	r3, r0, #4294967295
 8005148:	d100      	bne.n	800514c <memcpy+0xc>
 800514a:	4770      	bx	lr
 800514c:	b510      	push	{r4, lr}
 800514e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005156:	4291      	cmp	r1, r2
 8005158:	d1f9      	bne.n	800514e <memcpy+0xe>
 800515a:	bd10      	pop	{r4, pc}

0800515c <memset>:
 800515c:	4402      	add	r2, r0
 800515e:	4603      	mov	r3, r0
 8005160:	4293      	cmp	r3, r2
 8005162:	d100      	bne.n	8005166 <memset+0xa>
 8005164:	4770      	bx	lr
 8005166:	f803 1b01 	strb.w	r1, [r3], #1
 800516a:	e7f9      	b.n	8005160 <memset+0x4>

0800516c <__cvt>:
 800516c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	ec55 4b10 	vmov	r4, r5, d0
 8005174:	2d00      	cmp	r5, #0
 8005176:	460e      	mov	r6, r1
 8005178:	4619      	mov	r1, r3
 800517a:	462b      	mov	r3, r5
 800517c:	bfbb      	ittet	lt
 800517e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005182:	461d      	movlt	r5, r3
 8005184:	2300      	movge	r3, #0
 8005186:	232d      	movlt	r3, #45	; 0x2d
 8005188:	700b      	strb	r3, [r1, #0]
 800518a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800518c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005190:	4691      	mov	r9, r2
 8005192:	f023 0820 	bic.w	r8, r3, #32
 8005196:	bfbc      	itt	lt
 8005198:	4622      	movlt	r2, r4
 800519a:	4614      	movlt	r4, r2
 800519c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051a0:	d005      	beq.n	80051ae <__cvt+0x42>
 80051a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051a6:	d100      	bne.n	80051aa <__cvt+0x3e>
 80051a8:	3601      	adds	r6, #1
 80051aa:	2102      	movs	r1, #2
 80051ac:	e000      	b.n	80051b0 <__cvt+0x44>
 80051ae:	2103      	movs	r1, #3
 80051b0:	ab03      	add	r3, sp, #12
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	ab02      	add	r3, sp, #8
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	ec45 4b10 	vmov	d0, r4, r5
 80051bc:	4653      	mov	r3, sl
 80051be:	4632      	mov	r2, r6
 80051c0:	f000 fcea 	bl	8005b98 <_dtoa_r>
 80051c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051c8:	4607      	mov	r7, r0
 80051ca:	d102      	bne.n	80051d2 <__cvt+0x66>
 80051cc:	f019 0f01 	tst.w	r9, #1
 80051d0:	d022      	beq.n	8005218 <__cvt+0xac>
 80051d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051d6:	eb07 0906 	add.w	r9, r7, r6
 80051da:	d110      	bne.n	80051fe <__cvt+0x92>
 80051dc:	783b      	ldrb	r3, [r7, #0]
 80051de:	2b30      	cmp	r3, #48	; 0x30
 80051e0:	d10a      	bne.n	80051f8 <__cvt+0x8c>
 80051e2:	2200      	movs	r2, #0
 80051e4:	2300      	movs	r3, #0
 80051e6:	4620      	mov	r0, r4
 80051e8:	4629      	mov	r1, r5
 80051ea:	f7fb fc75 	bl	8000ad8 <__aeabi_dcmpeq>
 80051ee:	b918      	cbnz	r0, 80051f8 <__cvt+0x8c>
 80051f0:	f1c6 0601 	rsb	r6, r6, #1
 80051f4:	f8ca 6000 	str.w	r6, [sl]
 80051f8:	f8da 3000 	ldr.w	r3, [sl]
 80051fc:	4499      	add	r9, r3
 80051fe:	2200      	movs	r2, #0
 8005200:	2300      	movs	r3, #0
 8005202:	4620      	mov	r0, r4
 8005204:	4629      	mov	r1, r5
 8005206:	f7fb fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800520a:	b108      	cbz	r0, 8005210 <__cvt+0xa4>
 800520c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005210:	2230      	movs	r2, #48	; 0x30
 8005212:	9b03      	ldr	r3, [sp, #12]
 8005214:	454b      	cmp	r3, r9
 8005216:	d307      	bcc.n	8005228 <__cvt+0xbc>
 8005218:	9b03      	ldr	r3, [sp, #12]
 800521a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800521c:	1bdb      	subs	r3, r3, r7
 800521e:	4638      	mov	r0, r7
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	b004      	add	sp, #16
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	9103      	str	r1, [sp, #12]
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e7f0      	b.n	8005212 <__cvt+0xa6>

08005230 <__exponent>:
 8005230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005232:	4603      	mov	r3, r0
 8005234:	2900      	cmp	r1, #0
 8005236:	bfb8      	it	lt
 8005238:	4249      	neglt	r1, r1
 800523a:	f803 2b02 	strb.w	r2, [r3], #2
 800523e:	bfb4      	ite	lt
 8005240:	222d      	movlt	r2, #45	; 0x2d
 8005242:	222b      	movge	r2, #43	; 0x2b
 8005244:	2909      	cmp	r1, #9
 8005246:	7042      	strb	r2, [r0, #1]
 8005248:	dd2a      	ble.n	80052a0 <__exponent+0x70>
 800524a:	f10d 0407 	add.w	r4, sp, #7
 800524e:	46a4      	mov	ip, r4
 8005250:	270a      	movs	r7, #10
 8005252:	46a6      	mov	lr, r4
 8005254:	460a      	mov	r2, r1
 8005256:	fb91 f6f7 	sdiv	r6, r1, r7
 800525a:	fb07 1516 	mls	r5, r7, r6, r1
 800525e:	3530      	adds	r5, #48	; 0x30
 8005260:	2a63      	cmp	r2, #99	; 0x63
 8005262:	f104 34ff 	add.w	r4, r4, #4294967295
 8005266:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800526a:	4631      	mov	r1, r6
 800526c:	dcf1      	bgt.n	8005252 <__exponent+0x22>
 800526e:	3130      	adds	r1, #48	; 0x30
 8005270:	f1ae 0502 	sub.w	r5, lr, #2
 8005274:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005278:	1c44      	adds	r4, r0, #1
 800527a:	4629      	mov	r1, r5
 800527c:	4561      	cmp	r1, ip
 800527e:	d30a      	bcc.n	8005296 <__exponent+0x66>
 8005280:	f10d 0209 	add.w	r2, sp, #9
 8005284:	eba2 020e 	sub.w	r2, r2, lr
 8005288:	4565      	cmp	r5, ip
 800528a:	bf88      	it	hi
 800528c:	2200      	movhi	r2, #0
 800528e:	4413      	add	r3, r2
 8005290:	1a18      	subs	r0, r3, r0
 8005292:	b003      	add	sp, #12
 8005294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800529a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800529e:	e7ed      	b.n	800527c <__exponent+0x4c>
 80052a0:	2330      	movs	r3, #48	; 0x30
 80052a2:	3130      	adds	r1, #48	; 0x30
 80052a4:	7083      	strb	r3, [r0, #2]
 80052a6:	70c1      	strb	r1, [r0, #3]
 80052a8:	1d03      	adds	r3, r0, #4
 80052aa:	e7f1      	b.n	8005290 <__exponent+0x60>

080052ac <_printf_float>:
 80052ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b0:	ed2d 8b02 	vpush	{d8}
 80052b4:	b08d      	sub	sp, #52	; 0x34
 80052b6:	460c      	mov	r4, r1
 80052b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052bc:	4616      	mov	r6, r2
 80052be:	461f      	mov	r7, r3
 80052c0:	4605      	mov	r5, r0
 80052c2:	f001 fa57 	bl	8006774 <_localeconv_r>
 80052c6:	f8d0 a000 	ldr.w	sl, [r0]
 80052ca:	4650      	mov	r0, sl
 80052cc:	f7fa ff88 	bl	80001e0 <strlen>
 80052d0:	2300      	movs	r3, #0
 80052d2:	930a      	str	r3, [sp, #40]	; 0x28
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	9305      	str	r3, [sp, #20]
 80052d8:	f8d8 3000 	ldr.w	r3, [r8]
 80052dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80052e0:	3307      	adds	r3, #7
 80052e2:	f023 0307 	bic.w	r3, r3, #7
 80052e6:	f103 0208 	add.w	r2, r3, #8
 80052ea:	f8c8 2000 	str.w	r2, [r8]
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80052fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052fe:	9307      	str	r3, [sp, #28]
 8005300:	f8cd 8018 	str.w	r8, [sp, #24]
 8005304:	ee08 0a10 	vmov	s16, r0
 8005308:	4b9f      	ldr	r3, [pc, #636]	; (8005588 <_printf_float+0x2dc>)
 800530a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	f7fb fc13 	bl	8000b3c <__aeabi_dcmpun>
 8005316:	bb88      	cbnz	r0, 800537c <_printf_float+0xd0>
 8005318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800531c:	4b9a      	ldr	r3, [pc, #616]	; (8005588 <_printf_float+0x2dc>)
 800531e:	f04f 32ff 	mov.w	r2, #4294967295
 8005322:	f7fb fbed 	bl	8000b00 <__aeabi_dcmple>
 8005326:	bb48      	cbnz	r0, 800537c <_printf_float+0xd0>
 8005328:	2200      	movs	r2, #0
 800532a:	2300      	movs	r3, #0
 800532c:	4640      	mov	r0, r8
 800532e:	4649      	mov	r1, r9
 8005330:	f7fb fbdc 	bl	8000aec <__aeabi_dcmplt>
 8005334:	b110      	cbz	r0, 800533c <_printf_float+0x90>
 8005336:	232d      	movs	r3, #45	; 0x2d
 8005338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533c:	4b93      	ldr	r3, [pc, #588]	; (800558c <_printf_float+0x2e0>)
 800533e:	4894      	ldr	r0, [pc, #592]	; (8005590 <_printf_float+0x2e4>)
 8005340:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005344:	bf94      	ite	ls
 8005346:	4698      	movls	r8, r3
 8005348:	4680      	movhi	r8, r0
 800534a:	2303      	movs	r3, #3
 800534c:	6123      	str	r3, [r4, #16]
 800534e:	9b05      	ldr	r3, [sp, #20]
 8005350:	f023 0204 	bic.w	r2, r3, #4
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	f04f 0900 	mov.w	r9, #0
 800535a:	9700      	str	r7, [sp, #0]
 800535c:	4633      	mov	r3, r6
 800535e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005360:	4621      	mov	r1, r4
 8005362:	4628      	mov	r0, r5
 8005364:	f000 f9d8 	bl	8005718 <_printf_common>
 8005368:	3001      	adds	r0, #1
 800536a:	f040 8090 	bne.w	800548e <_printf_float+0x1e2>
 800536e:	f04f 30ff 	mov.w	r0, #4294967295
 8005372:	b00d      	add	sp, #52	; 0x34
 8005374:	ecbd 8b02 	vpop	{d8}
 8005378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537c:	4642      	mov	r2, r8
 800537e:	464b      	mov	r3, r9
 8005380:	4640      	mov	r0, r8
 8005382:	4649      	mov	r1, r9
 8005384:	f7fb fbda 	bl	8000b3c <__aeabi_dcmpun>
 8005388:	b140      	cbz	r0, 800539c <_printf_float+0xf0>
 800538a:	464b      	mov	r3, r9
 800538c:	2b00      	cmp	r3, #0
 800538e:	bfbc      	itt	lt
 8005390:	232d      	movlt	r3, #45	; 0x2d
 8005392:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005396:	487f      	ldr	r0, [pc, #508]	; (8005594 <_printf_float+0x2e8>)
 8005398:	4b7f      	ldr	r3, [pc, #508]	; (8005598 <_printf_float+0x2ec>)
 800539a:	e7d1      	b.n	8005340 <_printf_float+0x94>
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053a2:	9206      	str	r2, [sp, #24]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	d13f      	bne.n	8005428 <_printf_float+0x17c>
 80053a8:	2306      	movs	r3, #6
 80053aa:	6063      	str	r3, [r4, #4]
 80053ac:	9b05      	ldr	r3, [sp, #20]
 80053ae:	6861      	ldr	r1, [r4, #4]
 80053b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053b4:	2300      	movs	r3, #0
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	ab0a      	add	r3, sp, #40	; 0x28
 80053ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053be:	ab09      	add	r3, sp, #36	; 0x24
 80053c0:	ec49 8b10 	vmov	d0, r8, r9
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	6022      	str	r2, [r4, #0]
 80053c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053cc:	4628      	mov	r0, r5
 80053ce:	f7ff fecd 	bl	800516c <__cvt>
 80053d2:	9b06      	ldr	r3, [sp, #24]
 80053d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053d6:	2b47      	cmp	r3, #71	; 0x47
 80053d8:	4680      	mov	r8, r0
 80053da:	d108      	bne.n	80053ee <_printf_float+0x142>
 80053dc:	1cc8      	adds	r0, r1, #3
 80053de:	db02      	blt.n	80053e6 <_printf_float+0x13a>
 80053e0:	6863      	ldr	r3, [r4, #4]
 80053e2:	4299      	cmp	r1, r3
 80053e4:	dd41      	ble.n	800546a <_printf_float+0x1be>
 80053e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80053ea:	fa5f fb8b 	uxtb.w	fp, fp
 80053ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053f2:	d820      	bhi.n	8005436 <_printf_float+0x18a>
 80053f4:	3901      	subs	r1, #1
 80053f6:	465a      	mov	r2, fp
 80053f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053fc:	9109      	str	r1, [sp, #36]	; 0x24
 80053fe:	f7ff ff17 	bl	8005230 <__exponent>
 8005402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005404:	1813      	adds	r3, r2, r0
 8005406:	2a01      	cmp	r2, #1
 8005408:	4681      	mov	r9, r0
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	dc02      	bgt.n	8005414 <_printf_float+0x168>
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	07d2      	lsls	r2, r2, #31
 8005412:	d501      	bpl.n	8005418 <_printf_float+0x16c>
 8005414:	3301      	adds	r3, #1
 8005416:	6123      	str	r3, [r4, #16]
 8005418:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800541c:	2b00      	cmp	r3, #0
 800541e:	d09c      	beq.n	800535a <_printf_float+0xae>
 8005420:	232d      	movs	r3, #45	; 0x2d
 8005422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005426:	e798      	b.n	800535a <_printf_float+0xae>
 8005428:	9a06      	ldr	r2, [sp, #24]
 800542a:	2a47      	cmp	r2, #71	; 0x47
 800542c:	d1be      	bne.n	80053ac <_printf_float+0x100>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1bc      	bne.n	80053ac <_printf_float+0x100>
 8005432:	2301      	movs	r3, #1
 8005434:	e7b9      	b.n	80053aa <_printf_float+0xfe>
 8005436:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800543a:	d118      	bne.n	800546e <_printf_float+0x1c2>
 800543c:	2900      	cmp	r1, #0
 800543e:	6863      	ldr	r3, [r4, #4]
 8005440:	dd0b      	ble.n	800545a <_printf_float+0x1ae>
 8005442:	6121      	str	r1, [r4, #16]
 8005444:	b913      	cbnz	r3, 800544c <_printf_float+0x1a0>
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	07d0      	lsls	r0, r2, #31
 800544a:	d502      	bpl.n	8005452 <_printf_float+0x1a6>
 800544c:	3301      	adds	r3, #1
 800544e:	440b      	add	r3, r1
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	65a1      	str	r1, [r4, #88]	; 0x58
 8005454:	f04f 0900 	mov.w	r9, #0
 8005458:	e7de      	b.n	8005418 <_printf_float+0x16c>
 800545a:	b913      	cbnz	r3, 8005462 <_printf_float+0x1b6>
 800545c:	6822      	ldr	r2, [r4, #0]
 800545e:	07d2      	lsls	r2, r2, #31
 8005460:	d501      	bpl.n	8005466 <_printf_float+0x1ba>
 8005462:	3302      	adds	r3, #2
 8005464:	e7f4      	b.n	8005450 <_printf_float+0x1a4>
 8005466:	2301      	movs	r3, #1
 8005468:	e7f2      	b.n	8005450 <_printf_float+0x1a4>
 800546a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800546e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005470:	4299      	cmp	r1, r3
 8005472:	db05      	blt.n	8005480 <_printf_float+0x1d4>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	6121      	str	r1, [r4, #16]
 8005478:	07d8      	lsls	r0, r3, #31
 800547a:	d5ea      	bpl.n	8005452 <_printf_float+0x1a6>
 800547c:	1c4b      	adds	r3, r1, #1
 800547e:	e7e7      	b.n	8005450 <_printf_float+0x1a4>
 8005480:	2900      	cmp	r1, #0
 8005482:	bfd4      	ite	le
 8005484:	f1c1 0202 	rsble	r2, r1, #2
 8005488:	2201      	movgt	r2, #1
 800548a:	4413      	add	r3, r2
 800548c:	e7e0      	b.n	8005450 <_printf_float+0x1a4>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	055a      	lsls	r2, r3, #21
 8005492:	d407      	bmi.n	80054a4 <_printf_float+0x1f8>
 8005494:	6923      	ldr	r3, [r4, #16]
 8005496:	4642      	mov	r2, r8
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	d12c      	bne.n	80054fc <_printf_float+0x250>
 80054a2:	e764      	b.n	800536e <_printf_float+0xc2>
 80054a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054a8:	f240 80e0 	bls.w	800566c <_printf_float+0x3c0>
 80054ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054b0:	2200      	movs	r2, #0
 80054b2:	2300      	movs	r3, #0
 80054b4:	f7fb fb10 	bl	8000ad8 <__aeabi_dcmpeq>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d034      	beq.n	8005526 <_printf_float+0x27a>
 80054bc:	4a37      	ldr	r2, [pc, #220]	; (800559c <_printf_float+0x2f0>)
 80054be:	2301      	movs	r3, #1
 80054c0:	4631      	mov	r1, r6
 80054c2:	4628      	mov	r0, r5
 80054c4:	47b8      	blx	r7
 80054c6:	3001      	adds	r0, #1
 80054c8:	f43f af51 	beq.w	800536e <_printf_float+0xc2>
 80054cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054d0:	429a      	cmp	r2, r3
 80054d2:	db02      	blt.n	80054da <_printf_float+0x22e>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	07d8      	lsls	r0, r3, #31
 80054d8:	d510      	bpl.n	80054fc <_printf_float+0x250>
 80054da:	ee18 3a10 	vmov	r3, s16
 80054de:	4652      	mov	r2, sl
 80054e0:	4631      	mov	r1, r6
 80054e2:	4628      	mov	r0, r5
 80054e4:	47b8      	blx	r7
 80054e6:	3001      	adds	r0, #1
 80054e8:	f43f af41 	beq.w	800536e <_printf_float+0xc2>
 80054ec:	f04f 0800 	mov.w	r8, #0
 80054f0:	f104 091a 	add.w	r9, r4, #26
 80054f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f6:	3b01      	subs	r3, #1
 80054f8:	4543      	cmp	r3, r8
 80054fa:	dc09      	bgt.n	8005510 <_printf_float+0x264>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	079b      	lsls	r3, r3, #30
 8005500:	f100 8105 	bmi.w	800570e <_printf_float+0x462>
 8005504:	68e0      	ldr	r0, [r4, #12]
 8005506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005508:	4298      	cmp	r0, r3
 800550a:	bfb8      	it	lt
 800550c:	4618      	movlt	r0, r3
 800550e:	e730      	b.n	8005372 <_printf_float+0xc6>
 8005510:	2301      	movs	r3, #1
 8005512:	464a      	mov	r2, r9
 8005514:	4631      	mov	r1, r6
 8005516:	4628      	mov	r0, r5
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	f43f af27 	beq.w	800536e <_printf_float+0xc2>
 8005520:	f108 0801 	add.w	r8, r8, #1
 8005524:	e7e6      	b.n	80054f4 <_printf_float+0x248>
 8005526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	dc39      	bgt.n	80055a0 <_printf_float+0x2f4>
 800552c:	4a1b      	ldr	r2, [pc, #108]	; (800559c <_printf_float+0x2f0>)
 800552e:	2301      	movs	r3, #1
 8005530:	4631      	mov	r1, r6
 8005532:	4628      	mov	r0, r5
 8005534:	47b8      	blx	r7
 8005536:	3001      	adds	r0, #1
 8005538:	f43f af19 	beq.w	800536e <_printf_float+0xc2>
 800553c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005540:	4313      	orrs	r3, r2
 8005542:	d102      	bne.n	800554a <_printf_float+0x29e>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	07d9      	lsls	r1, r3, #31
 8005548:	d5d8      	bpl.n	80054fc <_printf_float+0x250>
 800554a:	ee18 3a10 	vmov	r3, s16
 800554e:	4652      	mov	r2, sl
 8005550:	4631      	mov	r1, r6
 8005552:	4628      	mov	r0, r5
 8005554:	47b8      	blx	r7
 8005556:	3001      	adds	r0, #1
 8005558:	f43f af09 	beq.w	800536e <_printf_float+0xc2>
 800555c:	f04f 0900 	mov.w	r9, #0
 8005560:	f104 0a1a 	add.w	sl, r4, #26
 8005564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005566:	425b      	negs	r3, r3
 8005568:	454b      	cmp	r3, r9
 800556a:	dc01      	bgt.n	8005570 <_printf_float+0x2c4>
 800556c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800556e:	e792      	b.n	8005496 <_printf_float+0x1ea>
 8005570:	2301      	movs	r3, #1
 8005572:	4652      	mov	r2, sl
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	f43f aef7 	beq.w	800536e <_printf_float+0xc2>
 8005580:	f109 0901 	add.w	r9, r9, #1
 8005584:	e7ee      	b.n	8005564 <_printf_float+0x2b8>
 8005586:	bf00      	nop
 8005588:	7fefffff 	.word	0x7fefffff
 800558c:	08007ff4 	.word	0x08007ff4
 8005590:	08007ff8 	.word	0x08007ff8
 8005594:	08008000 	.word	0x08008000
 8005598:	08007ffc 	.word	0x08007ffc
 800559c:	08008004 	.word	0x08008004
 80055a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055a4:	429a      	cmp	r2, r3
 80055a6:	bfa8      	it	ge
 80055a8:	461a      	movge	r2, r3
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	4691      	mov	r9, r2
 80055ae:	dc37      	bgt.n	8005620 <_printf_float+0x374>
 80055b0:	f04f 0b00 	mov.w	fp, #0
 80055b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055b8:	f104 021a 	add.w	r2, r4, #26
 80055bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055be:	9305      	str	r3, [sp, #20]
 80055c0:	eba3 0309 	sub.w	r3, r3, r9
 80055c4:	455b      	cmp	r3, fp
 80055c6:	dc33      	bgt.n	8005630 <_printf_float+0x384>
 80055c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055cc:	429a      	cmp	r2, r3
 80055ce:	db3b      	blt.n	8005648 <_printf_float+0x39c>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	07da      	lsls	r2, r3, #31
 80055d4:	d438      	bmi.n	8005648 <_printf_float+0x39c>
 80055d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d8:	9a05      	ldr	r2, [sp, #20]
 80055da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055dc:	1a9a      	subs	r2, r3, r2
 80055de:	eba3 0901 	sub.w	r9, r3, r1
 80055e2:	4591      	cmp	r9, r2
 80055e4:	bfa8      	it	ge
 80055e6:	4691      	movge	r9, r2
 80055e8:	f1b9 0f00 	cmp.w	r9, #0
 80055ec:	dc35      	bgt.n	800565a <_printf_float+0x3ae>
 80055ee:	f04f 0800 	mov.w	r8, #0
 80055f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055f6:	f104 0a1a 	add.w	sl, r4, #26
 80055fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	eba3 0309 	sub.w	r3, r3, r9
 8005604:	4543      	cmp	r3, r8
 8005606:	f77f af79 	ble.w	80054fc <_printf_float+0x250>
 800560a:	2301      	movs	r3, #1
 800560c:	4652      	mov	r2, sl
 800560e:	4631      	mov	r1, r6
 8005610:	4628      	mov	r0, r5
 8005612:	47b8      	blx	r7
 8005614:	3001      	adds	r0, #1
 8005616:	f43f aeaa 	beq.w	800536e <_printf_float+0xc2>
 800561a:	f108 0801 	add.w	r8, r8, #1
 800561e:	e7ec      	b.n	80055fa <_printf_float+0x34e>
 8005620:	4613      	mov	r3, r2
 8005622:	4631      	mov	r1, r6
 8005624:	4642      	mov	r2, r8
 8005626:	4628      	mov	r0, r5
 8005628:	47b8      	blx	r7
 800562a:	3001      	adds	r0, #1
 800562c:	d1c0      	bne.n	80055b0 <_printf_float+0x304>
 800562e:	e69e      	b.n	800536e <_printf_float+0xc2>
 8005630:	2301      	movs	r3, #1
 8005632:	4631      	mov	r1, r6
 8005634:	4628      	mov	r0, r5
 8005636:	9205      	str	r2, [sp, #20]
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f43f ae97 	beq.w	800536e <_printf_float+0xc2>
 8005640:	9a05      	ldr	r2, [sp, #20]
 8005642:	f10b 0b01 	add.w	fp, fp, #1
 8005646:	e7b9      	b.n	80055bc <_printf_float+0x310>
 8005648:	ee18 3a10 	vmov	r3, s16
 800564c:	4652      	mov	r2, sl
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	d1be      	bne.n	80055d6 <_printf_float+0x32a>
 8005658:	e689      	b.n	800536e <_printf_float+0xc2>
 800565a:	9a05      	ldr	r2, [sp, #20]
 800565c:	464b      	mov	r3, r9
 800565e:	4442      	add	r2, r8
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	d1c1      	bne.n	80055ee <_printf_float+0x342>
 800566a:	e680      	b.n	800536e <_printf_float+0xc2>
 800566c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800566e:	2a01      	cmp	r2, #1
 8005670:	dc01      	bgt.n	8005676 <_printf_float+0x3ca>
 8005672:	07db      	lsls	r3, r3, #31
 8005674:	d538      	bpl.n	80056e8 <_printf_float+0x43c>
 8005676:	2301      	movs	r3, #1
 8005678:	4642      	mov	r2, r8
 800567a:	4631      	mov	r1, r6
 800567c:	4628      	mov	r0, r5
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	f43f ae74 	beq.w	800536e <_printf_float+0xc2>
 8005686:	ee18 3a10 	vmov	r3, s16
 800568a:	4652      	mov	r2, sl
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	f43f ae6b 	beq.w	800536e <_printf_float+0xc2>
 8005698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800569c:	2200      	movs	r2, #0
 800569e:	2300      	movs	r3, #0
 80056a0:	f7fb fa1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80056a4:	b9d8      	cbnz	r0, 80056de <_printf_float+0x432>
 80056a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056a8:	f108 0201 	add.w	r2, r8, #1
 80056ac:	3b01      	subs	r3, #1
 80056ae:	4631      	mov	r1, r6
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b8      	blx	r7
 80056b4:	3001      	adds	r0, #1
 80056b6:	d10e      	bne.n	80056d6 <_printf_float+0x42a>
 80056b8:	e659      	b.n	800536e <_printf_float+0xc2>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4652      	mov	r2, sl
 80056be:	4631      	mov	r1, r6
 80056c0:	4628      	mov	r0, r5
 80056c2:	47b8      	blx	r7
 80056c4:	3001      	adds	r0, #1
 80056c6:	f43f ae52 	beq.w	800536e <_printf_float+0xc2>
 80056ca:	f108 0801 	add.w	r8, r8, #1
 80056ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d0:	3b01      	subs	r3, #1
 80056d2:	4543      	cmp	r3, r8
 80056d4:	dcf1      	bgt.n	80056ba <_printf_float+0x40e>
 80056d6:	464b      	mov	r3, r9
 80056d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056dc:	e6dc      	b.n	8005498 <_printf_float+0x1ec>
 80056de:	f04f 0800 	mov.w	r8, #0
 80056e2:	f104 0a1a 	add.w	sl, r4, #26
 80056e6:	e7f2      	b.n	80056ce <_printf_float+0x422>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4642      	mov	r2, r8
 80056ec:	e7df      	b.n	80056ae <_printf_float+0x402>
 80056ee:	2301      	movs	r3, #1
 80056f0:	464a      	mov	r2, r9
 80056f2:	4631      	mov	r1, r6
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b8      	blx	r7
 80056f8:	3001      	adds	r0, #1
 80056fa:	f43f ae38 	beq.w	800536e <_printf_float+0xc2>
 80056fe:	f108 0801 	add.w	r8, r8, #1
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005706:	1a5b      	subs	r3, r3, r1
 8005708:	4543      	cmp	r3, r8
 800570a:	dcf0      	bgt.n	80056ee <_printf_float+0x442>
 800570c:	e6fa      	b.n	8005504 <_printf_float+0x258>
 800570e:	f04f 0800 	mov.w	r8, #0
 8005712:	f104 0919 	add.w	r9, r4, #25
 8005716:	e7f4      	b.n	8005702 <_printf_float+0x456>

08005718 <_printf_common>:
 8005718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800571c:	4616      	mov	r6, r2
 800571e:	4699      	mov	r9, r3
 8005720:	688a      	ldr	r2, [r1, #8]
 8005722:	690b      	ldr	r3, [r1, #16]
 8005724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005728:	4293      	cmp	r3, r2
 800572a:	bfb8      	it	lt
 800572c:	4613      	movlt	r3, r2
 800572e:	6033      	str	r3, [r6, #0]
 8005730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005734:	4607      	mov	r7, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b10a      	cbz	r2, 800573e <_printf_common+0x26>
 800573a:	3301      	adds	r3, #1
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	0699      	lsls	r1, r3, #26
 8005742:	bf42      	ittt	mi
 8005744:	6833      	ldrmi	r3, [r6, #0]
 8005746:	3302      	addmi	r3, #2
 8005748:	6033      	strmi	r3, [r6, #0]
 800574a:	6825      	ldr	r5, [r4, #0]
 800574c:	f015 0506 	ands.w	r5, r5, #6
 8005750:	d106      	bne.n	8005760 <_printf_common+0x48>
 8005752:	f104 0a19 	add.w	sl, r4, #25
 8005756:	68e3      	ldr	r3, [r4, #12]
 8005758:	6832      	ldr	r2, [r6, #0]
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	42ab      	cmp	r3, r5
 800575e:	dc26      	bgt.n	80057ae <_printf_common+0x96>
 8005760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005764:	1e13      	subs	r3, r2, #0
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	bf18      	it	ne
 800576a:	2301      	movne	r3, #1
 800576c:	0692      	lsls	r2, r2, #26
 800576e:	d42b      	bmi.n	80057c8 <_printf_common+0xb0>
 8005770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005774:	4649      	mov	r1, r9
 8005776:	4638      	mov	r0, r7
 8005778:	47c0      	blx	r8
 800577a:	3001      	adds	r0, #1
 800577c:	d01e      	beq.n	80057bc <_printf_common+0xa4>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	68e5      	ldr	r5, [r4, #12]
 8005782:	6832      	ldr	r2, [r6, #0]
 8005784:	f003 0306 	and.w	r3, r3, #6
 8005788:	2b04      	cmp	r3, #4
 800578a:	bf08      	it	eq
 800578c:	1aad      	subeq	r5, r5, r2
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	6922      	ldr	r2, [r4, #16]
 8005792:	bf0c      	ite	eq
 8005794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005798:	2500      	movne	r5, #0
 800579a:	4293      	cmp	r3, r2
 800579c:	bfc4      	itt	gt
 800579e:	1a9b      	subgt	r3, r3, r2
 80057a0:	18ed      	addgt	r5, r5, r3
 80057a2:	2600      	movs	r6, #0
 80057a4:	341a      	adds	r4, #26
 80057a6:	42b5      	cmp	r5, r6
 80057a8:	d11a      	bne.n	80057e0 <_printf_common+0xc8>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e008      	b.n	80057c0 <_printf_common+0xa8>
 80057ae:	2301      	movs	r3, #1
 80057b0:	4652      	mov	r2, sl
 80057b2:	4649      	mov	r1, r9
 80057b4:	4638      	mov	r0, r7
 80057b6:	47c0      	blx	r8
 80057b8:	3001      	adds	r0, #1
 80057ba:	d103      	bne.n	80057c4 <_printf_common+0xac>
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c4:	3501      	adds	r5, #1
 80057c6:	e7c6      	b.n	8005756 <_printf_common+0x3e>
 80057c8:	18e1      	adds	r1, r4, r3
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	2030      	movs	r0, #48	; 0x30
 80057ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057d2:	4422      	add	r2, r4
 80057d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057dc:	3302      	adds	r3, #2
 80057de:	e7c7      	b.n	8005770 <_printf_common+0x58>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4622      	mov	r2, r4
 80057e4:	4649      	mov	r1, r9
 80057e6:	4638      	mov	r0, r7
 80057e8:	47c0      	blx	r8
 80057ea:	3001      	adds	r0, #1
 80057ec:	d0e6      	beq.n	80057bc <_printf_common+0xa4>
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7d9      	b.n	80057a6 <_printf_common+0x8e>
	...

080057f4 <_printf_i>:
 80057f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	7e0f      	ldrb	r7, [r1, #24]
 80057fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057fc:	2f78      	cmp	r7, #120	; 0x78
 80057fe:	4691      	mov	r9, r2
 8005800:	4680      	mov	r8, r0
 8005802:	460c      	mov	r4, r1
 8005804:	469a      	mov	sl, r3
 8005806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800580a:	d807      	bhi.n	800581c <_printf_i+0x28>
 800580c:	2f62      	cmp	r7, #98	; 0x62
 800580e:	d80a      	bhi.n	8005826 <_printf_i+0x32>
 8005810:	2f00      	cmp	r7, #0
 8005812:	f000 80d8 	beq.w	80059c6 <_printf_i+0x1d2>
 8005816:	2f58      	cmp	r7, #88	; 0x58
 8005818:	f000 80a3 	beq.w	8005962 <_printf_i+0x16e>
 800581c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005824:	e03a      	b.n	800589c <_printf_i+0xa8>
 8005826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800582a:	2b15      	cmp	r3, #21
 800582c:	d8f6      	bhi.n	800581c <_printf_i+0x28>
 800582e:	a101      	add	r1, pc, #4	; (adr r1, 8005834 <_printf_i+0x40>)
 8005830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005834:	0800588d 	.word	0x0800588d
 8005838:	080058a1 	.word	0x080058a1
 800583c:	0800581d 	.word	0x0800581d
 8005840:	0800581d 	.word	0x0800581d
 8005844:	0800581d 	.word	0x0800581d
 8005848:	0800581d 	.word	0x0800581d
 800584c:	080058a1 	.word	0x080058a1
 8005850:	0800581d 	.word	0x0800581d
 8005854:	0800581d 	.word	0x0800581d
 8005858:	0800581d 	.word	0x0800581d
 800585c:	0800581d 	.word	0x0800581d
 8005860:	080059ad 	.word	0x080059ad
 8005864:	080058d1 	.word	0x080058d1
 8005868:	0800598f 	.word	0x0800598f
 800586c:	0800581d 	.word	0x0800581d
 8005870:	0800581d 	.word	0x0800581d
 8005874:	080059cf 	.word	0x080059cf
 8005878:	0800581d 	.word	0x0800581d
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800581d 	.word	0x0800581d
 8005884:	0800581d 	.word	0x0800581d
 8005888:	08005997 	.word	0x08005997
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	1d1a      	adds	r2, r3, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	602a      	str	r2, [r5, #0]
 8005894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800589c:	2301      	movs	r3, #1
 800589e:	e0a3      	b.n	80059e8 <_printf_i+0x1f4>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	6829      	ldr	r1, [r5, #0]
 80058a4:	0606      	lsls	r6, r0, #24
 80058a6:	f101 0304 	add.w	r3, r1, #4
 80058aa:	d50a      	bpl.n	80058c2 <_printf_i+0xce>
 80058ac:	680e      	ldr	r6, [r1, #0]
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	2e00      	cmp	r6, #0
 80058b2:	da03      	bge.n	80058bc <_printf_i+0xc8>
 80058b4:	232d      	movs	r3, #45	; 0x2d
 80058b6:	4276      	negs	r6, r6
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	485e      	ldr	r0, [pc, #376]	; (8005a38 <_printf_i+0x244>)
 80058be:	230a      	movs	r3, #10
 80058c0:	e019      	b.n	80058f6 <_printf_i+0x102>
 80058c2:	680e      	ldr	r6, [r1, #0]
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058ca:	bf18      	it	ne
 80058cc:	b236      	sxthne	r6, r6
 80058ce:	e7ef      	b.n	80058b0 <_printf_i+0xbc>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	6820      	ldr	r0, [r4, #0]
 80058d4:	1d19      	adds	r1, r3, #4
 80058d6:	6029      	str	r1, [r5, #0]
 80058d8:	0601      	lsls	r1, r0, #24
 80058da:	d501      	bpl.n	80058e0 <_printf_i+0xec>
 80058dc:	681e      	ldr	r6, [r3, #0]
 80058de:	e002      	b.n	80058e6 <_printf_i+0xf2>
 80058e0:	0646      	lsls	r6, r0, #25
 80058e2:	d5fb      	bpl.n	80058dc <_printf_i+0xe8>
 80058e4:	881e      	ldrh	r6, [r3, #0]
 80058e6:	4854      	ldr	r0, [pc, #336]	; (8005a38 <_printf_i+0x244>)
 80058e8:	2f6f      	cmp	r7, #111	; 0x6f
 80058ea:	bf0c      	ite	eq
 80058ec:	2308      	moveq	r3, #8
 80058ee:	230a      	movne	r3, #10
 80058f0:	2100      	movs	r1, #0
 80058f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058f6:	6865      	ldr	r5, [r4, #4]
 80058f8:	60a5      	str	r5, [r4, #8]
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	bfa2      	ittt	ge
 80058fe:	6821      	ldrge	r1, [r4, #0]
 8005900:	f021 0104 	bicge.w	r1, r1, #4
 8005904:	6021      	strge	r1, [r4, #0]
 8005906:	b90e      	cbnz	r6, 800590c <_printf_i+0x118>
 8005908:	2d00      	cmp	r5, #0
 800590a:	d04d      	beq.n	80059a8 <_printf_i+0x1b4>
 800590c:	4615      	mov	r5, r2
 800590e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005912:	fb03 6711 	mls	r7, r3, r1, r6
 8005916:	5dc7      	ldrb	r7, [r0, r7]
 8005918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800591c:	4637      	mov	r7, r6
 800591e:	42bb      	cmp	r3, r7
 8005920:	460e      	mov	r6, r1
 8005922:	d9f4      	bls.n	800590e <_printf_i+0x11a>
 8005924:	2b08      	cmp	r3, #8
 8005926:	d10b      	bne.n	8005940 <_printf_i+0x14c>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	07de      	lsls	r6, r3, #31
 800592c:	d508      	bpl.n	8005940 <_printf_i+0x14c>
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	6861      	ldr	r1, [r4, #4]
 8005932:	4299      	cmp	r1, r3
 8005934:	bfde      	ittt	le
 8005936:	2330      	movle	r3, #48	; 0x30
 8005938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800593c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005940:	1b52      	subs	r2, r2, r5
 8005942:	6122      	str	r2, [r4, #16]
 8005944:	f8cd a000 	str.w	sl, [sp]
 8005948:	464b      	mov	r3, r9
 800594a:	aa03      	add	r2, sp, #12
 800594c:	4621      	mov	r1, r4
 800594e:	4640      	mov	r0, r8
 8005950:	f7ff fee2 	bl	8005718 <_printf_common>
 8005954:	3001      	adds	r0, #1
 8005956:	d14c      	bne.n	80059f2 <_printf_i+0x1fe>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	b004      	add	sp, #16
 800595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005962:	4835      	ldr	r0, [pc, #212]	; (8005a38 <_printf_i+0x244>)
 8005964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005968:	6829      	ldr	r1, [r5, #0]
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005970:	6029      	str	r1, [r5, #0]
 8005972:	061d      	lsls	r5, r3, #24
 8005974:	d514      	bpl.n	80059a0 <_printf_i+0x1ac>
 8005976:	07df      	lsls	r7, r3, #31
 8005978:	bf44      	itt	mi
 800597a:	f043 0320 	orrmi.w	r3, r3, #32
 800597e:	6023      	strmi	r3, [r4, #0]
 8005980:	b91e      	cbnz	r6, 800598a <_printf_i+0x196>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f023 0320 	bic.w	r3, r3, #32
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	2310      	movs	r3, #16
 800598c:	e7b0      	b.n	80058f0 <_printf_i+0xfc>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	f043 0320 	orr.w	r3, r3, #32
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	2378      	movs	r3, #120	; 0x78
 8005998:	4828      	ldr	r0, [pc, #160]	; (8005a3c <_printf_i+0x248>)
 800599a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800599e:	e7e3      	b.n	8005968 <_printf_i+0x174>
 80059a0:	0659      	lsls	r1, r3, #25
 80059a2:	bf48      	it	mi
 80059a4:	b2b6      	uxthmi	r6, r6
 80059a6:	e7e6      	b.n	8005976 <_printf_i+0x182>
 80059a8:	4615      	mov	r5, r2
 80059aa:	e7bb      	b.n	8005924 <_printf_i+0x130>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6826      	ldr	r6, [r4, #0]
 80059b0:	6961      	ldr	r1, [r4, #20]
 80059b2:	1d18      	adds	r0, r3, #4
 80059b4:	6028      	str	r0, [r5, #0]
 80059b6:	0635      	lsls	r5, r6, #24
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	d501      	bpl.n	80059c0 <_printf_i+0x1cc>
 80059bc:	6019      	str	r1, [r3, #0]
 80059be:	e002      	b.n	80059c6 <_printf_i+0x1d2>
 80059c0:	0670      	lsls	r0, r6, #25
 80059c2:	d5fb      	bpl.n	80059bc <_printf_i+0x1c8>
 80059c4:	8019      	strh	r1, [r3, #0]
 80059c6:	2300      	movs	r3, #0
 80059c8:	6123      	str	r3, [r4, #16]
 80059ca:	4615      	mov	r5, r2
 80059cc:	e7ba      	b.n	8005944 <_printf_i+0x150>
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	1d1a      	adds	r2, r3, #4
 80059d2:	602a      	str	r2, [r5, #0]
 80059d4:	681d      	ldr	r5, [r3, #0]
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	2100      	movs	r1, #0
 80059da:	4628      	mov	r0, r5
 80059dc:	f7fa fc08 	bl	80001f0 <memchr>
 80059e0:	b108      	cbz	r0, 80059e6 <_printf_i+0x1f2>
 80059e2:	1b40      	subs	r0, r0, r5
 80059e4:	6060      	str	r0, [r4, #4]
 80059e6:	6863      	ldr	r3, [r4, #4]
 80059e8:	6123      	str	r3, [r4, #16]
 80059ea:	2300      	movs	r3, #0
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	e7a8      	b.n	8005944 <_printf_i+0x150>
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	462a      	mov	r2, r5
 80059f6:	4649      	mov	r1, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	47d0      	blx	sl
 80059fc:	3001      	adds	r0, #1
 80059fe:	d0ab      	beq.n	8005958 <_printf_i+0x164>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	079b      	lsls	r3, r3, #30
 8005a04:	d413      	bmi.n	8005a2e <_printf_i+0x23a>
 8005a06:	68e0      	ldr	r0, [r4, #12]
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	bfb8      	it	lt
 8005a0e:	4618      	movlt	r0, r3
 8005a10:	e7a4      	b.n	800595c <_printf_i+0x168>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4632      	mov	r2, r6
 8005a16:	4649      	mov	r1, r9
 8005a18:	4640      	mov	r0, r8
 8005a1a:	47d0      	blx	sl
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d09b      	beq.n	8005958 <_printf_i+0x164>
 8005a20:	3501      	adds	r5, #1
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	9903      	ldr	r1, [sp, #12]
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	dcf2      	bgt.n	8005a12 <_printf_i+0x21e>
 8005a2c:	e7eb      	b.n	8005a06 <_printf_i+0x212>
 8005a2e:	2500      	movs	r5, #0
 8005a30:	f104 0619 	add.w	r6, r4, #25
 8005a34:	e7f5      	b.n	8005a22 <_printf_i+0x22e>
 8005a36:	bf00      	nop
 8005a38:	08008006 	.word	0x08008006
 8005a3c:	08008017 	.word	0x08008017

08005a40 <siprintf>:
 8005a40:	b40e      	push	{r1, r2, r3}
 8005a42:	b500      	push	{lr}
 8005a44:	b09c      	sub	sp, #112	; 0x70
 8005a46:	ab1d      	add	r3, sp, #116	; 0x74
 8005a48:	9002      	str	r0, [sp, #8]
 8005a4a:	9006      	str	r0, [sp, #24]
 8005a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a50:	4809      	ldr	r0, [pc, #36]	; (8005a78 <siprintf+0x38>)
 8005a52:	9107      	str	r1, [sp, #28]
 8005a54:	9104      	str	r1, [sp, #16]
 8005a56:	4909      	ldr	r1, [pc, #36]	; (8005a7c <siprintf+0x3c>)
 8005a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a5c:	9105      	str	r1, [sp, #20]
 8005a5e:	6800      	ldr	r0, [r0, #0]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	a902      	add	r1, sp, #8
 8005a64:	f001 fb68 	bl	8007138 <_svfiprintf_r>
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	b01c      	add	sp, #112	; 0x70
 8005a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a74:	b003      	add	sp, #12
 8005a76:	4770      	bx	lr
 8005a78:	20000010 	.word	0x20000010
 8005a7c:	ffff0208 	.word	0xffff0208

08005a80 <quorem>:
 8005a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	6903      	ldr	r3, [r0, #16]
 8005a86:	690c      	ldr	r4, [r1, #16]
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	4607      	mov	r7, r0
 8005a8c:	f2c0 8081 	blt.w	8005b92 <quorem+0x112>
 8005a90:	3c01      	subs	r4, #1
 8005a92:	f101 0814 	add.w	r8, r1, #20
 8005a96:	f100 0514 	add.w	r5, r0, #20
 8005a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ab0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ab4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ab8:	d331      	bcc.n	8005b1e <quorem+0x9e>
 8005aba:	f04f 0e00 	mov.w	lr, #0
 8005abe:	4640      	mov	r0, r8
 8005ac0:	46ac      	mov	ip, r5
 8005ac2:	46f2      	mov	sl, lr
 8005ac4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ac8:	b293      	uxth	r3, r2
 8005aca:	fb06 e303 	mla	r3, r6, r3, lr
 8005ace:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	ebaa 0303 	sub.w	r3, sl, r3
 8005ad8:	f8dc a000 	ldr.w	sl, [ip]
 8005adc:	0c12      	lsrs	r2, r2, #16
 8005ade:	fa13 f38a 	uxtah	r3, r3, sl
 8005ae2:	fb06 e202 	mla	r2, r6, r2, lr
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	9b00      	ldr	r3, [sp, #0]
 8005aea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005aee:	b292      	uxth	r2, r2
 8005af0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005af8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005afc:	4581      	cmp	r9, r0
 8005afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b02:	f84c 3b04 	str.w	r3, [ip], #4
 8005b06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b0a:	d2db      	bcs.n	8005ac4 <quorem+0x44>
 8005b0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b10:	b92b      	cbnz	r3, 8005b1e <quorem+0x9e>
 8005b12:	9b01      	ldr	r3, [sp, #4]
 8005b14:	3b04      	subs	r3, #4
 8005b16:	429d      	cmp	r5, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	d32e      	bcc.n	8005b7a <quorem+0xfa>
 8005b1c:	613c      	str	r4, [r7, #16]
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f001 f8b6 	bl	8006c90 <__mcmp>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	db24      	blt.n	8005b72 <quorem+0xf2>
 8005b28:	3601      	adds	r6, #1
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f04f 0c00 	mov.w	ip, #0
 8005b30:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b34:	f8d0 e000 	ldr.w	lr, [r0]
 8005b38:	b293      	uxth	r3, r2
 8005b3a:	ebac 0303 	sub.w	r3, ip, r3
 8005b3e:	0c12      	lsrs	r2, r2, #16
 8005b40:	fa13 f38e 	uxtah	r3, r3, lr
 8005b44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b52:	45c1      	cmp	r9, r8
 8005b54:	f840 3b04 	str.w	r3, [r0], #4
 8005b58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b5c:	d2e8      	bcs.n	8005b30 <quorem+0xb0>
 8005b5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b66:	b922      	cbnz	r2, 8005b72 <quorem+0xf2>
 8005b68:	3b04      	subs	r3, #4
 8005b6a:	429d      	cmp	r5, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	d30a      	bcc.n	8005b86 <quorem+0x106>
 8005b70:	613c      	str	r4, [r7, #16]
 8005b72:	4630      	mov	r0, r6
 8005b74:	b003      	add	sp, #12
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	3b04      	subs	r3, #4
 8005b7e:	2a00      	cmp	r2, #0
 8005b80:	d1cc      	bne.n	8005b1c <quorem+0x9c>
 8005b82:	3c01      	subs	r4, #1
 8005b84:	e7c7      	b.n	8005b16 <quorem+0x96>
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	3b04      	subs	r3, #4
 8005b8a:	2a00      	cmp	r2, #0
 8005b8c:	d1f0      	bne.n	8005b70 <quorem+0xf0>
 8005b8e:	3c01      	subs	r4, #1
 8005b90:	e7eb      	b.n	8005b6a <quorem+0xea>
 8005b92:	2000      	movs	r0, #0
 8005b94:	e7ee      	b.n	8005b74 <quorem+0xf4>
	...

08005b98 <_dtoa_r>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	ed2d 8b04 	vpush	{d8-d9}
 8005ba0:	ec57 6b10 	vmov	r6, r7, d0
 8005ba4:	b093      	sub	sp, #76	; 0x4c
 8005ba6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ba8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005bac:	9106      	str	r1, [sp, #24]
 8005bae:	ee10 aa10 	vmov	sl, s0
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8005bb8:	46bb      	mov	fp, r7
 8005bba:	b975      	cbnz	r5, 8005bda <_dtoa_r+0x42>
 8005bbc:	2010      	movs	r0, #16
 8005bbe:	f000 fddd 	bl	800677c <malloc>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	6260      	str	r0, [r4, #36]	; 0x24
 8005bc6:	b920      	cbnz	r0, 8005bd2 <_dtoa_r+0x3a>
 8005bc8:	4ba7      	ldr	r3, [pc, #668]	; (8005e68 <_dtoa_r+0x2d0>)
 8005bca:	21ea      	movs	r1, #234	; 0xea
 8005bcc:	48a7      	ldr	r0, [pc, #668]	; (8005e6c <_dtoa_r+0x2d4>)
 8005bce:	f001 fbc3 	bl	8007358 <__assert_func>
 8005bd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bd6:	6005      	str	r5, [r0, #0]
 8005bd8:	60c5      	str	r5, [r0, #12]
 8005bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bdc:	6819      	ldr	r1, [r3, #0]
 8005bde:	b151      	cbz	r1, 8005bf6 <_dtoa_r+0x5e>
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	604a      	str	r2, [r1, #4]
 8005be4:	2301      	movs	r3, #1
 8005be6:	4093      	lsls	r3, r2
 8005be8:	608b      	str	r3, [r1, #8]
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 fe0e 	bl	800680c <_Bfree>
 8005bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	1e3b      	subs	r3, r7, #0
 8005bf8:	bfaa      	itet	ge
 8005bfa:	2300      	movge	r3, #0
 8005bfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005c00:	f8c8 3000 	strge.w	r3, [r8]
 8005c04:	4b9a      	ldr	r3, [pc, #616]	; (8005e70 <_dtoa_r+0x2d8>)
 8005c06:	bfbc      	itt	lt
 8005c08:	2201      	movlt	r2, #1
 8005c0a:	f8c8 2000 	strlt.w	r2, [r8]
 8005c0e:	ea33 030b 	bics.w	r3, r3, fp
 8005c12:	d11b      	bne.n	8005c4c <_dtoa_r+0xb4>
 8005c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c16:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c20:	4333      	orrs	r3, r6
 8005c22:	f000 8592 	beq.w	800674a <_dtoa_r+0xbb2>
 8005c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c28:	b963      	cbnz	r3, 8005c44 <_dtoa_r+0xac>
 8005c2a:	4b92      	ldr	r3, [pc, #584]	; (8005e74 <_dtoa_r+0x2dc>)
 8005c2c:	e022      	b.n	8005c74 <_dtoa_r+0xdc>
 8005c2e:	4b92      	ldr	r3, [pc, #584]	; (8005e78 <_dtoa_r+0x2e0>)
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	3308      	adds	r3, #8
 8005c34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	9801      	ldr	r0, [sp, #4]
 8005c3a:	b013      	add	sp, #76	; 0x4c
 8005c3c:	ecbd 8b04 	vpop	{d8-d9}
 8005c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c44:	4b8b      	ldr	r3, [pc, #556]	; (8005e74 <_dtoa_r+0x2dc>)
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	3303      	adds	r3, #3
 8005c4a:	e7f3      	b.n	8005c34 <_dtoa_r+0x9c>
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4650      	mov	r0, sl
 8005c52:	4659      	mov	r1, fp
 8005c54:	f7fa ff40 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c58:	ec4b ab19 	vmov	d9, sl, fp
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	b158      	cbz	r0, 8005c78 <_dtoa_r+0xe0>
 8005c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c62:	2301      	movs	r3, #1
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 856b 	beq.w	8006744 <_dtoa_r+0xbac>
 8005c6e:	4883      	ldr	r0, [pc, #524]	; (8005e7c <_dtoa_r+0x2e4>)
 8005c70:	6018      	str	r0, [r3, #0]
 8005c72:	1e43      	subs	r3, r0, #1
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	e7df      	b.n	8005c38 <_dtoa_r+0xa0>
 8005c78:	ec4b ab10 	vmov	d0, sl, fp
 8005c7c:	aa10      	add	r2, sp, #64	; 0x40
 8005c7e:	a911      	add	r1, sp, #68	; 0x44
 8005c80:	4620      	mov	r0, r4
 8005c82:	f001 f8ab 	bl	8006ddc <__d2b>
 8005c86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005c8a:	ee08 0a10 	vmov	s16, r0
 8005c8e:	2d00      	cmp	r5, #0
 8005c90:	f000 8084 	beq.w	8005d9c <_dtoa_r+0x204>
 8005c94:	ee19 3a90 	vmov	r3, s19
 8005c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ca0:	4656      	mov	r6, sl
 8005ca2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005caa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005cae:	4b74      	ldr	r3, [pc, #464]	; (8005e80 <_dtoa_r+0x2e8>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	4639      	mov	r1, r7
 8005cb6:	f7fa faef 	bl	8000298 <__aeabi_dsub>
 8005cba:	a365      	add	r3, pc, #404	; (adr r3, 8005e50 <_dtoa_r+0x2b8>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fca2 	bl	8000608 <__aeabi_dmul>
 8005cc4:	a364      	add	r3, pc, #400	; (adr r3, 8005e58 <_dtoa_r+0x2c0>)
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	f7fa fae7 	bl	800029c <__adddf3>
 8005cce:	4606      	mov	r6, r0
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	f7fa fc2e 	bl	8000534 <__aeabi_i2d>
 8005cd8:	a361      	add	r3, pc, #388	; (adr r3, 8005e60 <_dtoa_r+0x2c8>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fc93 	bl	8000608 <__aeabi_dmul>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	4639      	mov	r1, r7
 8005cea:	f7fa fad7 	bl	800029c <__adddf3>
 8005cee:	4606      	mov	r6, r0
 8005cf0:	460f      	mov	r7, r1
 8005cf2:	f7fa ff39 	bl	8000b68 <__aeabi_d2iz>
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	9000      	str	r0, [sp, #0]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	4639      	mov	r1, r7
 8005d00:	f7fa fef4 	bl	8000aec <__aeabi_dcmplt>
 8005d04:	b150      	cbz	r0, 8005d1c <_dtoa_r+0x184>
 8005d06:	9800      	ldr	r0, [sp, #0]
 8005d08:	f7fa fc14 	bl	8000534 <__aeabi_i2d>
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	463b      	mov	r3, r7
 8005d10:	f7fa fee2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d14:	b910      	cbnz	r0, 8005d1c <_dtoa_r+0x184>
 8005d16:	9b00      	ldr	r3, [sp, #0]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	9b00      	ldr	r3, [sp, #0]
 8005d1e:	2b16      	cmp	r3, #22
 8005d20:	d85a      	bhi.n	8005dd8 <_dtoa_r+0x240>
 8005d22:	9a00      	ldr	r2, [sp, #0]
 8005d24:	4b57      	ldr	r3, [pc, #348]	; (8005e84 <_dtoa_r+0x2ec>)
 8005d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	ec51 0b19 	vmov	r0, r1, d9
 8005d32:	f7fa fedb 	bl	8000aec <__aeabi_dcmplt>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d050      	beq.n	8005ddc <_dtoa_r+0x244>
 8005d3a:	9b00      	ldr	r3, [sp, #0]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2300      	movs	r3, #0
 8005d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d46:	1b5d      	subs	r5, r3, r5
 8005d48:	1e6b      	subs	r3, r5, #1
 8005d4a:	9305      	str	r3, [sp, #20]
 8005d4c:	bf45      	ittet	mi
 8005d4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d52:	9304      	strmi	r3, [sp, #16]
 8005d54:	2300      	movpl	r3, #0
 8005d56:	2300      	movmi	r3, #0
 8005d58:	bf4c      	ite	mi
 8005d5a:	9305      	strmi	r3, [sp, #20]
 8005d5c:	9304      	strpl	r3, [sp, #16]
 8005d5e:	9b00      	ldr	r3, [sp, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	db3d      	blt.n	8005de0 <_dtoa_r+0x248>
 8005d64:	9b05      	ldr	r3, [sp, #20]
 8005d66:	9a00      	ldr	r2, [sp, #0]
 8005d68:	920a      	str	r2, [sp, #40]	; 0x28
 8005d6a:	4413      	add	r3, r2
 8005d6c:	9305      	str	r3, [sp, #20]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9307      	str	r3, [sp, #28]
 8005d72:	9b06      	ldr	r3, [sp, #24]
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	f200 8089 	bhi.w	8005e8c <_dtoa_r+0x2f4>
 8005d7a:	2b05      	cmp	r3, #5
 8005d7c:	bfc4      	itt	gt
 8005d7e:	3b04      	subgt	r3, #4
 8005d80:	9306      	strgt	r3, [sp, #24]
 8005d82:	9b06      	ldr	r3, [sp, #24]
 8005d84:	f1a3 0302 	sub.w	r3, r3, #2
 8005d88:	bfcc      	ite	gt
 8005d8a:	2500      	movgt	r5, #0
 8005d8c:	2501      	movle	r5, #1
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	f200 8087 	bhi.w	8005ea2 <_dtoa_r+0x30a>
 8005d94:	e8df f003 	tbb	[pc, r3]
 8005d98:	59383a2d 	.word	0x59383a2d
 8005d9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005da0:	441d      	add	r5, r3
 8005da2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	bfc1      	itttt	gt
 8005daa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005dae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005db2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005db6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005dba:	bfda      	itte	le
 8005dbc:	f1c3 0320 	rsble	r3, r3, #32
 8005dc0:	fa06 f003 	lslle.w	r0, r6, r3
 8005dc4:	4318      	orrgt	r0, r3
 8005dc6:	f7fa fba5 	bl	8000514 <__aeabi_ui2d>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4606      	mov	r6, r0
 8005dce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005dd2:	3d01      	subs	r5, #1
 8005dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8005dd6:	e76a      	b.n	8005cae <_dtoa_r+0x116>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e7b2      	b.n	8005d42 <_dtoa_r+0x1aa>
 8005ddc:	900b      	str	r0, [sp, #44]	; 0x2c
 8005dde:	e7b1      	b.n	8005d44 <_dtoa_r+0x1ac>
 8005de0:	9b04      	ldr	r3, [sp, #16]
 8005de2:	9a00      	ldr	r2, [sp, #0]
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	9304      	str	r3, [sp, #16]
 8005de8:	4253      	negs	r3, r2
 8005dea:	9307      	str	r3, [sp, #28]
 8005dec:	2300      	movs	r3, #0
 8005dee:	930a      	str	r3, [sp, #40]	; 0x28
 8005df0:	e7bf      	b.n	8005d72 <_dtoa_r+0x1da>
 8005df2:	2300      	movs	r3, #0
 8005df4:	9308      	str	r3, [sp, #32]
 8005df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	dc55      	bgt.n	8005ea8 <_dtoa_r+0x310>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e02:	461a      	mov	r2, r3
 8005e04:	9209      	str	r2, [sp, #36]	; 0x24
 8005e06:	e00c      	b.n	8005e22 <_dtoa_r+0x28a>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e7f3      	b.n	8005df4 <_dtoa_r+0x25c>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e10:	9308      	str	r3, [sp, #32]
 8005e12:	9b00      	ldr	r3, [sp, #0]
 8005e14:	4413      	add	r3, r2
 8005e16:	9302      	str	r3, [sp, #8]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	9303      	str	r3, [sp, #12]
 8005e1e:	bfb8      	it	lt
 8005e20:	2301      	movlt	r3, #1
 8005e22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005e24:	2200      	movs	r2, #0
 8005e26:	6042      	str	r2, [r0, #4]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	f102 0614 	add.w	r6, r2, #20
 8005e2e:	429e      	cmp	r6, r3
 8005e30:	6841      	ldr	r1, [r0, #4]
 8005e32:	d93d      	bls.n	8005eb0 <_dtoa_r+0x318>
 8005e34:	4620      	mov	r0, r4
 8005e36:	f000 fca9 	bl	800678c <_Balloc>
 8005e3a:	9001      	str	r0, [sp, #4]
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d13b      	bne.n	8005eb8 <_dtoa_r+0x320>
 8005e40:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <_dtoa_r+0x2f0>)
 8005e42:	4602      	mov	r2, r0
 8005e44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e48:	e6c0      	b.n	8005bcc <_dtoa_r+0x34>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e7df      	b.n	8005e0e <_dtoa_r+0x276>
 8005e4e:	bf00      	nop
 8005e50:	636f4361 	.word	0x636f4361
 8005e54:	3fd287a7 	.word	0x3fd287a7
 8005e58:	8b60c8b3 	.word	0x8b60c8b3
 8005e5c:	3fc68a28 	.word	0x3fc68a28
 8005e60:	509f79fb 	.word	0x509f79fb
 8005e64:	3fd34413 	.word	0x3fd34413
 8005e68:	08008035 	.word	0x08008035
 8005e6c:	0800804c 	.word	0x0800804c
 8005e70:	7ff00000 	.word	0x7ff00000
 8005e74:	08008031 	.word	0x08008031
 8005e78:	08008028 	.word	0x08008028
 8005e7c:	08008005 	.word	0x08008005
 8005e80:	3ff80000 	.word	0x3ff80000
 8005e84:	08008140 	.word	0x08008140
 8005e88:	080080a7 	.word	0x080080a7
 8005e8c:	2501      	movs	r5, #1
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9306      	str	r3, [sp, #24]
 8005e92:	9508      	str	r5, [sp, #32]
 8005e94:	f04f 33ff 	mov.w	r3, #4294967295
 8005e98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2312      	movs	r3, #18
 8005ea0:	e7b0      	b.n	8005e04 <_dtoa_r+0x26c>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	9308      	str	r3, [sp, #32]
 8005ea6:	e7f5      	b.n	8005e94 <_dtoa_r+0x2fc>
 8005ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005eae:	e7b8      	b.n	8005e22 <_dtoa_r+0x28a>
 8005eb0:	3101      	adds	r1, #1
 8005eb2:	6041      	str	r1, [r0, #4]
 8005eb4:	0052      	lsls	r2, r2, #1
 8005eb6:	e7b8      	b.n	8005e2a <_dtoa_r+0x292>
 8005eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eba:	9a01      	ldr	r2, [sp, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	2b0e      	cmp	r3, #14
 8005ec2:	f200 809d 	bhi.w	8006000 <_dtoa_r+0x468>
 8005ec6:	2d00      	cmp	r5, #0
 8005ec8:	f000 809a 	beq.w	8006000 <_dtoa_r+0x468>
 8005ecc:	9b00      	ldr	r3, [sp, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dd32      	ble.n	8005f38 <_dtoa_r+0x3a0>
 8005ed2:	4ab7      	ldr	r2, [pc, #732]	; (80061b0 <_dtoa_r+0x618>)
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ee0:	9b00      	ldr	r3, [sp, #0]
 8005ee2:	05d8      	lsls	r0, r3, #23
 8005ee4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005ee8:	d516      	bpl.n	8005f18 <_dtoa_r+0x380>
 8005eea:	4bb2      	ldr	r3, [pc, #712]	; (80061b4 <_dtoa_r+0x61c>)
 8005eec:	ec51 0b19 	vmov	r0, r1, d9
 8005ef0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ef4:	f7fa fcb2 	bl	800085c <__aeabi_ddiv>
 8005ef8:	f007 070f 	and.w	r7, r7, #15
 8005efc:	4682      	mov	sl, r0
 8005efe:	468b      	mov	fp, r1
 8005f00:	2503      	movs	r5, #3
 8005f02:	4eac      	ldr	r6, [pc, #688]	; (80061b4 <_dtoa_r+0x61c>)
 8005f04:	b957      	cbnz	r7, 8005f1c <_dtoa_r+0x384>
 8005f06:	4642      	mov	r2, r8
 8005f08:	464b      	mov	r3, r9
 8005f0a:	4650      	mov	r0, sl
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	f7fa fca5 	bl	800085c <__aeabi_ddiv>
 8005f12:	4682      	mov	sl, r0
 8005f14:	468b      	mov	fp, r1
 8005f16:	e028      	b.n	8005f6a <_dtoa_r+0x3d2>
 8005f18:	2502      	movs	r5, #2
 8005f1a:	e7f2      	b.n	8005f02 <_dtoa_r+0x36a>
 8005f1c:	07f9      	lsls	r1, r7, #31
 8005f1e:	d508      	bpl.n	8005f32 <_dtoa_r+0x39a>
 8005f20:	4640      	mov	r0, r8
 8005f22:	4649      	mov	r1, r9
 8005f24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f28:	f7fa fb6e 	bl	8000608 <__aeabi_dmul>
 8005f2c:	3501      	adds	r5, #1
 8005f2e:	4680      	mov	r8, r0
 8005f30:	4689      	mov	r9, r1
 8005f32:	107f      	asrs	r7, r7, #1
 8005f34:	3608      	adds	r6, #8
 8005f36:	e7e5      	b.n	8005f04 <_dtoa_r+0x36c>
 8005f38:	f000 809b 	beq.w	8006072 <_dtoa_r+0x4da>
 8005f3c:	9b00      	ldr	r3, [sp, #0]
 8005f3e:	4f9d      	ldr	r7, [pc, #628]	; (80061b4 <_dtoa_r+0x61c>)
 8005f40:	425e      	negs	r6, r3
 8005f42:	4b9b      	ldr	r3, [pc, #620]	; (80061b0 <_dtoa_r+0x618>)
 8005f44:	f006 020f 	and.w	r2, r6, #15
 8005f48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	ec51 0b19 	vmov	r0, r1, d9
 8005f54:	f7fa fb58 	bl	8000608 <__aeabi_dmul>
 8005f58:	1136      	asrs	r6, r6, #4
 8005f5a:	4682      	mov	sl, r0
 8005f5c:	468b      	mov	fp, r1
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2502      	movs	r5, #2
 8005f62:	2e00      	cmp	r6, #0
 8005f64:	d17a      	bne.n	800605c <_dtoa_r+0x4c4>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1d3      	bne.n	8005f12 <_dtoa_r+0x37a>
 8005f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8082 	beq.w	8006076 <_dtoa_r+0x4de>
 8005f72:	4b91      	ldr	r3, [pc, #580]	; (80061b8 <_dtoa_r+0x620>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	4650      	mov	r0, sl
 8005f78:	4659      	mov	r1, fp
 8005f7a:	f7fa fdb7 	bl	8000aec <__aeabi_dcmplt>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d079      	beq.n	8006076 <_dtoa_r+0x4de>
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d076      	beq.n	8006076 <_dtoa_r+0x4de>
 8005f88:	9b02      	ldr	r3, [sp, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dd36      	ble.n	8005ffc <_dtoa_r+0x464>
 8005f8e:	9b00      	ldr	r3, [sp, #0]
 8005f90:	4650      	mov	r0, sl
 8005f92:	4659      	mov	r1, fp
 8005f94:	1e5f      	subs	r7, r3, #1
 8005f96:	2200      	movs	r2, #0
 8005f98:	4b88      	ldr	r3, [pc, #544]	; (80061bc <_dtoa_r+0x624>)
 8005f9a:	f7fa fb35 	bl	8000608 <__aeabi_dmul>
 8005f9e:	9e02      	ldr	r6, [sp, #8]
 8005fa0:	4682      	mov	sl, r0
 8005fa2:	468b      	mov	fp, r1
 8005fa4:	3501      	adds	r5, #1
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f7fa fac4 	bl	8000534 <__aeabi_i2d>
 8005fac:	4652      	mov	r2, sl
 8005fae:	465b      	mov	r3, fp
 8005fb0:	f7fa fb2a 	bl	8000608 <__aeabi_dmul>
 8005fb4:	4b82      	ldr	r3, [pc, #520]	; (80061c0 <_dtoa_r+0x628>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f7fa f970 	bl	800029c <__adddf3>
 8005fbc:	46d0      	mov	r8, sl
 8005fbe:	46d9      	mov	r9, fp
 8005fc0:	4682      	mov	sl, r0
 8005fc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005fc6:	2e00      	cmp	r6, #0
 8005fc8:	d158      	bne.n	800607c <_dtoa_r+0x4e4>
 8005fca:	4b7e      	ldr	r3, [pc, #504]	; (80061c4 <_dtoa_r+0x62c>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4640      	mov	r0, r8
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	f7fa f961 	bl	8000298 <__aeabi_dsub>
 8005fd6:	4652      	mov	r2, sl
 8005fd8:	465b      	mov	r3, fp
 8005fda:	4680      	mov	r8, r0
 8005fdc:	4689      	mov	r9, r1
 8005fde:	f7fa fda3 	bl	8000b28 <__aeabi_dcmpgt>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	f040 8295 	bne.w	8006512 <_dtoa_r+0x97a>
 8005fe8:	4652      	mov	r2, sl
 8005fea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005fee:	4640      	mov	r0, r8
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	f7fa fd7b 	bl	8000aec <__aeabi_dcmplt>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f040 8289 	bne.w	800650e <_dtoa_r+0x976>
 8005ffc:	ec5b ab19 	vmov	sl, fp, d9
 8006000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006002:	2b00      	cmp	r3, #0
 8006004:	f2c0 8148 	blt.w	8006298 <_dtoa_r+0x700>
 8006008:	9a00      	ldr	r2, [sp, #0]
 800600a:	2a0e      	cmp	r2, #14
 800600c:	f300 8144 	bgt.w	8006298 <_dtoa_r+0x700>
 8006010:	4b67      	ldr	r3, [pc, #412]	; (80061b0 <_dtoa_r+0x618>)
 8006012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006016:	e9d3 8900 	ldrd	r8, r9, [r3]
 800601a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	f280 80d5 	bge.w	80061cc <_dtoa_r+0x634>
 8006022:	9b03      	ldr	r3, [sp, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	f300 80d1 	bgt.w	80061cc <_dtoa_r+0x634>
 800602a:	f040 826f 	bne.w	800650c <_dtoa_r+0x974>
 800602e:	4b65      	ldr	r3, [pc, #404]	; (80061c4 <_dtoa_r+0x62c>)
 8006030:	2200      	movs	r2, #0
 8006032:	4640      	mov	r0, r8
 8006034:	4649      	mov	r1, r9
 8006036:	f7fa fae7 	bl	8000608 <__aeabi_dmul>
 800603a:	4652      	mov	r2, sl
 800603c:	465b      	mov	r3, fp
 800603e:	f7fa fd69 	bl	8000b14 <__aeabi_dcmpge>
 8006042:	9e03      	ldr	r6, [sp, #12]
 8006044:	4637      	mov	r7, r6
 8006046:	2800      	cmp	r0, #0
 8006048:	f040 8245 	bne.w	80064d6 <_dtoa_r+0x93e>
 800604c:	9d01      	ldr	r5, [sp, #4]
 800604e:	2331      	movs	r3, #49	; 0x31
 8006050:	f805 3b01 	strb.w	r3, [r5], #1
 8006054:	9b00      	ldr	r3, [sp, #0]
 8006056:	3301      	adds	r3, #1
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	e240      	b.n	80064de <_dtoa_r+0x946>
 800605c:	07f2      	lsls	r2, r6, #31
 800605e:	d505      	bpl.n	800606c <_dtoa_r+0x4d4>
 8006060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006064:	f7fa fad0 	bl	8000608 <__aeabi_dmul>
 8006068:	3501      	adds	r5, #1
 800606a:	2301      	movs	r3, #1
 800606c:	1076      	asrs	r6, r6, #1
 800606e:	3708      	adds	r7, #8
 8006070:	e777      	b.n	8005f62 <_dtoa_r+0x3ca>
 8006072:	2502      	movs	r5, #2
 8006074:	e779      	b.n	8005f6a <_dtoa_r+0x3d2>
 8006076:	9f00      	ldr	r7, [sp, #0]
 8006078:	9e03      	ldr	r6, [sp, #12]
 800607a:	e794      	b.n	8005fa6 <_dtoa_r+0x40e>
 800607c:	9901      	ldr	r1, [sp, #4]
 800607e:	4b4c      	ldr	r3, [pc, #304]	; (80061b0 <_dtoa_r+0x618>)
 8006080:	4431      	add	r1, r6
 8006082:	910d      	str	r1, [sp, #52]	; 0x34
 8006084:	9908      	ldr	r1, [sp, #32]
 8006086:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800608a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800608e:	2900      	cmp	r1, #0
 8006090:	d043      	beq.n	800611a <_dtoa_r+0x582>
 8006092:	494d      	ldr	r1, [pc, #308]	; (80061c8 <_dtoa_r+0x630>)
 8006094:	2000      	movs	r0, #0
 8006096:	f7fa fbe1 	bl	800085c <__aeabi_ddiv>
 800609a:	4652      	mov	r2, sl
 800609c:	465b      	mov	r3, fp
 800609e:	f7fa f8fb 	bl	8000298 <__aeabi_dsub>
 80060a2:	9d01      	ldr	r5, [sp, #4]
 80060a4:	4682      	mov	sl, r0
 80060a6:	468b      	mov	fp, r1
 80060a8:	4649      	mov	r1, r9
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7fa fd5c 	bl	8000b68 <__aeabi_d2iz>
 80060b0:	4606      	mov	r6, r0
 80060b2:	f7fa fa3f 	bl	8000534 <__aeabi_i2d>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	f7fa f8eb 	bl	8000298 <__aeabi_dsub>
 80060c2:	3630      	adds	r6, #48	; 0x30
 80060c4:	f805 6b01 	strb.w	r6, [r5], #1
 80060c8:	4652      	mov	r2, sl
 80060ca:	465b      	mov	r3, fp
 80060cc:	4680      	mov	r8, r0
 80060ce:	4689      	mov	r9, r1
 80060d0:	f7fa fd0c 	bl	8000aec <__aeabi_dcmplt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d163      	bne.n	80061a0 <_dtoa_r+0x608>
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	4936      	ldr	r1, [pc, #216]	; (80061b8 <_dtoa_r+0x620>)
 80060de:	2000      	movs	r0, #0
 80060e0:	f7fa f8da 	bl	8000298 <__aeabi_dsub>
 80060e4:	4652      	mov	r2, sl
 80060e6:	465b      	mov	r3, fp
 80060e8:	f7fa fd00 	bl	8000aec <__aeabi_dcmplt>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f040 80b5 	bne.w	800625c <_dtoa_r+0x6c4>
 80060f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060f4:	429d      	cmp	r5, r3
 80060f6:	d081      	beq.n	8005ffc <_dtoa_r+0x464>
 80060f8:	4b30      	ldr	r3, [pc, #192]	; (80061bc <_dtoa_r+0x624>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	4650      	mov	r0, sl
 80060fe:	4659      	mov	r1, fp
 8006100:	f7fa fa82 	bl	8000608 <__aeabi_dmul>
 8006104:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <_dtoa_r+0x624>)
 8006106:	4682      	mov	sl, r0
 8006108:	468b      	mov	fp, r1
 800610a:	4640      	mov	r0, r8
 800610c:	4649      	mov	r1, r9
 800610e:	2200      	movs	r2, #0
 8006110:	f7fa fa7a 	bl	8000608 <__aeabi_dmul>
 8006114:	4680      	mov	r8, r0
 8006116:	4689      	mov	r9, r1
 8006118:	e7c6      	b.n	80060a8 <_dtoa_r+0x510>
 800611a:	4650      	mov	r0, sl
 800611c:	4659      	mov	r1, fp
 800611e:	f7fa fa73 	bl	8000608 <__aeabi_dmul>
 8006122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006124:	9d01      	ldr	r5, [sp, #4]
 8006126:	930f      	str	r3, [sp, #60]	; 0x3c
 8006128:	4682      	mov	sl, r0
 800612a:	468b      	mov	fp, r1
 800612c:	4649      	mov	r1, r9
 800612e:	4640      	mov	r0, r8
 8006130:	f7fa fd1a 	bl	8000b68 <__aeabi_d2iz>
 8006134:	4606      	mov	r6, r0
 8006136:	f7fa f9fd 	bl	8000534 <__aeabi_i2d>
 800613a:	3630      	adds	r6, #48	; 0x30
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa f8a8 	bl	8000298 <__aeabi_dsub>
 8006148:	f805 6b01 	strb.w	r6, [r5], #1
 800614c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800614e:	429d      	cmp	r5, r3
 8006150:	4680      	mov	r8, r0
 8006152:	4689      	mov	r9, r1
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	d124      	bne.n	80061a4 <_dtoa_r+0x60c>
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <_dtoa_r+0x630>)
 800615c:	4650      	mov	r0, sl
 800615e:	4659      	mov	r1, fp
 8006160:	f7fa f89c 	bl	800029c <__adddf3>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4640      	mov	r0, r8
 800616a:	4649      	mov	r1, r9
 800616c:	f7fa fcdc 	bl	8000b28 <__aeabi_dcmpgt>
 8006170:	2800      	cmp	r0, #0
 8006172:	d173      	bne.n	800625c <_dtoa_r+0x6c4>
 8006174:	4652      	mov	r2, sl
 8006176:	465b      	mov	r3, fp
 8006178:	4913      	ldr	r1, [pc, #76]	; (80061c8 <_dtoa_r+0x630>)
 800617a:	2000      	movs	r0, #0
 800617c:	f7fa f88c 	bl	8000298 <__aeabi_dsub>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4640      	mov	r0, r8
 8006186:	4649      	mov	r1, r9
 8006188:	f7fa fcb0 	bl	8000aec <__aeabi_dcmplt>
 800618c:	2800      	cmp	r0, #0
 800618e:	f43f af35 	beq.w	8005ffc <_dtoa_r+0x464>
 8006192:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006194:	1e6b      	subs	r3, r5, #1
 8006196:	930f      	str	r3, [sp, #60]	; 0x3c
 8006198:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800619c:	2b30      	cmp	r3, #48	; 0x30
 800619e:	d0f8      	beq.n	8006192 <_dtoa_r+0x5fa>
 80061a0:	9700      	str	r7, [sp, #0]
 80061a2:	e049      	b.n	8006238 <_dtoa_r+0x6a0>
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <_dtoa_r+0x624>)
 80061a6:	f7fa fa2f 	bl	8000608 <__aeabi_dmul>
 80061aa:	4680      	mov	r8, r0
 80061ac:	4689      	mov	r9, r1
 80061ae:	e7bd      	b.n	800612c <_dtoa_r+0x594>
 80061b0:	08008140 	.word	0x08008140
 80061b4:	08008118 	.word	0x08008118
 80061b8:	3ff00000 	.word	0x3ff00000
 80061bc:	40240000 	.word	0x40240000
 80061c0:	401c0000 	.word	0x401c0000
 80061c4:	40140000 	.word	0x40140000
 80061c8:	3fe00000 	.word	0x3fe00000
 80061cc:	9d01      	ldr	r5, [sp, #4]
 80061ce:	4656      	mov	r6, sl
 80061d0:	465f      	mov	r7, fp
 80061d2:	4642      	mov	r2, r8
 80061d4:	464b      	mov	r3, r9
 80061d6:	4630      	mov	r0, r6
 80061d8:	4639      	mov	r1, r7
 80061da:	f7fa fb3f 	bl	800085c <__aeabi_ddiv>
 80061de:	f7fa fcc3 	bl	8000b68 <__aeabi_d2iz>
 80061e2:	4682      	mov	sl, r0
 80061e4:	f7fa f9a6 	bl	8000534 <__aeabi_i2d>
 80061e8:	4642      	mov	r2, r8
 80061ea:	464b      	mov	r3, r9
 80061ec:	f7fa fa0c 	bl	8000608 <__aeabi_dmul>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4630      	mov	r0, r6
 80061f6:	4639      	mov	r1, r7
 80061f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80061fc:	f7fa f84c 	bl	8000298 <__aeabi_dsub>
 8006200:	f805 6b01 	strb.w	r6, [r5], #1
 8006204:	9e01      	ldr	r6, [sp, #4]
 8006206:	9f03      	ldr	r7, [sp, #12]
 8006208:	1bae      	subs	r6, r5, r6
 800620a:	42b7      	cmp	r7, r6
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	d135      	bne.n	800627e <_dtoa_r+0x6e6>
 8006212:	f7fa f843 	bl	800029c <__adddf3>
 8006216:	4642      	mov	r2, r8
 8006218:	464b      	mov	r3, r9
 800621a:	4606      	mov	r6, r0
 800621c:	460f      	mov	r7, r1
 800621e:	f7fa fc83 	bl	8000b28 <__aeabi_dcmpgt>
 8006222:	b9d0      	cbnz	r0, 800625a <_dtoa_r+0x6c2>
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	4630      	mov	r0, r6
 800622a:	4639      	mov	r1, r7
 800622c:	f7fa fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 8006230:	b110      	cbz	r0, 8006238 <_dtoa_r+0x6a0>
 8006232:	f01a 0f01 	tst.w	sl, #1
 8006236:	d110      	bne.n	800625a <_dtoa_r+0x6c2>
 8006238:	4620      	mov	r0, r4
 800623a:	ee18 1a10 	vmov	r1, s16
 800623e:	f000 fae5 	bl	800680c <_Bfree>
 8006242:	2300      	movs	r3, #0
 8006244:	9800      	ldr	r0, [sp, #0]
 8006246:	702b      	strb	r3, [r5, #0]
 8006248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800624a:	3001      	adds	r0, #1
 800624c:	6018      	str	r0, [r3, #0]
 800624e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006250:	2b00      	cmp	r3, #0
 8006252:	f43f acf1 	beq.w	8005c38 <_dtoa_r+0xa0>
 8006256:	601d      	str	r5, [r3, #0]
 8006258:	e4ee      	b.n	8005c38 <_dtoa_r+0xa0>
 800625a:	9f00      	ldr	r7, [sp, #0]
 800625c:	462b      	mov	r3, r5
 800625e:	461d      	mov	r5, r3
 8006260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006264:	2a39      	cmp	r2, #57	; 0x39
 8006266:	d106      	bne.n	8006276 <_dtoa_r+0x6de>
 8006268:	9a01      	ldr	r2, [sp, #4]
 800626a:	429a      	cmp	r2, r3
 800626c:	d1f7      	bne.n	800625e <_dtoa_r+0x6c6>
 800626e:	9901      	ldr	r1, [sp, #4]
 8006270:	2230      	movs	r2, #48	; 0x30
 8006272:	3701      	adds	r7, #1
 8006274:	700a      	strb	r2, [r1, #0]
 8006276:	781a      	ldrb	r2, [r3, #0]
 8006278:	3201      	adds	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e790      	b.n	80061a0 <_dtoa_r+0x608>
 800627e:	4ba6      	ldr	r3, [pc, #664]	; (8006518 <_dtoa_r+0x980>)
 8006280:	2200      	movs	r2, #0
 8006282:	f7fa f9c1 	bl	8000608 <__aeabi_dmul>
 8006286:	2200      	movs	r2, #0
 8006288:	2300      	movs	r3, #0
 800628a:	4606      	mov	r6, r0
 800628c:	460f      	mov	r7, r1
 800628e:	f7fa fc23 	bl	8000ad8 <__aeabi_dcmpeq>
 8006292:	2800      	cmp	r0, #0
 8006294:	d09d      	beq.n	80061d2 <_dtoa_r+0x63a>
 8006296:	e7cf      	b.n	8006238 <_dtoa_r+0x6a0>
 8006298:	9a08      	ldr	r2, [sp, #32]
 800629a:	2a00      	cmp	r2, #0
 800629c:	f000 80d7 	beq.w	800644e <_dtoa_r+0x8b6>
 80062a0:	9a06      	ldr	r2, [sp, #24]
 80062a2:	2a01      	cmp	r2, #1
 80062a4:	f300 80ba 	bgt.w	800641c <_dtoa_r+0x884>
 80062a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062aa:	2a00      	cmp	r2, #0
 80062ac:	f000 80b2 	beq.w	8006414 <_dtoa_r+0x87c>
 80062b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062b4:	9e07      	ldr	r6, [sp, #28]
 80062b6:	9d04      	ldr	r5, [sp, #16]
 80062b8:	9a04      	ldr	r2, [sp, #16]
 80062ba:	441a      	add	r2, r3
 80062bc:	9204      	str	r2, [sp, #16]
 80062be:	9a05      	ldr	r2, [sp, #20]
 80062c0:	2101      	movs	r1, #1
 80062c2:	441a      	add	r2, r3
 80062c4:	4620      	mov	r0, r4
 80062c6:	9205      	str	r2, [sp, #20]
 80062c8:	f000 fb58 	bl	800697c <__i2b>
 80062cc:	4607      	mov	r7, r0
 80062ce:	2d00      	cmp	r5, #0
 80062d0:	dd0c      	ble.n	80062ec <_dtoa_r+0x754>
 80062d2:	9b05      	ldr	r3, [sp, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dd09      	ble.n	80062ec <_dtoa_r+0x754>
 80062d8:	42ab      	cmp	r3, r5
 80062da:	9a04      	ldr	r2, [sp, #16]
 80062dc:	bfa8      	it	ge
 80062de:	462b      	movge	r3, r5
 80062e0:	1ad2      	subs	r2, r2, r3
 80062e2:	9204      	str	r2, [sp, #16]
 80062e4:	9a05      	ldr	r2, [sp, #20]
 80062e6:	1aed      	subs	r5, r5, r3
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	9b07      	ldr	r3, [sp, #28]
 80062ee:	b31b      	cbz	r3, 8006338 <_dtoa_r+0x7a0>
 80062f0:	9b08      	ldr	r3, [sp, #32]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80af 	beq.w	8006456 <_dtoa_r+0x8be>
 80062f8:	2e00      	cmp	r6, #0
 80062fa:	dd13      	ble.n	8006324 <_dtoa_r+0x78c>
 80062fc:	4639      	mov	r1, r7
 80062fe:	4632      	mov	r2, r6
 8006300:	4620      	mov	r0, r4
 8006302:	f000 fbfb 	bl	8006afc <__pow5mult>
 8006306:	ee18 2a10 	vmov	r2, s16
 800630a:	4601      	mov	r1, r0
 800630c:	4607      	mov	r7, r0
 800630e:	4620      	mov	r0, r4
 8006310:	f000 fb4a 	bl	80069a8 <__multiply>
 8006314:	ee18 1a10 	vmov	r1, s16
 8006318:	4680      	mov	r8, r0
 800631a:	4620      	mov	r0, r4
 800631c:	f000 fa76 	bl	800680c <_Bfree>
 8006320:	ee08 8a10 	vmov	s16, r8
 8006324:	9b07      	ldr	r3, [sp, #28]
 8006326:	1b9a      	subs	r2, r3, r6
 8006328:	d006      	beq.n	8006338 <_dtoa_r+0x7a0>
 800632a:	ee18 1a10 	vmov	r1, s16
 800632e:	4620      	mov	r0, r4
 8006330:	f000 fbe4 	bl	8006afc <__pow5mult>
 8006334:	ee08 0a10 	vmov	s16, r0
 8006338:	2101      	movs	r1, #1
 800633a:	4620      	mov	r0, r4
 800633c:	f000 fb1e 	bl	800697c <__i2b>
 8006340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006342:	2b00      	cmp	r3, #0
 8006344:	4606      	mov	r6, r0
 8006346:	f340 8088 	ble.w	800645a <_dtoa_r+0x8c2>
 800634a:	461a      	mov	r2, r3
 800634c:	4601      	mov	r1, r0
 800634e:	4620      	mov	r0, r4
 8006350:	f000 fbd4 	bl	8006afc <__pow5mult>
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	2b01      	cmp	r3, #1
 8006358:	4606      	mov	r6, r0
 800635a:	f340 8081 	ble.w	8006460 <_dtoa_r+0x8c8>
 800635e:	f04f 0800 	mov.w	r8, #0
 8006362:	6933      	ldr	r3, [r6, #16]
 8006364:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006368:	6918      	ldr	r0, [r3, #16]
 800636a:	f000 fab7 	bl	80068dc <__hi0bits>
 800636e:	f1c0 0020 	rsb	r0, r0, #32
 8006372:	9b05      	ldr	r3, [sp, #20]
 8006374:	4418      	add	r0, r3
 8006376:	f010 001f 	ands.w	r0, r0, #31
 800637a:	f000 8092 	beq.w	80064a2 <_dtoa_r+0x90a>
 800637e:	f1c0 0320 	rsb	r3, r0, #32
 8006382:	2b04      	cmp	r3, #4
 8006384:	f340 808a 	ble.w	800649c <_dtoa_r+0x904>
 8006388:	f1c0 001c 	rsb	r0, r0, #28
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	4403      	add	r3, r0
 8006390:	9304      	str	r3, [sp, #16]
 8006392:	9b05      	ldr	r3, [sp, #20]
 8006394:	4403      	add	r3, r0
 8006396:	4405      	add	r5, r0
 8006398:	9305      	str	r3, [sp, #20]
 800639a:	9b04      	ldr	r3, [sp, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	dd07      	ble.n	80063b0 <_dtoa_r+0x818>
 80063a0:	ee18 1a10 	vmov	r1, s16
 80063a4:	461a      	mov	r2, r3
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 fc02 	bl	8006bb0 <__lshift>
 80063ac:	ee08 0a10 	vmov	s16, r0
 80063b0:	9b05      	ldr	r3, [sp, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	dd05      	ble.n	80063c2 <_dtoa_r+0x82a>
 80063b6:	4631      	mov	r1, r6
 80063b8:	461a      	mov	r2, r3
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 fbf8 	bl	8006bb0 <__lshift>
 80063c0:	4606      	mov	r6, r0
 80063c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d06e      	beq.n	80064a6 <_dtoa_r+0x90e>
 80063c8:	ee18 0a10 	vmov	r0, s16
 80063cc:	4631      	mov	r1, r6
 80063ce:	f000 fc5f 	bl	8006c90 <__mcmp>
 80063d2:	2800      	cmp	r0, #0
 80063d4:	da67      	bge.n	80064a6 <_dtoa_r+0x90e>
 80063d6:	9b00      	ldr	r3, [sp, #0]
 80063d8:	3b01      	subs	r3, #1
 80063da:	ee18 1a10 	vmov	r1, s16
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	220a      	movs	r2, #10
 80063e2:	2300      	movs	r3, #0
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 fa33 	bl	8006850 <__multadd>
 80063ea:	9b08      	ldr	r3, [sp, #32]
 80063ec:	ee08 0a10 	vmov	s16, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 81b1 	beq.w	8006758 <_dtoa_r+0xbc0>
 80063f6:	2300      	movs	r3, #0
 80063f8:	4639      	mov	r1, r7
 80063fa:	220a      	movs	r2, #10
 80063fc:	4620      	mov	r0, r4
 80063fe:	f000 fa27 	bl	8006850 <__multadd>
 8006402:	9b02      	ldr	r3, [sp, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	4607      	mov	r7, r0
 8006408:	f300 808e 	bgt.w	8006528 <_dtoa_r+0x990>
 800640c:	9b06      	ldr	r3, [sp, #24]
 800640e:	2b02      	cmp	r3, #2
 8006410:	dc51      	bgt.n	80064b6 <_dtoa_r+0x91e>
 8006412:	e089      	b.n	8006528 <_dtoa_r+0x990>
 8006414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800641a:	e74b      	b.n	80062b4 <_dtoa_r+0x71c>
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	1e5e      	subs	r6, r3, #1
 8006420:	9b07      	ldr	r3, [sp, #28]
 8006422:	42b3      	cmp	r3, r6
 8006424:	bfbf      	itttt	lt
 8006426:	9b07      	ldrlt	r3, [sp, #28]
 8006428:	9607      	strlt	r6, [sp, #28]
 800642a:	1af2      	sublt	r2, r6, r3
 800642c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800642e:	bfb6      	itet	lt
 8006430:	189b      	addlt	r3, r3, r2
 8006432:	1b9e      	subge	r6, r3, r6
 8006434:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	bfb8      	it	lt
 800643a:	2600      	movlt	r6, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	bfb7      	itett	lt
 8006440:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006444:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006448:	1a9d      	sublt	r5, r3, r2
 800644a:	2300      	movlt	r3, #0
 800644c:	e734      	b.n	80062b8 <_dtoa_r+0x720>
 800644e:	9e07      	ldr	r6, [sp, #28]
 8006450:	9d04      	ldr	r5, [sp, #16]
 8006452:	9f08      	ldr	r7, [sp, #32]
 8006454:	e73b      	b.n	80062ce <_dtoa_r+0x736>
 8006456:	9a07      	ldr	r2, [sp, #28]
 8006458:	e767      	b.n	800632a <_dtoa_r+0x792>
 800645a:	9b06      	ldr	r3, [sp, #24]
 800645c:	2b01      	cmp	r3, #1
 800645e:	dc18      	bgt.n	8006492 <_dtoa_r+0x8fa>
 8006460:	f1ba 0f00 	cmp.w	sl, #0
 8006464:	d115      	bne.n	8006492 <_dtoa_r+0x8fa>
 8006466:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800646a:	b993      	cbnz	r3, 8006492 <_dtoa_r+0x8fa>
 800646c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006470:	0d1b      	lsrs	r3, r3, #20
 8006472:	051b      	lsls	r3, r3, #20
 8006474:	b183      	cbz	r3, 8006498 <_dtoa_r+0x900>
 8006476:	9b04      	ldr	r3, [sp, #16]
 8006478:	3301      	adds	r3, #1
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	9b05      	ldr	r3, [sp, #20]
 800647e:	3301      	adds	r3, #1
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	f04f 0801 	mov.w	r8, #1
 8006486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006488:	2b00      	cmp	r3, #0
 800648a:	f47f af6a 	bne.w	8006362 <_dtoa_r+0x7ca>
 800648e:	2001      	movs	r0, #1
 8006490:	e76f      	b.n	8006372 <_dtoa_r+0x7da>
 8006492:	f04f 0800 	mov.w	r8, #0
 8006496:	e7f6      	b.n	8006486 <_dtoa_r+0x8ee>
 8006498:	4698      	mov	r8, r3
 800649a:	e7f4      	b.n	8006486 <_dtoa_r+0x8ee>
 800649c:	f43f af7d 	beq.w	800639a <_dtoa_r+0x802>
 80064a0:	4618      	mov	r0, r3
 80064a2:	301c      	adds	r0, #28
 80064a4:	e772      	b.n	800638c <_dtoa_r+0x7f4>
 80064a6:	9b03      	ldr	r3, [sp, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	dc37      	bgt.n	800651c <_dtoa_r+0x984>
 80064ac:	9b06      	ldr	r3, [sp, #24]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	dd34      	ble.n	800651c <_dtoa_r+0x984>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	9302      	str	r3, [sp, #8]
 80064b6:	9b02      	ldr	r3, [sp, #8]
 80064b8:	b96b      	cbnz	r3, 80064d6 <_dtoa_r+0x93e>
 80064ba:	4631      	mov	r1, r6
 80064bc:	2205      	movs	r2, #5
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 f9c6 	bl	8006850 <__multadd>
 80064c4:	4601      	mov	r1, r0
 80064c6:	4606      	mov	r6, r0
 80064c8:	ee18 0a10 	vmov	r0, s16
 80064cc:	f000 fbe0 	bl	8006c90 <__mcmp>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	f73f adbb 	bgt.w	800604c <_dtoa_r+0x4b4>
 80064d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d8:	9d01      	ldr	r5, [sp, #4]
 80064da:	43db      	mvns	r3, r3
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	f04f 0800 	mov.w	r8, #0
 80064e2:	4631      	mov	r1, r6
 80064e4:	4620      	mov	r0, r4
 80064e6:	f000 f991 	bl	800680c <_Bfree>
 80064ea:	2f00      	cmp	r7, #0
 80064ec:	f43f aea4 	beq.w	8006238 <_dtoa_r+0x6a0>
 80064f0:	f1b8 0f00 	cmp.w	r8, #0
 80064f4:	d005      	beq.n	8006502 <_dtoa_r+0x96a>
 80064f6:	45b8      	cmp	r8, r7
 80064f8:	d003      	beq.n	8006502 <_dtoa_r+0x96a>
 80064fa:	4641      	mov	r1, r8
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 f985 	bl	800680c <_Bfree>
 8006502:	4639      	mov	r1, r7
 8006504:	4620      	mov	r0, r4
 8006506:	f000 f981 	bl	800680c <_Bfree>
 800650a:	e695      	b.n	8006238 <_dtoa_r+0x6a0>
 800650c:	2600      	movs	r6, #0
 800650e:	4637      	mov	r7, r6
 8006510:	e7e1      	b.n	80064d6 <_dtoa_r+0x93e>
 8006512:	9700      	str	r7, [sp, #0]
 8006514:	4637      	mov	r7, r6
 8006516:	e599      	b.n	800604c <_dtoa_r+0x4b4>
 8006518:	40240000 	.word	0x40240000
 800651c:	9b08      	ldr	r3, [sp, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 80ca 	beq.w	80066b8 <_dtoa_r+0xb20>
 8006524:	9b03      	ldr	r3, [sp, #12]
 8006526:	9302      	str	r3, [sp, #8]
 8006528:	2d00      	cmp	r5, #0
 800652a:	dd05      	ble.n	8006538 <_dtoa_r+0x9a0>
 800652c:	4639      	mov	r1, r7
 800652e:	462a      	mov	r2, r5
 8006530:	4620      	mov	r0, r4
 8006532:	f000 fb3d 	bl	8006bb0 <__lshift>
 8006536:	4607      	mov	r7, r0
 8006538:	f1b8 0f00 	cmp.w	r8, #0
 800653c:	d05b      	beq.n	80065f6 <_dtoa_r+0xa5e>
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4620      	mov	r0, r4
 8006542:	f000 f923 	bl	800678c <_Balloc>
 8006546:	4605      	mov	r5, r0
 8006548:	b928      	cbnz	r0, 8006556 <_dtoa_r+0x9be>
 800654a:	4b87      	ldr	r3, [pc, #540]	; (8006768 <_dtoa_r+0xbd0>)
 800654c:	4602      	mov	r2, r0
 800654e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006552:	f7ff bb3b 	b.w	8005bcc <_dtoa_r+0x34>
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	3202      	adds	r2, #2
 800655a:	0092      	lsls	r2, r2, #2
 800655c:	f107 010c 	add.w	r1, r7, #12
 8006560:	300c      	adds	r0, #12
 8006562:	f7fe fded 	bl	8005140 <memcpy>
 8006566:	2201      	movs	r2, #1
 8006568:	4629      	mov	r1, r5
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fb20 	bl	8006bb0 <__lshift>
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	f103 0901 	add.w	r9, r3, #1
 8006576:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800657a:	4413      	add	r3, r2
 800657c:	9305      	str	r3, [sp, #20]
 800657e:	f00a 0301 	and.w	r3, sl, #1
 8006582:	46b8      	mov	r8, r7
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	4607      	mov	r7, r0
 8006588:	4631      	mov	r1, r6
 800658a:	ee18 0a10 	vmov	r0, s16
 800658e:	f7ff fa77 	bl	8005a80 <quorem>
 8006592:	4641      	mov	r1, r8
 8006594:	9002      	str	r0, [sp, #8]
 8006596:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800659a:	ee18 0a10 	vmov	r0, s16
 800659e:	f000 fb77 	bl	8006c90 <__mcmp>
 80065a2:	463a      	mov	r2, r7
 80065a4:	9003      	str	r0, [sp, #12]
 80065a6:	4631      	mov	r1, r6
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 fb8d 	bl	8006cc8 <__mdiff>
 80065ae:	68c2      	ldr	r2, [r0, #12]
 80065b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80065b4:	4605      	mov	r5, r0
 80065b6:	bb02      	cbnz	r2, 80065fa <_dtoa_r+0xa62>
 80065b8:	4601      	mov	r1, r0
 80065ba:	ee18 0a10 	vmov	r0, s16
 80065be:	f000 fb67 	bl	8006c90 <__mcmp>
 80065c2:	4602      	mov	r2, r0
 80065c4:	4629      	mov	r1, r5
 80065c6:	4620      	mov	r0, r4
 80065c8:	9207      	str	r2, [sp, #28]
 80065ca:	f000 f91f 	bl	800680c <_Bfree>
 80065ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80065d2:	ea43 0102 	orr.w	r1, r3, r2
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	430b      	orrs	r3, r1
 80065da:	464d      	mov	r5, r9
 80065dc:	d10f      	bne.n	80065fe <_dtoa_r+0xa66>
 80065de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065e2:	d02a      	beq.n	800663a <_dtoa_r+0xaa2>
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	dd02      	ble.n	80065f0 <_dtoa_r+0xa58>
 80065ea:	9b02      	ldr	r3, [sp, #8]
 80065ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80065f0:	f88b a000 	strb.w	sl, [fp]
 80065f4:	e775      	b.n	80064e2 <_dtoa_r+0x94a>
 80065f6:	4638      	mov	r0, r7
 80065f8:	e7ba      	b.n	8006570 <_dtoa_r+0x9d8>
 80065fa:	2201      	movs	r2, #1
 80065fc:	e7e2      	b.n	80065c4 <_dtoa_r+0xa2c>
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	db04      	blt.n	800660e <_dtoa_r+0xa76>
 8006604:	9906      	ldr	r1, [sp, #24]
 8006606:	430b      	orrs	r3, r1
 8006608:	9904      	ldr	r1, [sp, #16]
 800660a:	430b      	orrs	r3, r1
 800660c:	d122      	bne.n	8006654 <_dtoa_r+0xabc>
 800660e:	2a00      	cmp	r2, #0
 8006610:	ddee      	ble.n	80065f0 <_dtoa_r+0xa58>
 8006612:	ee18 1a10 	vmov	r1, s16
 8006616:	2201      	movs	r2, #1
 8006618:	4620      	mov	r0, r4
 800661a:	f000 fac9 	bl	8006bb0 <__lshift>
 800661e:	4631      	mov	r1, r6
 8006620:	ee08 0a10 	vmov	s16, r0
 8006624:	f000 fb34 	bl	8006c90 <__mcmp>
 8006628:	2800      	cmp	r0, #0
 800662a:	dc03      	bgt.n	8006634 <_dtoa_r+0xa9c>
 800662c:	d1e0      	bne.n	80065f0 <_dtoa_r+0xa58>
 800662e:	f01a 0f01 	tst.w	sl, #1
 8006632:	d0dd      	beq.n	80065f0 <_dtoa_r+0xa58>
 8006634:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006638:	d1d7      	bne.n	80065ea <_dtoa_r+0xa52>
 800663a:	2339      	movs	r3, #57	; 0x39
 800663c:	f88b 3000 	strb.w	r3, [fp]
 8006640:	462b      	mov	r3, r5
 8006642:	461d      	mov	r5, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800664a:	2a39      	cmp	r2, #57	; 0x39
 800664c:	d071      	beq.n	8006732 <_dtoa_r+0xb9a>
 800664e:	3201      	adds	r2, #1
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	e746      	b.n	80064e2 <_dtoa_r+0x94a>
 8006654:	2a00      	cmp	r2, #0
 8006656:	dd07      	ble.n	8006668 <_dtoa_r+0xad0>
 8006658:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800665c:	d0ed      	beq.n	800663a <_dtoa_r+0xaa2>
 800665e:	f10a 0301 	add.w	r3, sl, #1
 8006662:	f88b 3000 	strb.w	r3, [fp]
 8006666:	e73c      	b.n	80064e2 <_dtoa_r+0x94a>
 8006668:	9b05      	ldr	r3, [sp, #20]
 800666a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800666e:	4599      	cmp	r9, r3
 8006670:	d047      	beq.n	8006702 <_dtoa_r+0xb6a>
 8006672:	ee18 1a10 	vmov	r1, s16
 8006676:	2300      	movs	r3, #0
 8006678:	220a      	movs	r2, #10
 800667a:	4620      	mov	r0, r4
 800667c:	f000 f8e8 	bl	8006850 <__multadd>
 8006680:	45b8      	cmp	r8, r7
 8006682:	ee08 0a10 	vmov	s16, r0
 8006686:	f04f 0300 	mov.w	r3, #0
 800668a:	f04f 020a 	mov.w	r2, #10
 800668e:	4641      	mov	r1, r8
 8006690:	4620      	mov	r0, r4
 8006692:	d106      	bne.n	80066a2 <_dtoa_r+0xb0a>
 8006694:	f000 f8dc 	bl	8006850 <__multadd>
 8006698:	4680      	mov	r8, r0
 800669a:	4607      	mov	r7, r0
 800669c:	f109 0901 	add.w	r9, r9, #1
 80066a0:	e772      	b.n	8006588 <_dtoa_r+0x9f0>
 80066a2:	f000 f8d5 	bl	8006850 <__multadd>
 80066a6:	4639      	mov	r1, r7
 80066a8:	4680      	mov	r8, r0
 80066aa:	2300      	movs	r3, #0
 80066ac:	220a      	movs	r2, #10
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f8ce 	bl	8006850 <__multadd>
 80066b4:	4607      	mov	r7, r0
 80066b6:	e7f1      	b.n	800669c <_dtoa_r+0xb04>
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	9302      	str	r3, [sp, #8]
 80066bc:	9d01      	ldr	r5, [sp, #4]
 80066be:	ee18 0a10 	vmov	r0, s16
 80066c2:	4631      	mov	r1, r6
 80066c4:	f7ff f9dc 	bl	8005a80 <quorem>
 80066c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80066cc:	9b01      	ldr	r3, [sp, #4]
 80066ce:	f805 ab01 	strb.w	sl, [r5], #1
 80066d2:	1aea      	subs	r2, r5, r3
 80066d4:	9b02      	ldr	r3, [sp, #8]
 80066d6:	4293      	cmp	r3, r2
 80066d8:	dd09      	ble.n	80066ee <_dtoa_r+0xb56>
 80066da:	ee18 1a10 	vmov	r1, s16
 80066de:	2300      	movs	r3, #0
 80066e0:	220a      	movs	r2, #10
 80066e2:	4620      	mov	r0, r4
 80066e4:	f000 f8b4 	bl	8006850 <__multadd>
 80066e8:	ee08 0a10 	vmov	s16, r0
 80066ec:	e7e7      	b.n	80066be <_dtoa_r+0xb26>
 80066ee:	9b02      	ldr	r3, [sp, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bfc8      	it	gt
 80066f4:	461d      	movgt	r5, r3
 80066f6:	9b01      	ldr	r3, [sp, #4]
 80066f8:	bfd8      	it	le
 80066fa:	2501      	movle	r5, #1
 80066fc:	441d      	add	r5, r3
 80066fe:	f04f 0800 	mov.w	r8, #0
 8006702:	ee18 1a10 	vmov	r1, s16
 8006706:	2201      	movs	r2, #1
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fa51 	bl	8006bb0 <__lshift>
 800670e:	4631      	mov	r1, r6
 8006710:	ee08 0a10 	vmov	s16, r0
 8006714:	f000 fabc 	bl	8006c90 <__mcmp>
 8006718:	2800      	cmp	r0, #0
 800671a:	dc91      	bgt.n	8006640 <_dtoa_r+0xaa8>
 800671c:	d102      	bne.n	8006724 <_dtoa_r+0xb8c>
 800671e:	f01a 0f01 	tst.w	sl, #1
 8006722:	d18d      	bne.n	8006640 <_dtoa_r+0xaa8>
 8006724:	462b      	mov	r3, r5
 8006726:	461d      	mov	r5, r3
 8006728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800672c:	2a30      	cmp	r2, #48	; 0x30
 800672e:	d0fa      	beq.n	8006726 <_dtoa_r+0xb8e>
 8006730:	e6d7      	b.n	80064e2 <_dtoa_r+0x94a>
 8006732:	9a01      	ldr	r2, [sp, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d184      	bne.n	8006642 <_dtoa_r+0xaaa>
 8006738:	9b00      	ldr	r3, [sp, #0]
 800673a:	3301      	adds	r3, #1
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	2331      	movs	r3, #49	; 0x31
 8006740:	7013      	strb	r3, [r2, #0]
 8006742:	e6ce      	b.n	80064e2 <_dtoa_r+0x94a>
 8006744:	4b09      	ldr	r3, [pc, #36]	; (800676c <_dtoa_r+0xbd4>)
 8006746:	f7ff ba95 	b.w	8005c74 <_dtoa_r+0xdc>
 800674a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800674c:	2b00      	cmp	r3, #0
 800674e:	f47f aa6e 	bne.w	8005c2e <_dtoa_r+0x96>
 8006752:	4b07      	ldr	r3, [pc, #28]	; (8006770 <_dtoa_r+0xbd8>)
 8006754:	f7ff ba8e 	b.w	8005c74 <_dtoa_r+0xdc>
 8006758:	9b02      	ldr	r3, [sp, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	dcae      	bgt.n	80066bc <_dtoa_r+0xb24>
 800675e:	9b06      	ldr	r3, [sp, #24]
 8006760:	2b02      	cmp	r3, #2
 8006762:	f73f aea8 	bgt.w	80064b6 <_dtoa_r+0x91e>
 8006766:	e7a9      	b.n	80066bc <_dtoa_r+0xb24>
 8006768:	080080a7 	.word	0x080080a7
 800676c:	08008004 	.word	0x08008004
 8006770:	08008028 	.word	0x08008028

08006774 <_localeconv_r>:
 8006774:	4800      	ldr	r0, [pc, #0]	; (8006778 <_localeconv_r+0x4>)
 8006776:	4770      	bx	lr
 8006778:	20000164 	.word	0x20000164

0800677c <malloc>:
 800677c:	4b02      	ldr	r3, [pc, #8]	; (8006788 <malloc+0xc>)
 800677e:	4601      	mov	r1, r0
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	f000 bc09 	b.w	8006f98 <_malloc_r>
 8006786:	bf00      	nop
 8006788:	20000010 	.word	0x20000010

0800678c <_Balloc>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006790:	4604      	mov	r4, r0
 8006792:	460d      	mov	r5, r1
 8006794:	b976      	cbnz	r6, 80067b4 <_Balloc+0x28>
 8006796:	2010      	movs	r0, #16
 8006798:	f7ff fff0 	bl	800677c <malloc>
 800679c:	4602      	mov	r2, r0
 800679e:	6260      	str	r0, [r4, #36]	; 0x24
 80067a0:	b920      	cbnz	r0, 80067ac <_Balloc+0x20>
 80067a2:	4b18      	ldr	r3, [pc, #96]	; (8006804 <_Balloc+0x78>)
 80067a4:	4818      	ldr	r0, [pc, #96]	; (8006808 <_Balloc+0x7c>)
 80067a6:	2166      	movs	r1, #102	; 0x66
 80067a8:	f000 fdd6 	bl	8007358 <__assert_func>
 80067ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067b0:	6006      	str	r6, [r0, #0]
 80067b2:	60c6      	str	r6, [r0, #12]
 80067b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80067b6:	68f3      	ldr	r3, [r6, #12]
 80067b8:	b183      	cbz	r3, 80067dc <_Balloc+0x50>
 80067ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067c2:	b9b8      	cbnz	r0, 80067f4 <_Balloc+0x68>
 80067c4:	2101      	movs	r1, #1
 80067c6:	fa01 f605 	lsl.w	r6, r1, r5
 80067ca:	1d72      	adds	r2, r6, #5
 80067cc:	0092      	lsls	r2, r2, #2
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 fb60 	bl	8006e94 <_calloc_r>
 80067d4:	b160      	cbz	r0, 80067f0 <_Balloc+0x64>
 80067d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067da:	e00e      	b.n	80067fa <_Balloc+0x6e>
 80067dc:	2221      	movs	r2, #33	; 0x21
 80067de:	2104      	movs	r1, #4
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 fb57 	bl	8006e94 <_calloc_r>
 80067e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067e8:	60f0      	str	r0, [r6, #12]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e4      	bne.n	80067ba <_Balloc+0x2e>
 80067f0:	2000      	movs	r0, #0
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
 80067f4:	6802      	ldr	r2, [r0, #0]
 80067f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067fa:	2300      	movs	r3, #0
 80067fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006800:	e7f7      	b.n	80067f2 <_Balloc+0x66>
 8006802:	bf00      	nop
 8006804:	08008035 	.word	0x08008035
 8006808:	080080b8 	.word	0x080080b8

0800680c <_Bfree>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006810:	4605      	mov	r5, r0
 8006812:	460c      	mov	r4, r1
 8006814:	b976      	cbnz	r6, 8006834 <_Bfree+0x28>
 8006816:	2010      	movs	r0, #16
 8006818:	f7ff ffb0 	bl	800677c <malloc>
 800681c:	4602      	mov	r2, r0
 800681e:	6268      	str	r0, [r5, #36]	; 0x24
 8006820:	b920      	cbnz	r0, 800682c <_Bfree+0x20>
 8006822:	4b09      	ldr	r3, [pc, #36]	; (8006848 <_Bfree+0x3c>)
 8006824:	4809      	ldr	r0, [pc, #36]	; (800684c <_Bfree+0x40>)
 8006826:	218a      	movs	r1, #138	; 0x8a
 8006828:	f000 fd96 	bl	8007358 <__assert_func>
 800682c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006830:	6006      	str	r6, [r0, #0]
 8006832:	60c6      	str	r6, [r0, #12]
 8006834:	b13c      	cbz	r4, 8006846 <_Bfree+0x3a>
 8006836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006838:	6862      	ldr	r2, [r4, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006840:	6021      	str	r1, [r4, #0]
 8006842:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	08008035 	.word	0x08008035
 800684c:	080080b8 	.word	0x080080b8

08006850 <__multadd>:
 8006850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006854:	690d      	ldr	r5, [r1, #16]
 8006856:	4607      	mov	r7, r0
 8006858:	460c      	mov	r4, r1
 800685a:	461e      	mov	r6, r3
 800685c:	f101 0c14 	add.w	ip, r1, #20
 8006860:	2000      	movs	r0, #0
 8006862:	f8dc 3000 	ldr.w	r3, [ip]
 8006866:	b299      	uxth	r1, r3
 8006868:	fb02 6101 	mla	r1, r2, r1, r6
 800686c:	0c1e      	lsrs	r6, r3, #16
 800686e:	0c0b      	lsrs	r3, r1, #16
 8006870:	fb02 3306 	mla	r3, r2, r6, r3
 8006874:	b289      	uxth	r1, r1
 8006876:	3001      	adds	r0, #1
 8006878:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800687c:	4285      	cmp	r5, r0
 800687e:	f84c 1b04 	str.w	r1, [ip], #4
 8006882:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006886:	dcec      	bgt.n	8006862 <__multadd+0x12>
 8006888:	b30e      	cbz	r6, 80068ce <__multadd+0x7e>
 800688a:	68a3      	ldr	r3, [r4, #8]
 800688c:	42ab      	cmp	r3, r5
 800688e:	dc19      	bgt.n	80068c4 <__multadd+0x74>
 8006890:	6861      	ldr	r1, [r4, #4]
 8006892:	4638      	mov	r0, r7
 8006894:	3101      	adds	r1, #1
 8006896:	f7ff ff79 	bl	800678c <_Balloc>
 800689a:	4680      	mov	r8, r0
 800689c:	b928      	cbnz	r0, 80068aa <__multadd+0x5a>
 800689e:	4602      	mov	r2, r0
 80068a0:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <__multadd+0x84>)
 80068a2:	480d      	ldr	r0, [pc, #52]	; (80068d8 <__multadd+0x88>)
 80068a4:	21b5      	movs	r1, #181	; 0xb5
 80068a6:	f000 fd57 	bl	8007358 <__assert_func>
 80068aa:	6922      	ldr	r2, [r4, #16]
 80068ac:	3202      	adds	r2, #2
 80068ae:	f104 010c 	add.w	r1, r4, #12
 80068b2:	0092      	lsls	r2, r2, #2
 80068b4:	300c      	adds	r0, #12
 80068b6:	f7fe fc43 	bl	8005140 <memcpy>
 80068ba:	4621      	mov	r1, r4
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff ffa5 	bl	800680c <_Bfree>
 80068c2:	4644      	mov	r4, r8
 80068c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068c8:	3501      	adds	r5, #1
 80068ca:	615e      	str	r6, [r3, #20]
 80068cc:	6125      	str	r5, [r4, #16]
 80068ce:	4620      	mov	r0, r4
 80068d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d4:	080080a7 	.word	0x080080a7
 80068d8:	080080b8 	.word	0x080080b8

080068dc <__hi0bits>:
 80068dc:	0c03      	lsrs	r3, r0, #16
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	b9d3      	cbnz	r3, 8006918 <__hi0bits+0x3c>
 80068e2:	0400      	lsls	r0, r0, #16
 80068e4:	2310      	movs	r3, #16
 80068e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80068ea:	bf04      	itt	eq
 80068ec:	0200      	lsleq	r0, r0, #8
 80068ee:	3308      	addeq	r3, #8
 80068f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80068f4:	bf04      	itt	eq
 80068f6:	0100      	lsleq	r0, r0, #4
 80068f8:	3304      	addeq	r3, #4
 80068fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068fe:	bf04      	itt	eq
 8006900:	0080      	lsleq	r0, r0, #2
 8006902:	3302      	addeq	r3, #2
 8006904:	2800      	cmp	r0, #0
 8006906:	db05      	blt.n	8006914 <__hi0bits+0x38>
 8006908:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800690c:	f103 0301 	add.w	r3, r3, #1
 8006910:	bf08      	it	eq
 8006912:	2320      	moveq	r3, #32
 8006914:	4618      	mov	r0, r3
 8006916:	4770      	bx	lr
 8006918:	2300      	movs	r3, #0
 800691a:	e7e4      	b.n	80068e6 <__hi0bits+0xa>

0800691c <__lo0bits>:
 800691c:	6803      	ldr	r3, [r0, #0]
 800691e:	f013 0207 	ands.w	r2, r3, #7
 8006922:	4601      	mov	r1, r0
 8006924:	d00b      	beq.n	800693e <__lo0bits+0x22>
 8006926:	07da      	lsls	r2, r3, #31
 8006928:	d423      	bmi.n	8006972 <__lo0bits+0x56>
 800692a:	0798      	lsls	r0, r3, #30
 800692c:	bf49      	itett	mi
 800692e:	085b      	lsrmi	r3, r3, #1
 8006930:	089b      	lsrpl	r3, r3, #2
 8006932:	2001      	movmi	r0, #1
 8006934:	600b      	strmi	r3, [r1, #0]
 8006936:	bf5c      	itt	pl
 8006938:	600b      	strpl	r3, [r1, #0]
 800693a:	2002      	movpl	r0, #2
 800693c:	4770      	bx	lr
 800693e:	b298      	uxth	r0, r3
 8006940:	b9a8      	cbnz	r0, 800696e <__lo0bits+0x52>
 8006942:	0c1b      	lsrs	r3, r3, #16
 8006944:	2010      	movs	r0, #16
 8006946:	b2da      	uxtb	r2, r3
 8006948:	b90a      	cbnz	r2, 800694e <__lo0bits+0x32>
 800694a:	3008      	adds	r0, #8
 800694c:	0a1b      	lsrs	r3, r3, #8
 800694e:	071a      	lsls	r2, r3, #28
 8006950:	bf04      	itt	eq
 8006952:	091b      	lsreq	r3, r3, #4
 8006954:	3004      	addeq	r0, #4
 8006956:	079a      	lsls	r2, r3, #30
 8006958:	bf04      	itt	eq
 800695a:	089b      	lsreq	r3, r3, #2
 800695c:	3002      	addeq	r0, #2
 800695e:	07da      	lsls	r2, r3, #31
 8006960:	d403      	bmi.n	800696a <__lo0bits+0x4e>
 8006962:	085b      	lsrs	r3, r3, #1
 8006964:	f100 0001 	add.w	r0, r0, #1
 8006968:	d005      	beq.n	8006976 <__lo0bits+0x5a>
 800696a:	600b      	str	r3, [r1, #0]
 800696c:	4770      	bx	lr
 800696e:	4610      	mov	r0, r2
 8006970:	e7e9      	b.n	8006946 <__lo0bits+0x2a>
 8006972:	2000      	movs	r0, #0
 8006974:	4770      	bx	lr
 8006976:	2020      	movs	r0, #32
 8006978:	4770      	bx	lr
	...

0800697c <__i2b>:
 800697c:	b510      	push	{r4, lr}
 800697e:	460c      	mov	r4, r1
 8006980:	2101      	movs	r1, #1
 8006982:	f7ff ff03 	bl	800678c <_Balloc>
 8006986:	4602      	mov	r2, r0
 8006988:	b928      	cbnz	r0, 8006996 <__i2b+0x1a>
 800698a:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <__i2b+0x24>)
 800698c:	4805      	ldr	r0, [pc, #20]	; (80069a4 <__i2b+0x28>)
 800698e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006992:	f000 fce1 	bl	8007358 <__assert_func>
 8006996:	2301      	movs	r3, #1
 8006998:	6144      	str	r4, [r0, #20]
 800699a:	6103      	str	r3, [r0, #16]
 800699c:	bd10      	pop	{r4, pc}
 800699e:	bf00      	nop
 80069a0:	080080a7 	.word	0x080080a7
 80069a4:	080080b8 	.word	0x080080b8

080069a8 <__multiply>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	4691      	mov	r9, r2
 80069ae:	690a      	ldr	r2, [r1, #16]
 80069b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	bfb8      	it	lt
 80069b8:	460b      	movlt	r3, r1
 80069ba:	460c      	mov	r4, r1
 80069bc:	bfbc      	itt	lt
 80069be:	464c      	movlt	r4, r9
 80069c0:	4699      	movlt	r9, r3
 80069c2:	6927      	ldr	r7, [r4, #16]
 80069c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069c8:	68a3      	ldr	r3, [r4, #8]
 80069ca:	6861      	ldr	r1, [r4, #4]
 80069cc:	eb07 060a 	add.w	r6, r7, sl
 80069d0:	42b3      	cmp	r3, r6
 80069d2:	b085      	sub	sp, #20
 80069d4:	bfb8      	it	lt
 80069d6:	3101      	addlt	r1, #1
 80069d8:	f7ff fed8 	bl	800678c <_Balloc>
 80069dc:	b930      	cbnz	r0, 80069ec <__multiply+0x44>
 80069de:	4602      	mov	r2, r0
 80069e0:	4b44      	ldr	r3, [pc, #272]	; (8006af4 <__multiply+0x14c>)
 80069e2:	4845      	ldr	r0, [pc, #276]	; (8006af8 <__multiply+0x150>)
 80069e4:	f240 115d 	movw	r1, #349	; 0x15d
 80069e8:	f000 fcb6 	bl	8007358 <__assert_func>
 80069ec:	f100 0514 	add.w	r5, r0, #20
 80069f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069f4:	462b      	mov	r3, r5
 80069f6:	2200      	movs	r2, #0
 80069f8:	4543      	cmp	r3, r8
 80069fa:	d321      	bcc.n	8006a40 <__multiply+0x98>
 80069fc:	f104 0314 	add.w	r3, r4, #20
 8006a00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a04:	f109 0314 	add.w	r3, r9, #20
 8006a08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a0c:	9202      	str	r2, [sp, #8]
 8006a0e:	1b3a      	subs	r2, r7, r4
 8006a10:	3a15      	subs	r2, #21
 8006a12:	f022 0203 	bic.w	r2, r2, #3
 8006a16:	3204      	adds	r2, #4
 8006a18:	f104 0115 	add.w	r1, r4, #21
 8006a1c:	428f      	cmp	r7, r1
 8006a1e:	bf38      	it	cc
 8006a20:	2204      	movcc	r2, #4
 8006a22:	9201      	str	r2, [sp, #4]
 8006a24:	9a02      	ldr	r2, [sp, #8]
 8006a26:	9303      	str	r3, [sp, #12]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d80c      	bhi.n	8006a46 <__multiply+0x9e>
 8006a2c:	2e00      	cmp	r6, #0
 8006a2e:	dd03      	ble.n	8006a38 <__multiply+0x90>
 8006a30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d05a      	beq.n	8006aee <__multiply+0x146>
 8006a38:	6106      	str	r6, [r0, #16]
 8006a3a:	b005      	add	sp, #20
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	f843 2b04 	str.w	r2, [r3], #4
 8006a44:	e7d8      	b.n	80069f8 <__multiply+0x50>
 8006a46:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a4a:	f1ba 0f00 	cmp.w	sl, #0
 8006a4e:	d024      	beq.n	8006a9a <__multiply+0xf2>
 8006a50:	f104 0e14 	add.w	lr, r4, #20
 8006a54:	46a9      	mov	r9, r5
 8006a56:	f04f 0c00 	mov.w	ip, #0
 8006a5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a5e:	f8d9 1000 	ldr.w	r1, [r9]
 8006a62:	fa1f fb82 	uxth.w	fp, r2
 8006a66:	b289      	uxth	r1, r1
 8006a68:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a70:	f8d9 2000 	ldr.w	r2, [r9]
 8006a74:	4461      	add	r1, ip
 8006a76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a82:	b289      	uxth	r1, r1
 8006a84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a88:	4577      	cmp	r7, lr
 8006a8a:	f849 1b04 	str.w	r1, [r9], #4
 8006a8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a92:	d8e2      	bhi.n	8006a5a <__multiply+0xb2>
 8006a94:	9a01      	ldr	r2, [sp, #4]
 8006a96:	f845 c002 	str.w	ip, [r5, r2]
 8006a9a:	9a03      	ldr	r2, [sp, #12]
 8006a9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	f1b9 0f00 	cmp.w	r9, #0
 8006aa6:	d020      	beq.n	8006aea <__multiply+0x142>
 8006aa8:	6829      	ldr	r1, [r5, #0]
 8006aaa:	f104 0c14 	add.w	ip, r4, #20
 8006aae:	46ae      	mov	lr, r5
 8006ab0:	f04f 0a00 	mov.w	sl, #0
 8006ab4:	f8bc b000 	ldrh.w	fp, [ip]
 8006ab8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006abc:	fb09 220b 	mla	r2, r9, fp, r2
 8006ac0:	4492      	add	sl, r2
 8006ac2:	b289      	uxth	r1, r1
 8006ac4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ac8:	f84e 1b04 	str.w	r1, [lr], #4
 8006acc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ad0:	f8be 1000 	ldrh.w	r1, [lr]
 8006ad4:	0c12      	lsrs	r2, r2, #16
 8006ad6:	fb09 1102 	mla	r1, r9, r2, r1
 8006ada:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006ade:	4567      	cmp	r7, ip
 8006ae0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ae4:	d8e6      	bhi.n	8006ab4 <__multiply+0x10c>
 8006ae6:	9a01      	ldr	r2, [sp, #4]
 8006ae8:	50a9      	str	r1, [r5, r2]
 8006aea:	3504      	adds	r5, #4
 8006aec:	e79a      	b.n	8006a24 <__multiply+0x7c>
 8006aee:	3e01      	subs	r6, #1
 8006af0:	e79c      	b.n	8006a2c <__multiply+0x84>
 8006af2:	bf00      	nop
 8006af4:	080080a7 	.word	0x080080a7
 8006af8:	080080b8 	.word	0x080080b8

08006afc <__pow5mult>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	4615      	mov	r5, r2
 8006b02:	f012 0203 	ands.w	r2, r2, #3
 8006b06:	4606      	mov	r6, r0
 8006b08:	460f      	mov	r7, r1
 8006b0a:	d007      	beq.n	8006b1c <__pow5mult+0x20>
 8006b0c:	4c25      	ldr	r4, [pc, #148]	; (8006ba4 <__pow5mult+0xa8>)
 8006b0e:	3a01      	subs	r2, #1
 8006b10:	2300      	movs	r3, #0
 8006b12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b16:	f7ff fe9b 	bl	8006850 <__multadd>
 8006b1a:	4607      	mov	r7, r0
 8006b1c:	10ad      	asrs	r5, r5, #2
 8006b1e:	d03d      	beq.n	8006b9c <__pow5mult+0xa0>
 8006b20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b22:	b97c      	cbnz	r4, 8006b44 <__pow5mult+0x48>
 8006b24:	2010      	movs	r0, #16
 8006b26:	f7ff fe29 	bl	800677c <malloc>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	6270      	str	r0, [r6, #36]	; 0x24
 8006b2e:	b928      	cbnz	r0, 8006b3c <__pow5mult+0x40>
 8006b30:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <__pow5mult+0xac>)
 8006b32:	481e      	ldr	r0, [pc, #120]	; (8006bac <__pow5mult+0xb0>)
 8006b34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006b38:	f000 fc0e 	bl	8007358 <__assert_func>
 8006b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b40:	6004      	str	r4, [r0, #0]
 8006b42:	60c4      	str	r4, [r0, #12]
 8006b44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b4c:	b94c      	cbnz	r4, 8006b62 <__pow5mult+0x66>
 8006b4e:	f240 2171 	movw	r1, #625	; 0x271
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff ff12 	bl	800697c <__i2b>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b5e:	4604      	mov	r4, r0
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	f04f 0900 	mov.w	r9, #0
 8006b66:	07eb      	lsls	r3, r5, #31
 8006b68:	d50a      	bpl.n	8006b80 <__pow5mult+0x84>
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f7ff ff1a 	bl	80069a8 <__multiply>
 8006b74:	4639      	mov	r1, r7
 8006b76:	4680      	mov	r8, r0
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f7ff fe47 	bl	800680c <_Bfree>
 8006b7e:	4647      	mov	r7, r8
 8006b80:	106d      	asrs	r5, r5, #1
 8006b82:	d00b      	beq.n	8006b9c <__pow5mult+0xa0>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	b938      	cbnz	r0, 8006b98 <__pow5mult+0x9c>
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7ff ff0b 	bl	80069a8 <__multiply>
 8006b92:	6020      	str	r0, [r4, #0]
 8006b94:	f8c0 9000 	str.w	r9, [r0]
 8006b98:	4604      	mov	r4, r0
 8006b9a:	e7e4      	b.n	8006b66 <__pow5mult+0x6a>
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	bf00      	nop
 8006ba4:	08008208 	.word	0x08008208
 8006ba8:	08008035 	.word	0x08008035
 8006bac:	080080b8 	.word	0x080080b8

08006bb0 <__lshift>:
 8006bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	6849      	ldr	r1, [r1, #4]
 8006bb8:	6923      	ldr	r3, [r4, #16]
 8006bba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bbe:	68a3      	ldr	r3, [r4, #8]
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	4691      	mov	r9, r2
 8006bc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bc8:	f108 0601 	add.w	r6, r8, #1
 8006bcc:	42b3      	cmp	r3, r6
 8006bce:	db0b      	blt.n	8006be8 <__lshift+0x38>
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f7ff fddb 	bl	800678c <_Balloc>
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	b948      	cbnz	r0, 8006bee <__lshift+0x3e>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4b2a      	ldr	r3, [pc, #168]	; (8006c88 <__lshift+0xd8>)
 8006bde:	482b      	ldr	r0, [pc, #172]	; (8006c8c <__lshift+0xdc>)
 8006be0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006be4:	f000 fbb8 	bl	8007358 <__assert_func>
 8006be8:	3101      	adds	r1, #1
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	e7ee      	b.n	8006bcc <__lshift+0x1c>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f100 0114 	add.w	r1, r0, #20
 8006bf4:	f100 0210 	add.w	r2, r0, #16
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	4553      	cmp	r3, sl
 8006bfc:	db37      	blt.n	8006c6e <__lshift+0xbe>
 8006bfe:	6920      	ldr	r0, [r4, #16]
 8006c00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c04:	f104 0314 	add.w	r3, r4, #20
 8006c08:	f019 091f 	ands.w	r9, r9, #31
 8006c0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006c14:	d02f      	beq.n	8006c76 <__lshift+0xc6>
 8006c16:	f1c9 0e20 	rsb	lr, r9, #32
 8006c1a:	468a      	mov	sl, r1
 8006c1c:	f04f 0c00 	mov.w	ip, #0
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	fa02 f209 	lsl.w	r2, r2, r9
 8006c26:	ea42 020c 	orr.w	r2, r2, ip
 8006c2a:	f84a 2b04 	str.w	r2, [sl], #4
 8006c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c32:	4298      	cmp	r0, r3
 8006c34:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006c38:	d8f2      	bhi.n	8006c20 <__lshift+0x70>
 8006c3a:	1b03      	subs	r3, r0, r4
 8006c3c:	3b15      	subs	r3, #21
 8006c3e:	f023 0303 	bic.w	r3, r3, #3
 8006c42:	3304      	adds	r3, #4
 8006c44:	f104 0215 	add.w	r2, r4, #21
 8006c48:	4290      	cmp	r0, r2
 8006c4a:	bf38      	it	cc
 8006c4c:	2304      	movcc	r3, #4
 8006c4e:	f841 c003 	str.w	ip, [r1, r3]
 8006c52:	f1bc 0f00 	cmp.w	ip, #0
 8006c56:	d001      	beq.n	8006c5c <__lshift+0xac>
 8006c58:	f108 0602 	add.w	r6, r8, #2
 8006c5c:	3e01      	subs	r6, #1
 8006c5e:	4638      	mov	r0, r7
 8006c60:	612e      	str	r6, [r5, #16]
 8006c62:	4621      	mov	r1, r4
 8006c64:	f7ff fdd2 	bl	800680c <_Bfree>
 8006c68:	4628      	mov	r0, r5
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c72:	3301      	adds	r3, #1
 8006c74:	e7c1      	b.n	8006bfa <__lshift+0x4a>
 8006c76:	3904      	subs	r1, #4
 8006c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c80:	4298      	cmp	r0, r3
 8006c82:	d8f9      	bhi.n	8006c78 <__lshift+0xc8>
 8006c84:	e7ea      	b.n	8006c5c <__lshift+0xac>
 8006c86:	bf00      	nop
 8006c88:	080080a7 	.word	0x080080a7
 8006c8c:	080080b8 	.word	0x080080b8

08006c90 <__mcmp>:
 8006c90:	b530      	push	{r4, r5, lr}
 8006c92:	6902      	ldr	r2, [r0, #16]
 8006c94:	690c      	ldr	r4, [r1, #16]
 8006c96:	1b12      	subs	r2, r2, r4
 8006c98:	d10e      	bne.n	8006cb8 <__mcmp+0x28>
 8006c9a:	f100 0314 	add.w	r3, r0, #20
 8006c9e:	3114      	adds	r1, #20
 8006ca0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ca4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ca8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006cac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006cb0:	42a5      	cmp	r5, r4
 8006cb2:	d003      	beq.n	8006cbc <__mcmp+0x2c>
 8006cb4:	d305      	bcc.n	8006cc2 <__mcmp+0x32>
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4610      	mov	r0, r2
 8006cba:	bd30      	pop	{r4, r5, pc}
 8006cbc:	4283      	cmp	r3, r0
 8006cbe:	d3f3      	bcc.n	8006ca8 <__mcmp+0x18>
 8006cc0:	e7fa      	b.n	8006cb8 <__mcmp+0x28>
 8006cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc6:	e7f7      	b.n	8006cb8 <__mcmp+0x28>

08006cc8 <__mdiff>:
 8006cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	460c      	mov	r4, r1
 8006cce:	4606      	mov	r6, r0
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4690      	mov	r8, r2
 8006cd6:	f7ff ffdb 	bl	8006c90 <__mcmp>
 8006cda:	1e05      	subs	r5, r0, #0
 8006cdc:	d110      	bne.n	8006d00 <__mdiff+0x38>
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f7ff fd53 	bl	800678c <_Balloc>
 8006ce6:	b930      	cbnz	r0, 8006cf6 <__mdiff+0x2e>
 8006ce8:	4b3a      	ldr	r3, [pc, #232]	; (8006dd4 <__mdiff+0x10c>)
 8006cea:	4602      	mov	r2, r0
 8006cec:	f240 2132 	movw	r1, #562	; 0x232
 8006cf0:	4839      	ldr	r0, [pc, #228]	; (8006dd8 <__mdiff+0x110>)
 8006cf2:	f000 fb31 	bl	8007358 <__assert_func>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d00:	bfa4      	itt	ge
 8006d02:	4643      	movge	r3, r8
 8006d04:	46a0      	movge	r8, r4
 8006d06:	4630      	mov	r0, r6
 8006d08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d0c:	bfa6      	itte	ge
 8006d0e:	461c      	movge	r4, r3
 8006d10:	2500      	movge	r5, #0
 8006d12:	2501      	movlt	r5, #1
 8006d14:	f7ff fd3a 	bl	800678c <_Balloc>
 8006d18:	b920      	cbnz	r0, 8006d24 <__mdiff+0x5c>
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <__mdiff+0x10c>)
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006d22:	e7e5      	b.n	8006cf0 <__mdiff+0x28>
 8006d24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d28:	6926      	ldr	r6, [r4, #16]
 8006d2a:	60c5      	str	r5, [r0, #12]
 8006d2c:	f104 0914 	add.w	r9, r4, #20
 8006d30:	f108 0514 	add.w	r5, r8, #20
 8006d34:	f100 0e14 	add.w	lr, r0, #20
 8006d38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d40:	f108 0210 	add.w	r2, r8, #16
 8006d44:	46f2      	mov	sl, lr
 8006d46:	2100      	movs	r1, #0
 8006d48:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d50:	fa1f f883 	uxth.w	r8, r3
 8006d54:	fa11 f18b 	uxtah	r1, r1, fp
 8006d58:	0c1b      	lsrs	r3, r3, #16
 8006d5a:	eba1 0808 	sub.w	r8, r1, r8
 8006d5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d66:	fa1f f888 	uxth.w	r8, r8
 8006d6a:	1419      	asrs	r1, r3, #16
 8006d6c:	454e      	cmp	r6, r9
 8006d6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d72:	f84a 3b04 	str.w	r3, [sl], #4
 8006d76:	d8e7      	bhi.n	8006d48 <__mdiff+0x80>
 8006d78:	1b33      	subs	r3, r6, r4
 8006d7a:	3b15      	subs	r3, #21
 8006d7c:	f023 0303 	bic.w	r3, r3, #3
 8006d80:	3304      	adds	r3, #4
 8006d82:	3415      	adds	r4, #21
 8006d84:	42a6      	cmp	r6, r4
 8006d86:	bf38      	it	cc
 8006d88:	2304      	movcc	r3, #4
 8006d8a:	441d      	add	r5, r3
 8006d8c:	4473      	add	r3, lr
 8006d8e:	469e      	mov	lr, r3
 8006d90:	462e      	mov	r6, r5
 8006d92:	4566      	cmp	r6, ip
 8006d94:	d30e      	bcc.n	8006db4 <__mdiff+0xec>
 8006d96:	f10c 0203 	add.w	r2, ip, #3
 8006d9a:	1b52      	subs	r2, r2, r5
 8006d9c:	f022 0203 	bic.w	r2, r2, #3
 8006da0:	3d03      	subs	r5, #3
 8006da2:	45ac      	cmp	ip, r5
 8006da4:	bf38      	it	cc
 8006da6:	2200      	movcc	r2, #0
 8006da8:	441a      	add	r2, r3
 8006daa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006dae:	b17b      	cbz	r3, 8006dd0 <__mdiff+0x108>
 8006db0:	6107      	str	r7, [r0, #16]
 8006db2:	e7a3      	b.n	8006cfc <__mdiff+0x34>
 8006db4:	f856 8b04 	ldr.w	r8, [r6], #4
 8006db8:	fa11 f288 	uxtah	r2, r1, r8
 8006dbc:	1414      	asrs	r4, r2, #16
 8006dbe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006dc2:	b292      	uxth	r2, r2
 8006dc4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006dc8:	f84e 2b04 	str.w	r2, [lr], #4
 8006dcc:	1421      	asrs	r1, r4, #16
 8006dce:	e7e0      	b.n	8006d92 <__mdiff+0xca>
 8006dd0:	3f01      	subs	r7, #1
 8006dd2:	e7ea      	b.n	8006daa <__mdiff+0xe2>
 8006dd4:	080080a7 	.word	0x080080a7
 8006dd8:	080080b8 	.word	0x080080b8

08006ddc <__d2b>:
 8006ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	4689      	mov	r9, r1
 8006de2:	2101      	movs	r1, #1
 8006de4:	ec57 6b10 	vmov	r6, r7, d0
 8006de8:	4690      	mov	r8, r2
 8006dea:	f7ff fccf 	bl	800678c <_Balloc>
 8006dee:	4604      	mov	r4, r0
 8006df0:	b930      	cbnz	r0, 8006e00 <__d2b+0x24>
 8006df2:	4602      	mov	r2, r0
 8006df4:	4b25      	ldr	r3, [pc, #148]	; (8006e8c <__d2b+0xb0>)
 8006df6:	4826      	ldr	r0, [pc, #152]	; (8006e90 <__d2b+0xb4>)
 8006df8:	f240 310a 	movw	r1, #778	; 0x30a
 8006dfc:	f000 faac 	bl	8007358 <__assert_func>
 8006e00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006e04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e08:	bb35      	cbnz	r5, 8006e58 <__d2b+0x7c>
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	d028      	beq.n	8006e62 <__d2b+0x86>
 8006e10:	4668      	mov	r0, sp
 8006e12:	9600      	str	r6, [sp, #0]
 8006e14:	f7ff fd82 	bl	800691c <__lo0bits>
 8006e18:	9900      	ldr	r1, [sp, #0]
 8006e1a:	b300      	cbz	r0, 8006e5e <__d2b+0x82>
 8006e1c:	9a01      	ldr	r2, [sp, #4]
 8006e1e:	f1c0 0320 	rsb	r3, r0, #32
 8006e22:	fa02 f303 	lsl.w	r3, r2, r3
 8006e26:	430b      	orrs	r3, r1
 8006e28:	40c2      	lsrs	r2, r0
 8006e2a:	6163      	str	r3, [r4, #20]
 8006e2c:	9201      	str	r2, [sp, #4]
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	61a3      	str	r3, [r4, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bf14      	ite	ne
 8006e36:	2202      	movne	r2, #2
 8006e38:	2201      	moveq	r2, #1
 8006e3a:	6122      	str	r2, [r4, #16]
 8006e3c:	b1d5      	cbz	r5, 8006e74 <__d2b+0x98>
 8006e3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e42:	4405      	add	r5, r0
 8006e44:	f8c9 5000 	str.w	r5, [r9]
 8006e48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e4c:	f8c8 0000 	str.w	r0, [r8]
 8006e50:	4620      	mov	r0, r4
 8006e52:	b003      	add	sp, #12
 8006e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e5c:	e7d5      	b.n	8006e0a <__d2b+0x2e>
 8006e5e:	6161      	str	r1, [r4, #20]
 8006e60:	e7e5      	b.n	8006e2e <__d2b+0x52>
 8006e62:	a801      	add	r0, sp, #4
 8006e64:	f7ff fd5a 	bl	800691c <__lo0bits>
 8006e68:	9b01      	ldr	r3, [sp, #4]
 8006e6a:	6163      	str	r3, [r4, #20]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	6122      	str	r2, [r4, #16]
 8006e70:	3020      	adds	r0, #32
 8006e72:	e7e3      	b.n	8006e3c <__d2b+0x60>
 8006e74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e7c:	f8c9 0000 	str.w	r0, [r9]
 8006e80:	6918      	ldr	r0, [r3, #16]
 8006e82:	f7ff fd2b 	bl	80068dc <__hi0bits>
 8006e86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e8a:	e7df      	b.n	8006e4c <__d2b+0x70>
 8006e8c:	080080a7 	.word	0x080080a7
 8006e90:	080080b8 	.word	0x080080b8

08006e94 <_calloc_r>:
 8006e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e96:	fba1 2402 	umull	r2, r4, r1, r2
 8006e9a:	b94c      	cbnz	r4, 8006eb0 <_calloc_r+0x1c>
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	9201      	str	r2, [sp, #4]
 8006ea0:	f000 f87a 	bl	8006f98 <_malloc_r>
 8006ea4:	9a01      	ldr	r2, [sp, #4]
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	b930      	cbnz	r0, 8006eb8 <_calloc_r+0x24>
 8006eaa:	4628      	mov	r0, r5
 8006eac:	b003      	add	sp, #12
 8006eae:	bd30      	pop	{r4, r5, pc}
 8006eb0:	220c      	movs	r2, #12
 8006eb2:	6002      	str	r2, [r0, #0]
 8006eb4:	2500      	movs	r5, #0
 8006eb6:	e7f8      	b.n	8006eaa <_calloc_r+0x16>
 8006eb8:	4621      	mov	r1, r4
 8006eba:	f7fe f94f 	bl	800515c <memset>
 8006ebe:	e7f4      	b.n	8006eaa <_calloc_r+0x16>

08006ec0 <_free_r>:
 8006ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ec2:	2900      	cmp	r1, #0
 8006ec4:	d044      	beq.n	8006f50 <_free_r+0x90>
 8006ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eca:	9001      	str	r0, [sp, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f1a1 0404 	sub.w	r4, r1, #4
 8006ed2:	bfb8      	it	lt
 8006ed4:	18e4      	addlt	r4, r4, r3
 8006ed6:	f000 fa9b 	bl	8007410 <__malloc_lock>
 8006eda:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <_free_r+0x94>)
 8006edc:	9801      	ldr	r0, [sp, #4]
 8006ede:	6813      	ldr	r3, [r2, #0]
 8006ee0:	b933      	cbnz	r3, 8006ef0 <_free_r+0x30>
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	6014      	str	r4, [r2, #0]
 8006ee6:	b003      	add	sp, #12
 8006ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eec:	f000 ba96 	b.w	800741c <__malloc_unlock>
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d908      	bls.n	8006f06 <_free_r+0x46>
 8006ef4:	6825      	ldr	r5, [r4, #0]
 8006ef6:	1961      	adds	r1, r4, r5
 8006ef8:	428b      	cmp	r3, r1
 8006efa:	bf01      	itttt	eq
 8006efc:	6819      	ldreq	r1, [r3, #0]
 8006efe:	685b      	ldreq	r3, [r3, #4]
 8006f00:	1949      	addeq	r1, r1, r5
 8006f02:	6021      	streq	r1, [r4, #0]
 8006f04:	e7ed      	b.n	8006ee2 <_free_r+0x22>
 8006f06:	461a      	mov	r2, r3
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	b10b      	cbz	r3, 8006f10 <_free_r+0x50>
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d9fa      	bls.n	8006f06 <_free_r+0x46>
 8006f10:	6811      	ldr	r1, [r2, #0]
 8006f12:	1855      	adds	r5, r2, r1
 8006f14:	42a5      	cmp	r5, r4
 8006f16:	d10b      	bne.n	8006f30 <_free_r+0x70>
 8006f18:	6824      	ldr	r4, [r4, #0]
 8006f1a:	4421      	add	r1, r4
 8006f1c:	1854      	adds	r4, r2, r1
 8006f1e:	42a3      	cmp	r3, r4
 8006f20:	6011      	str	r1, [r2, #0]
 8006f22:	d1e0      	bne.n	8006ee6 <_free_r+0x26>
 8006f24:	681c      	ldr	r4, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	6053      	str	r3, [r2, #4]
 8006f2a:	4421      	add	r1, r4
 8006f2c:	6011      	str	r1, [r2, #0]
 8006f2e:	e7da      	b.n	8006ee6 <_free_r+0x26>
 8006f30:	d902      	bls.n	8006f38 <_free_r+0x78>
 8006f32:	230c      	movs	r3, #12
 8006f34:	6003      	str	r3, [r0, #0]
 8006f36:	e7d6      	b.n	8006ee6 <_free_r+0x26>
 8006f38:	6825      	ldr	r5, [r4, #0]
 8006f3a:	1961      	adds	r1, r4, r5
 8006f3c:	428b      	cmp	r3, r1
 8006f3e:	bf04      	itt	eq
 8006f40:	6819      	ldreq	r1, [r3, #0]
 8006f42:	685b      	ldreq	r3, [r3, #4]
 8006f44:	6063      	str	r3, [r4, #4]
 8006f46:	bf04      	itt	eq
 8006f48:	1949      	addeq	r1, r1, r5
 8006f4a:	6021      	streq	r1, [r4, #0]
 8006f4c:	6054      	str	r4, [r2, #4]
 8006f4e:	e7ca      	b.n	8006ee6 <_free_r+0x26>
 8006f50:	b003      	add	sp, #12
 8006f52:	bd30      	pop	{r4, r5, pc}
 8006f54:	20004b60 	.word	0x20004b60

08006f58 <sbrk_aligned>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	4e0e      	ldr	r6, [pc, #56]	; (8006f94 <sbrk_aligned+0x3c>)
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	6831      	ldr	r1, [r6, #0]
 8006f60:	4605      	mov	r5, r0
 8006f62:	b911      	cbnz	r1, 8006f6a <sbrk_aligned+0x12>
 8006f64:	f000 f9e8 	bl	8007338 <_sbrk_r>
 8006f68:	6030      	str	r0, [r6, #0]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f000 f9e3 	bl	8007338 <_sbrk_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d00a      	beq.n	8006f8c <sbrk_aligned+0x34>
 8006f76:	1cc4      	adds	r4, r0, #3
 8006f78:	f024 0403 	bic.w	r4, r4, #3
 8006f7c:	42a0      	cmp	r0, r4
 8006f7e:	d007      	beq.n	8006f90 <sbrk_aligned+0x38>
 8006f80:	1a21      	subs	r1, r4, r0
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f9d8 	bl	8007338 <_sbrk_r>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d101      	bne.n	8006f90 <sbrk_aligned+0x38>
 8006f8c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f90:	4620      	mov	r0, r4
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	20004b64 	.word	0x20004b64

08006f98 <_malloc_r>:
 8006f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9c:	1ccd      	adds	r5, r1, #3
 8006f9e:	f025 0503 	bic.w	r5, r5, #3
 8006fa2:	3508      	adds	r5, #8
 8006fa4:	2d0c      	cmp	r5, #12
 8006fa6:	bf38      	it	cc
 8006fa8:	250c      	movcc	r5, #12
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	4607      	mov	r7, r0
 8006fae:	db01      	blt.n	8006fb4 <_malloc_r+0x1c>
 8006fb0:	42a9      	cmp	r1, r5
 8006fb2:	d905      	bls.n	8006fc0 <_malloc_r+0x28>
 8006fb4:	230c      	movs	r3, #12
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	2600      	movs	r6, #0
 8006fba:	4630      	mov	r0, r6
 8006fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc0:	4e2e      	ldr	r6, [pc, #184]	; (800707c <_malloc_r+0xe4>)
 8006fc2:	f000 fa25 	bl	8007410 <__malloc_lock>
 8006fc6:	6833      	ldr	r3, [r6, #0]
 8006fc8:	461c      	mov	r4, r3
 8006fca:	bb34      	cbnz	r4, 800701a <_malloc_r+0x82>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7ff ffc2 	bl	8006f58 <sbrk_aligned>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	d14d      	bne.n	8007076 <_malloc_r+0xde>
 8006fda:	6834      	ldr	r4, [r6, #0]
 8006fdc:	4626      	mov	r6, r4
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	d140      	bne.n	8007064 <_malloc_r+0xcc>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	eb04 0803 	add.w	r8, r4, r3
 8006fec:	f000 f9a4 	bl	8007338 <_sbrk_r>
 8006ff0:	4580      	cmp	r8, r0
 8006ff2:	d13a      	bne.n	800706a <_malloc_r+0xd2>
 8006ff4:	6821      	ldr	r1, [r4, #0]
 8006ff6:	3503      	adds	r5, #3
 8006ff8:	1a6d      	subs	r5, r5, r1
 8006ffa:	f025 0503 	bic.w	r5, r5, #3
 8006ffe:	3508      	adds	r5, #8
 8007000:	2d0c      	cmp	r5, #12
 8007002:	bf38      	it	cc
 8007004:	250c      	movcc	r5, #12
 8007006:	4629      	mov	r1, r5
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff ffa5 	bl	8006f58 <sbrk_aligned>
 800700e:	3001      	adds	r0, #1
 8007010:	d02b      	beq.n	800706a <_malloc_r+0xd2>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	442b      	add	r3, r5
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	e00e      	b.n	8007038 <_malloc_r+0xa0>
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	1b52      	subs	r2, r2, r5
 800701e:	d41e      	bmi.n	800705e <_malloc_r+0xc6>
 8007020:	2a0b      	cmp	r2, #11
 8007022:	d916      	bls.n	8007052 <_malloc_r+0xba>
 8007024:	1961      	adds	r1, r4, r5
 8007026:	42a3      	cmp	r3, r4
 8007028:	6025      	str	r5, [r4, #0]
 800702a:	bf18      	it	ne
 800702c:	6059      	strne	r1, [r3, #4]
 800702e:	6863      	ldr	r3, [r4, #4]
 8007030:	bf08      	it	eq
 8007032:	6031      	streq	r1, [r6, #0]
 8007034:	5162      	str	r2, [r4, r5]
 8007036:	604b      	str	r3, [r1, #4]
 8007038:	4638      	mov	r0, r7
 800703a:	f104 060b 	add.w	r6, r4, #11
 800703e:	f000 f9ed 	bl	800741c <__malloc_unlock>
 8007042:	f026 0607 	bic.w	r6, r6, #7
 8007046:	1d23      	adds	r3, r4, #4
 8007048:	1af2      	subs	r2, r6, r3
 800704a:	d0b6      	beq.n	8006fba <_malloc_r+0x22>
 800704c:	1b9b      	subs	r3, r3, r6
 800704e:	50a3      	str	r3, [r4, r2]
 8007050:	e7b3      	b.n	8006fba <_malloc_r+0x22>
 8007052:	6862      	ldr	r2, [r4, #4]
 8007054:	42a3      	cmp	r3, r4
 8007056:	bf0c      	ite	eq
 8007058:	6032      	streq	r2, [r6, #0]
 800705a:	605a      	strne	r2, [r3, #4]
 800705c:	e7ec      	b.n	8007038 <_malloc_r+0xa0>
 800705e:	4623      	mov	r3, r4
 8007060:	6864      	ldr	r4, [r4, #4]
 8007062:	e7b2      	b.n	8006fca <_malloc_r+0x32>
 8007064:	4634      	mov	r4, r6
 8007066:	6876      	ldr	r6, [r6, #4]
 8007068:	e7b9      	b.n	8006fde <_malloc_r+0x46>
 800706a:	230c      	movs	r3, #12
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	4638      	mov	r0, r7
 8007070:	f000 f9d4 	bl	800741c <__malloc_unlock>
 8007074:	e7a1      	b.n	8006fba <_malloc_r+0x22>
 8007076:	6025      	str	r5, [r4, #0]
 8007078:	e7de      	b.n	8007038 <_malloc_r+0xa0>
 800707a:	bf00      	nop
 800707c:	20004b60 	.word	0x20004b60

08007080 <__ssputs_r>:
 8007080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007084:	688e      	ldr	r6, [r1, #8]
 8007086:	429e      	cmp	r6, r3
 8007088:	4682      	mov	sl, r0
 800708a:	460c      	mov	r4, r1
 800708c:	4690      	mov	r8, r2
 800708e:	461f      	mov	r7, r3
 8007090:	d838      	bhi.n	8007104 <__ssputs_r+0x84>
 8007092:	898a      	ldrh	r2, [r1, #12]
 8007094:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007098:	d032      	beq.n	8007100 <__ssputs_r+0x80>
 800709a:	6825      	ldr	r5, [r4, #0]
 800709c:	6909      	ldr	r1, [r1, #16]
 800709e:	eba5 0901 	sub.w	r9, r5, r1
 80070a2:	6965      	ldr	r5, [r4, #20]
 80070a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070ac:	3301      	adds	r3, #1
 80070ae:	444b      	add	r3, r9
 80070b0:	106d      	asrs	r5, r5, #1
 80070b2:	429d      	cmp	r5, r3
 80070b4:	bf38      	it	cc
 80070b6:	461d      	movcc	r5, r3
 80070b8:	0553      	lsls	r3, r2, #21
 80070ba:	d531      	bpl.n	8007120 <__ssputs_r+0xa0>
 80070bc:	4629      	mov	r1, r5
 80070be:	f7ff ff6b 	bl	8006f98 <_malloc_r>
 80070c2:	4606      	mov	r6, r0
 80070c4:	b950      	cbnz	r0, 80070dc <__ssputs_r+0x5c>
 80070c6:	230c      	movs	r3, #12
 80070c8:	f8ca 3000 	str.w	r3, [sl]
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295
 80070d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070dc:	6921      	ldr	r1, [r4, #16]
 80070de:	464a      	mov	r2, r9
 80070e0:	f7fe f82e 	bl	8005140 <memcpy>
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ee:	81a3      	strh	r3, [r4, #12]
 80070f0:	6126      	str	r6, [r4, #16]
 80070f2:	6165      	str	r5, [r4, #20]
 80070f4:	444e      	add	r6, r9
 80070f6:	eba5 0509 	sub.w	r5, r5, r9
 80070fa:	6026      	str	r6, [r4, #0]
 80070fc:	60a5      	str	r5, [r4, #8]
 80070fe:	463e      	mov	r6, r7
 8007100:	42be      	cmp	r6, r7
 8007102:	d900      	bls.n	8007106 <__ssputs_r+0x86>
 8007104:	463e      	mov	r6, r7
 8007106:	6820      	ldr	r0, [r4, #0]
 8007108:	4632      	mov	r2, r6
 800710a:	4641      	mov	r1, r8
 800710c:	f000 f966 	bl	80073dc <memmove>
 8007110:	68a3      	ldr	r3, [r4, #8]
 8007112:	1b9b      	subs	r3, r3, r6
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	4433      	add	r3, r6
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	2000      	movs	r0, #0
 800711e:	e7db      	b.n	80070d8 <__ssputs_r+0x58>
 8007120:	462a      	mov	r2, r5
 8007122:	f000 f981 	bl	8007428 <_realloc_r>
 8007126:	4606      	mov	r6, r0
 8007128:	2800      	cmp	r0, #0
 800712a:	d1e1      	bne.n	80070f0 <__ssputs_r+0x70>
 800712c:	6921      	ldr	r1, [r4, #16]
 800712e:	4650      	mov	r0, sl
 8007130:	f7ff fec6 	bl	8006ec0 <_free_r>
 8007134:	e7c7      	b.n	80070c6 <__ssputs_r+0x46>
	...

08007138 <_svfiprintf_r>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	4698      	mov	r8, r3
 800713e:	898b      	ldrh	r3, [r1, #12]
 8007140:	061b      	lsls	r3, r3, #24
 8007142:	b09d      	sub	sp, #116	; 0x74
 8007144:	4607      	mov	r7, r0
 8007146:	460d      	mov	r5, r1
 8007148:	4614      	mov	r4, r2
 800714a:	d50e      	bpl.n	800716a <_svfiprintf_r+0x32>
 800714c:	690b      	ldr	r3, [r1, #16]
 800714e:	b963      	cbnz	r3, 800716a <_svfiprintf_r+0x32>
 8007150:	2140      	movs	r1, #64	; 0x40
 8007152:	f7ff ff21 	bl	8006f98 <_malloc_r>
 8007156:	6028      	str	r0, [r5, #0]
 8007158:	6128      	str	r0, [r5, #16]
 800715a:	b920      	cbnz	r0, 8007166 <_svfiprintf_r+0x2e>
 800715c:	230c      	movs	r3, #12
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	e0d1      	b.n	800730a <_svfiprintf_r+0x1d2>
 8007166:	2340      	movs	r3, #64	; 0x40
 8007168:	616b      	str	r3, [r5, #20]
 800716a:	2300      	movs	r3, #0
 800716c:	9309      	str	r3, [sp, #36]	; 0x24
 800716e:	2320      	movs	r3, #32
 8007170:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007174:	f8cd 800c 	str.w	r8, [sp, #12]
 8007178:	2330      	movs	r3, #48	; 0x30
 800717a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007324 <_svfiprintf_r+0x1ec>
 800717e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007182:	f04f 0901 	mov.w	r9, #1
 8007186:	4623      	mov	r3, r4
 8007188:	469a      	mov	sl, r3
 800718a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800718e:	b10a      	cbz	r2, 8007194 <_svfiprintf_r+0x5c>
 8007190:	2a25      	cmp	r2, #37	; 0x25
 8007192:	d1f9      	bne.n	8007188 <_svfiprintf_r+0x50>
 8007194:	ebba 0b04 	subs.w	fp, sl, r4
 8007198:	d00b      	beq.n	80071b2 <_svfiprintf_r+0x7a>
 800719a:	465b      	mov	r3, fp
 800719c:	4622      	mov	r2, r4
 800719e:	4629      	mov	r1, r5
 80071a0:	4638      	mov	r0, r7
 80071a2:	f7ff ff6d 	bl	8007080 <__ssputs_r>
 80071a6:	3001      	adds	r0, #1
 80071a8:	f000 80aa 	beq.w	8007300 <_svfiprintf_r+0x1c8>
 80071ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071ae:	445a      	add	r2, fp
 80071b0:	9209      	str	r2, [sp, #36]	; 0x24
 80071b2:	f89a 3000 	ldrb.w	r3, [sl]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 80a2 	beq.w	8007300 <_svfiprintf_r+0x1c8>
 80071bc:	2300      	movs	r3, #0
 80071be:	f04f 32ff 	mov.w	r2, #4294967295
 80071c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071c6:	f10a 0a01 	add.w	sl, sl, #1
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	9307      	str	r3, [sp, #28]
 80071ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071d2:	931a      	str	r3, [sp, #104]	; 0x68
 80071d4:	4654      	mov	r4, sl
 80071d6:	2205      	movs	r2, #5
 80071d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071dc:	4851      	ldr	r0, [pc, #324]	; (8007324 <_svfiprintf_r+0x1ec>)
 80071de:	f7f9 f807 	bl	80001f0 <memchr>
 80071e2:	9a04      	ldr	r2, [sp, #16]
 80071e4:	b9d8      	cbnz	r0, 800721e <_svfiprintf_r+0xe6>
 80071e6:	06d0      	lsls	r0, r2, #27
 80071e8:	bf44      	itt	mi
 80071ea:	2320      	movmi	r3, #32
 80071ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071f0:	0711      	lsls	r1, r2, #28
 80071f2:	bf44      	itt	mi
 80071f4:	232b      	movmi	r3, #43	; 0x2b
 80071f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071fa:	f89a 3000 	ldrb.w	r3, [sl]
 80071fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007200:	d015      	beq.n	800722e <_svfiprintf_r+0xf6>
 8007202:	9a07      	ldr	r2, [sp, #28]
 8007204:	4654      	mov	r4, sl
 8007206:	2000      	movs	r0, #0
 8007208:	f04f 0c0a 	mov.w	ip, #10
 800720c:	4621      	mov	r1, r4
 800720e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007212:	3b30      	subs	r3, #48	; 0x30
 8007214:	2b09      	cmp	r3, #9
 8007216:	d94e      	bls.n	80072b6 <_svfiprintf_r+0x17e>
 8007218:	b1b0      	cbz	r0, 8007248 <_svfiprintf_r+0x110>
 800721a:	9207      	str	r2, [sp, #28]
 800721c:	e014      	b.n	8007248 <_svfiprintf_r+0x110>
 800721e:	eba0 0308 	sub.w	r3, r0, r8
 8007222:	fa09 f303 	lsl.w	r3, r9, r3
 8007226:	4313      	orrs	r3, r2
 8007228:	9304      	str	r3, [sp, #16]
 800722a:	46a2      	mov	sl, r4
 800722c:	e7d2      	b.n	80071d4 <_svfiprintf_r+0x9c>
 800722e:	9b03      	ldr	r3, [sp, #12]
 8007230:	1d19      	adds	r1, r3, #4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	9103      	str	r1, [sp, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	bfbb      	ittet	lt
 800723a:	425b      	neglt	r3, r3
 800723c:	f042 0202 	orrlt.w	r2, r2, #2
 8007240:	9307      	strge	r3, [sp, #28]
 8007242:	9307      	strlt	r3, [sp, #28]
 8007244:	bfb8      	it	lt
 8007246:	9204      	strlt	r2, [sp, #16]
 8007248:	7823      	ldrb	r3, [r4, #0]
 800724a:	2b2e      	cmp	r3, #46	; 0x2e
 800724c:	d10c      	bne.n	8007268 <_svfiprintf_r+0x130>
 800724e:	7863      	ldrb	r3, [r4, #1]
 8007250:	2b2a      	cmp	r3, #42	; 0x2a
 8007252:	d135      	bne.n	80072c0 <_svfiprintf_r+0x188>
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	1d1a      	adds	r2, r3, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	9203      	str	r2, [sp, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	bfb8      	it	lt
 8007260:	f04f 33ff 	movlt.w	r3, #4294967295
 8007264:	3402      	adds	r4, #2
 8007266:	9305      	str	r3, [sp, #20]
 8007268:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007334 <_svfiprintf_r+0x1fc>
 800726c:	7821      	ldrb	r1, [r4, #0]
 800726e:	2203      	movs	r2, #3
 8007270:	4650      	mov	r0, sl
 8007272:	f7f8 ffbd 	bl	80001f0 <memchr>
 8007276:	b140      	cbz	r0, 800728a <_svfiprintf_r+0x152>
 8007278:	2340      	movs	r3, #64	; 0x40
 800727a:	eba0 000a 	sub.w	r0, r0, sl
 800727e:	fa03 f000 	lsl.w	r0, r3, r0
 8007282:	9b04      	ldr	r3, [sp, #16]
 8007284:	4303      	orrs	r3, r0
 8007286:	3401      	adds	r4, #1
 8007288:	9304      	str	r3, [sp, #16]
 800728a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800728e:	4826      	ldr	r0, [pc, #152]	; (8007328 <_svfiprintf_r+0x1f0>)
 8007290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007294:	2206      	movs	r2, #6
 8007296:	f7f8 ffab 	bl	80001f0 <memchr>
 800729a:	2800      	cmp	r0, #0
 800729c:	d038      	beq.n	8007310 <_svfiprintf_r+0x1d8>
 800729e:	4b23      	ldr	r3, [pc, #140]	; (800732c <_svfiprintf_r+0x1f4>)
 80072a0:	bb1b      	cbnz	r3, 80072ea <_svfiprintf_r+0x1b2>
 80072a2:	9b03      	ldr	r3, [sp, #12]
 80072a4:	3307      	adds	r3, #7
 80072a6:	f023 0307 	bic.w	r3, r3, #7
 80072aa:	3308      	adds	r3, #8
 80072ac:	9303      	str	r3, [sp, #12]
 80072ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b0:	4433      	add	r3, r6
 80072b2:	9309      	str	r3, [sp, #36]	; 0x24
 80072b4:	e767      	b.n	8007186 <_svfiprintf_r+0x4e>
 80072b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ba:	460c      	mov	r4, r1
 80072bc:	2001      	movs	r0, #1
 80072be:	e7a5      	b.n	800720c <_svfiprintf_r+0xd4>
 80072c0:	2300      	movs	r3, #0
 80072c2:	3401      	adds	r4, #1
 80072c4:	9305      	str	r3, [sp, #20]
 80072c6:	4619      	mov	r1, r3
 80072c8:	f04f 0c0a 	mov.w	ip, #10
 80072cc:	4620      	mov	r0, r4
 80072ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072d2:	3a30      	subs	r2, #48	; 0x30
 80072d4:	2a09      	cmp	r2, #9
 80072d6:	d903      	bls.n	80072e0 <_svfiprintf_r+0x1a8>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0c5      	beq.n	8007268 <_svfiprintf_r+0x130>
 80072dc:	9105      	str	r1, [sp, #20]
 80072de:	e7c3      	b.n	8007268 <_svfiprintf_r+0x130>
 80072e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80072e4:	4604      	mov	r4, r0
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7f0      	b.n	80072cc <_svfiprintf_r+0x194>
 80072ea:	ab03      	add	r3, sp, #12
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	462a      	mov	r2, r5
 80072f0:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <_svfiprintf_r+0x1f8>)
 80072f2:	a904      	add	r1, sp, #16
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7fd ffd9 	bl	80052ac <_printf_float>
 80072fa:	1c42      	adds	r2, r0, #1
 80072fc:	4606      	mov	r6, r0
 80072fe:	d1d6      	bne.n	80072ae <_svfiprintf_r+0x176>
 8007300:	89ab      	ldrh	r3, [r5, #12]
 8007302:	065b      	lsls	r3, r3, #25
 8007304:	f53f af2c 	bmi.w	8007160 <_svfiprintf_r+0x28>
 8007308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800730a:	b01d      	add	sp, #116	; 0x74
 800730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007310:	ab03      	add	r3, sp, #12
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	462a      	mov	r2, r5
 8007316:	4b06      	ldr	r3, [pc, #24]	; (8007330 <_svfiprintf_r+0x1f8>)
 8007318:	a904      	add	r1, sp, #16
 800731a:	4638      	mov	r0, r7
 800731c:	f7fe fa6a 	bl	80057f4 <_printf_i>
 8007320:	e7eb      	b.n	80072fa <_svfiprintf_r+0x1c2>
 8007322:	bf00      	nop
 8007324:	08008214 	.word	0x08008214
 8007328:	0800821e 	.word	0x0800821e
 800732c:	080052ad 	.word	0x080052ad
 8007330:	08007081 	.word	0x08007081
 8007334:	0800821a 	.word	0x0800821a

08007338 <_sbrk_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d06      	ldr	r5, [pc, #24]	; (8007354 <_sbrk_r+0x1c>)
 800733c:	2300      	movs	r3, #0
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7fa f976 	bl	8001634 <_sbrk>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_sbrk_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_sbrk_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	20004b68 	.word	0x20004b68

08007358 <__assert_func>:
 8007358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800735a:	4614      	mov	r4, r2
 800735c:	461a      	mov	r2, r3
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <__assert_func+0x2c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4605      	mov	r5, r0
 8007364:	68d8      	ldr	r0, [r3, #12]
 8007366:	b14c      	cbz	r4, 800737c <__assert_func+0x24>
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <__assert_func+0x30>)
 800736a:	9100      	str	r1, [sp, #0]
 800736c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007370:	4906      	ldr	r1, [pc, #24]	; (800738c <__assert_func+0x34>)
 8007372:	462b      	mov	r3, r5
 8007374:	f000 f80e 	bl	8007394 <fiprintf>
 8007378:	f000 faac 	bl	80078d4 <abort>
 800737c:	4b04      	ldr	r3, [pc, #16]	; (8007390 <__assert_func+0x38>)
 800737e:	461c      	mov	r4, r3
 8007380:	e7f3      	b.n	800736a <__assert_func+0x12>
 8007382:	bf00      	nop
 8007384:	20000010 	.word	0x20000010
 8007388:	08008225 	.word	0x08008225
 800738c:	08008232 	.word	0x08008232
 8007390:	08008260 	.word	0x08008260

08007394 <fiprintf>:
 8007394:	b40e      	push	{r1, r2, r3}
 8007396:	b503      	push	{r0, r1, lr}
 8007398:	4601      	mov	r1, r0
 800739a:	ab03      	add	r3, sp, #12
 800739c:	4805      	ldr	r0, [pc, #20]	; (80073b4 <fiprintf+0x20>)
 800739e:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a2:	6800      	ldr	r0, [r0, #0]
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	f000 f897 	bl	80074d8 <_vfiprintf_r>
 80073aa:	b002      	add	sp, #8
 80073ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b0:	b003      	add	sp, #12
 80073b2:	4770      	bx	lr
 80073b4:	20000010 	.word	0x20000010

080073b8 <__ascii_mbtowc>:
 80073b8:	b082      	sub	sp, #8
 80073ba:	b901      	cbnz	r1, 80073be <__ascii_mbtowc+0x6>
 80073bc:	a901      	add	r1, sp, #4
 80073be:	b142      	cbz	r2, 80073d2 <__ascii_mbtowc+0x1a>
 80073c0:	b14b      	cbz	r3, 80073d6 <__ascii_mbtowc+0x1e>
 80073c2:	7813      	ldrb	r3, [r2, #0]
 80073c4:	600b      	str	r3, [r1, #0]
 80073c6:	7812      	ldrb	r2, [r2, #0]
 80073c8:	1e10      	subs	r0, r2, #0
 80073ca:	bf18      	it	ne
 80073cc:	2001      	movne	r0, #1
 80073ce:	b002      	add	sp, #8
 80073d0:	4770      	bx	lr
 80073d2:	4610      	mov	r0, r2
 80073d4:	e7fb      	b.n	80073ce <__ascii_mbtowc+0x16>
 80073d6:	f06f 0001 	mvn.w	r0, #1
 80073da:	e7f8      	b.n	80073ce <__ascii_mbtowc+0x16>

080073dc <memmove>:
 80073dc:	4288      	cmp	r0, r1
 80073de:	b510      	push	{r4, lr}
 80073e0:	eb01 0402 	add.w	r4, r1, r2
 80073e4:	d902      	bls.n	80073ec <memmove+0x10>
 80073e6:	4284      	cmp	r4, r0
 80073e8:	4623      	mov	r3, r4
 80073ea:	d807      	bhi.n	80073fc <memmove+0x20>
 80073ec:	1e43      	subs	r3, r0, #1
 80073ee:	42a1      	cmp	r1, r4
 80073f0:	d008      	beq.n	8007404 <memmove+0x28>
 80073f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073fa:	e7f8      	b.n	80073ee <memmove+0x12>
 80073fc:	4402      	add	r2, r0
 80073fe:	4601      	mov	r1, r0
 8007400:	428a      	cmp	r2, r1
 8007402:	d100      	bne.n	8007406 <memmove+0x2a>
 8007404:	bd10      	pop	{r4, pc}
 8007406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800740a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800740e:	e7f7      	b.n	8007400 <memmove+0x24>

08007410 <__malloc_lock>:
 8007410:	4801      	ldr	r0, [pc, #4]	; (8007418 <__malloc_lock+0x8>)
 8007412:	f000 bc1f 	b.w	8007c54 <__retarget_lock_acquire_recursive>
 8007416:	bf00      	nop
 8007418:	20004b6c 	.word	0x20004b6c

0800741c <__malloc_unlock>:
 800741c:	4801      	ldr	r0, [pc, #4]	; (8007424 <__malloc_unlock+0x8>)
 800741e:	f000 bc1a 	b.w	8007c56 <__retarget_lock_release_recursive>
 8007422:	bf00      	nop
 8007424:	20004b6c 	.word	0x20004b6c

08007428 <_realloc_r>:
 8007428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742c:	4680      	mov	r8, r0
 800742e:	4614      	mov	r4, r2
 8007430:	460e      	mov	r6, r1
 8007432:	b921      	cbnz	r1, 800743e <_realloc_r+0x16>
 8007434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007438:	4611      	mov	r1, r2
 800743a:	f7ff bdad 	b.w	8006f98 <_malloc_r>
 800743e:	b92a      	cbnz	r2, 800744c <_realloc_r+0x24>
 8007440:	f7ff fd3e 	bl	8006ec0 <_free_r>
 8007444:	4625      	mov	r5, r4
 8007446:	4628      	mov	r0, r5
 8007448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800744c:	f000 fc6a 	bl	8007d24 <_malloc_usable_size_r>
 8007450:	4284      	cmp	r4, r0
 8007452:	4607      	mov	r7, r0
 8007454:	d802      	bhi.n	800745c <_realloc_r+0x34>
 8007456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800745a:	d812      	bhi.n	8007482 <_realloc_r+0x5a>
 800745c:	4621      	mov	r1, r4
 800745e:	4640      	mov	r0, r8
 8007460:	f7ff fd9a 	bl	8006f98 <_malloc_r>
 8007464:	4605      	mov	r5, r0
 8007466:	2800      	cmp	r0, #0
 8007468:	d0ed      	beq.n	8007446 <_realloc_r+0x1e>
 800746a:	42bc      	cmp	r4, r7
 800746c:	4622      	mov	r2, r4
 800746e:	4631      	mov	r1, r6
 8007470:	bf28      	it	cs
 8007472:	463a      	movcs	r2, r7
 8007474:	f7fd fe64 	bl	8005140 <memcpy>
 8007478:	4631      	mov	r1, r6
 800747a:	4640      	mov	r0, r8
 800747c:	f7ff fd20 	bl	8006ec0 <_free_r>
 8007480:	e7e1      	b.n	8007446 <_realloc_r+0x1e>
 8007482:	4635      	mov	r5, r6
 8007484:	e7df      	b.n	8007446 <_realloc_r+0x1e>

08007486 <__sfputc_r>:
 8007486:	6893      	ldr	r3, [r2, #8]
 8007488:	3b01      	subs	r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	b410      	push	{r4}
 800748e:	6093      	str	r3, [r2, #8]
 8007490:	da08      	bge.n	80074a4 <__sfputc_r+0x1e>
 8007492:	6994      	ldr	r4, [r2, #24]
 8007494:	42a3      	cmp	r3, r4
 8007496:	db01      	blt.n	800749c <__sfputc_r+0x16>
 8007498:	290a      	cmp	r1, #10
 800749a:	d103      	bne.n	80074a4 <__sfputc_r+0x1e>
 800749c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a0:	f000 b94a 	b.w	8007738 <__swbuf_r>
 80074a4:	6813      	ldr	r3, [r2, #0]
 80074a6:	1c58      	adds	r0, r3, #1
 80074a8:	6010      	str	r0, [r2, #0]
 80074aa:	7019      	strb	r1, [r3, #0]
 80074ac:	4608      	mov	r0, r1
 80074ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <__sfputs_r>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	4606      	mov	r6, r0
 80074b8:	460f      	mov	r7, r1
 80074ba:	4614      	mov	r4, r2
 80074bc:	18d5      	adds	r5, r2, r3
 80074be:	42ac      	cmp	r4, r5
 80074c0:	d101      	bne.n	80074c6 <__sfputs_r+0x12>
 80074c2:	2000      	movs	r0, #0
 80074c4:	e007      	b.n	80074d6 <__sfputs_r+0x22>
 80074c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ca:	463a      	mov	r2, r7
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff ffda 	bl	8007486 <__sfputc_r>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d1f3      	bne.n	80074be <__sfputs_r+0xa>
 80074d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074d8 <_vfiprintf_r>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	460d      	mov	r5, r1
 80074de:	b09d      	sub	sp, #116	; 0x74
 80074e0:	4614      	mov	r4, r2
 80074e2:	4698      	mov	r8, r3
 80074e4:	4606      	mov	r6, r0
 80074e6:	b118      	cbz	r0, 80074f0 <_vfiprintf_r+0x18>
 80074e8:	6983      	ldr	r3, [r0, #24]
 80074ea:	b90b      	cbnz	r3, 80074f0 <_vfiprintf_r+0x18>
 80074ec:	f000 fb14 	bl	8007b18 <__sinit>
 80074f0:	4b89      	ldr	r3, [pc, #548]	; (8007718 <_vfiprintf_r+0x240>)
 80074f2:	429d      	cmp	r5, r3
 80074f4:	d11b      	bne.n	800752e <_vfiprintf_r+0x56>
 80074f6:	6875      	ldr	r5, [r6, #4]
 80074f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074fa:	07d9      	lsls	r1, r3, #31
 80074fc:	d405      	bmi.n	800750a <_vfiprintf_r+0x32>
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	059a      	lsls	r2, r3, #22
 8007502:	d402      	bmi.n	800750a <_vfiprintf_r+0x32>
 8007504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007506:	f000 fba5 	bl	8007c54 <__retarget_lock_acquire_recursive>
 800750a:	89ab      	ldrh	r3, [r5, #12]
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	d501      	bpl.n	8007514 <_vfiprintf_r+0x3c>
 8007510:	692b      	ldr	r3, [r5, #16]
 8007512:	b9eb      	cbnz	r3, 8007550 <_vfiprintf_r+0x78>
 8007514:	4629      	mov	r1, r5
 8007516:	4630      	mov	r0, r6
 8007518:	f000 f96e 	bl	80077f8 <__swsetup_r>
 800751c:	b1c0      	cbz	r0, 8007550 <_vfiprintf_r+0x78>
 800751e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007520:	07dc      	lsls	r4, r3, #31
 8007522:	d50e      	bpl.n	8007542 <_vfiprintf_r+0x6a>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	b01d      	add	sp, #116	; 0x74
 800752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752e:	4b7b      	ldr	r3, [pc, #492]	; (800771c <_vfiprintf_r+0x244>)
 8007530:	429d      	cmp	r5, r3
 8007532:	d101      	bne.n	8007538 <_vfiprintf_r+0x60>
 8007534:	68b5      	ldr	r5, [r6, #8]
 8007536:	e7df      	b.n	80074f8 <_vfiprintf_r+0x20>
 8007538:	4b79      	ldr	r3, [pc, #484]	; (8007720 <_vfiprintf_r+0x248>)
 800753a:	429d      	cmp	r5, r3
 800753c:	bf08      	it	eq
 800753e:	68f5      	ldreq	r5, [r6, #12]
 8007540:	e7da      	b.n	80074f8 <_vfiprintf_r+0x20>
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	0598      	lsls	r0, r3, #22
 8007546:	d4ed      	bmi.n	8007524 <_vfiprintf_r+0x4c>
 8007548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800754a:	f000 fb84 	bl	8007c56 <__retarget_lock_release_recursive>
 800754e:	e7e9      	b.n	8007524 <_vfiprintf_r+0x4c>
 8007550:	2300      	movs	r3, #0
 8007552:	9309      	str	r3, [sp, #36]	; 0x24
 8007554:	2320      	movs	r3, #32
 8007556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800755a:	f8cd 800c 	str.w	r8, [sp, #12]
 800755e:	2330      	movs	r3, #48	; 0x30
 8007560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007724 <_vfiprintf_r+0x24c>
 8007564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007568:	f04f 0901 	mov.w	r9, #1
 800756c:	4623      	mov	r3, r4
 800756e:	469a      	mov	sl, r3
 8007570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007574:	b10a      	cbz	r2, 800757a <_vfiprintf_r+0xa2>
 8007576:	2a25      	cmp	r2, #37	; 0x25
 8007578:	d1f9      	bne.n	800756e <_vfiprintf_r+0x96>
 800757a:	ebba 0b04 	subs.w	fp, sl, r4
 800757e:	d00b      	beq.n	8007598 <_vfiprintf_r+0xc0>
 8007580:	465b      	mov	r3, fp
 8007582:	4622      	mov	r2, r4
 8007584:	4629      	mov	r1, r5
 8007586:	4630      	mov	r0, r6
 8007588:	f7ff ff94 	bl	80074b4 <__sfputs_r>
 800758c:	3001      	adds	r0, #1
 800758e:	f000 80aa 	beq.w	80076e6 <_vfiprintf_r+0x20e>
 8007592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007594:	445a      	add	r2, fp
 8007596:	9209      	str	r2, [sp, #36]	; 0x24
 8007598:	f89a 3000 	ldrb.w	r3, [sl]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80a2 	beq.w	80076e6 <_vfiprintf_r+0x20e>
 80075a2:	2300      	movs	r3, #0
 80075a4:	f04f 32ff 	mov.w	r2, #4294967295
 80075a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ac:	f10a 0a01 	add.w	sl, sl, #1
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	9307      	str	r3, [sp, #28]
 80075b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075b8:	931a      	str	r3, [sp, #104]	; 0x68
 80075ba:	4654      	mov	r4, sl
 80075bc:	2205      	movs	r2, #5
 80075be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c2:	4858      	ldr	r0, [pc, #352]	; (8007724 <_vfiprintf_r+0x24c>)
 80075c4:	f7f8 fe14 	bl	80001f0 <memchr>
 80075c8:	9a04      	ldr	r2, [sp, #16]
 80075ca:	b9d8      	cbnz	r0, 8007604 <_vfiprintf_r+0x12c>
 80075cc:	06d1      	lsls	r1, r2, #27
 80075ce:	bf44      	itt	mi
 80075d0:	2320      	movmi	r3, #32
 80075d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d6:	0713      	lsls	r3, r2, #28
 80075d8:	bf44      	itt	mi
 80075da:	232b      	movmi	r3, #43	; 0x2b
 80075dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075e0:	f89a 3000 	ldrb.w	r3, [sl]
 80075e4:	2b2a      	cmp	r3, #42	; 0x2a
 80075e6:	d015      	beq.n	8007614 <_vfiprintf_r+0x13c>
 80075e8:	9a07      	ldr	r2, [sp, #28]
 80075ea:	4654      	mov	r4, sl
 80075ec:	2000      	movs	r0, #0
 80075ee:	f04f 0c0a 	mov.w	ip, #10
 80075f2:	4621      	mov	r1, r4
 80075f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f8:	3b30      	subs	r3, #48	; 0x30
 80075fa:	2b09      	cmp	r3, #9
 80075fc:	d94e      	bls.n	800769c <_vfiprintf_r+0x1c4>
 80075fe:	b1b0      	cbz	r0, 800762e <_vfiprintf_r+0x156>
 8007600:	9207      	str	r2, [sp, #28]
 8007602:	e014      	b.n	800762e <_vfiprintf_r+0x156>
 8007604:	eba0 0308 	sub.w	r3, r0, r8
 8007608:	fa09 f303 	lsl.w	r3, r9, r3
 800760c:	4313      	orrs	r3, r2
 800760e:	9304      	str	r3, [sp, #16]
 8007610:	46a2      	mov	sl, r4
 8007612:	e7d2      	b.n	80075ba <_vfiprintf_r+0xe2>
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	1d19      	adds	r1, r3, #4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	9103      	str	r1, [sp, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	bfbb      	ittet	lt
 8007620:	425b      	neglt	r3, r3
 8007622:	f042 0202 	orrlt.w	r2, r2, #2
 8007626:	9307      	strge	r3, [sp, #28]
 8007628:	9307      	strlt	r3, [sp, #28]
 800762a:	bfb8      	it	lt
 800762c:	9204      	strlt	r2, [sp, #16]
 800762e:	7823      	ldrb	r3, [r4, #0]
 8007630:	2b2e      	cmp	r3, #46	; 0x2e
 8007632:	d10c      	bne.n	800764e <_vfiprintf_r+0x176>
 8007634:	7863      	ldrb	r3, [r4, #1]
 8007636:	2b2a      	cmp	r3, #42	; 0x2a
 8007638:	d135      	bne.n	80076a6 <_vfiprintf_r+0x1ce>
 800763a:	9b03      	ldr	r3, [sp, #12]
 800763c:	1d1a      	adds	r2, r3, #4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	9203      	str	r2, [sp, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfb8      	it	lt
 8007646:	f04f 33ff 	movlt.w	r3, #4294967295
 800764a:	3402      	adds	r4, #2
 800764c:	9305      	str	r3, [sp, #20]
 800764e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007734 <_vfiprintf_r+0x25c>
 8007652:	7821      	ldrb	r1, [r4, #0]
 8007654:	2203      	movs	r2, #3
 8007656:	4650      	mov	r0, sl
 8007658:	f7f8 fdca 	bl	80001f0 <memchr>
 800765c:	b140      	cbz	r0, 8007670 <_vfiprintf_r+0x198>
 800765e:	2340      	movs	r3, #64	; 0x40
 8007660:	eba0 000a 	sub.w	r0, r0, sl
 8007664:	fa03 f000 	lsl.w	r0, r3, r0
 8007668:	9b04      	ldr	r3, [sp, #16]
 800766a:	4303      	orrs	r3, r0
 800766c:	3401      	adds	r4, #1
 800766e:	9304      	str	r3, [sp, #16]
 8007670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007674:	482c      	ldr	r0, [pc, #176]	; (8007728 <_vfiprintf_r+0x250>)
 8007676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800767a:	2206      	movs	r2, #6
 800767c:	f7f8 fdb8 	bl	80001f0 <memchr>
 8007680:	2800      	cmp	r0, #0
 8007682:	d03f      	beq.n	8007704 <_vfiprintf_r+0x22c>
 8007684:	4b29      	ldr	r3, [pc, #164]	; (800772c <_vfiprintf_r+0x254>)
 8007686:	bb1b      	cbnz	r3, 80076d0 <_vfiprintf_r+0x1f8>
 8007688:	9b03      	ldr	r3, [sp, #12]
 800768a:	3307      	adds	r3, #7
 800768c:	f023 0307 	bic.w	r3, r3, #7
 8007690:	3308      	adds	r3, #8
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007696:	443b      	add	r3, r7
 8007698:	9309      	str	r3, [sp, #36]	; 0x24
 800769a:	e767      	b.n	800756c <_vfiprintf_r+0x94>
 800769c:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a0:	460c      	mov	r4, r1
 80076a2:	2001      	movs	r0, #1
 80076a4:	e7a5      	b.n	80075f2 <_vfiprintf_r+0x11a>
 80076a6:	2300      	movs	r3, #0
 80076a8:	3401      	adds	r4, #1
 80076aa:	9305      	str	r3, [sp, #20]
 80076ac:	4619      	mov	r1, r3
 80076ae:	f04f 0c0a 	mov.w	ip, #10
 80076b2:	4620      	mov	r0, r4
 80076b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b8:	3a30      	subs	r2, #48	; 0x30
 80076ba:	2a09      	cmp	r2, #9
 80076bc:	d903      	bls.n	80076c6 <_vfiprintf_r+0x1ee>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0c5      	beq.n	800764e <_vfiprintf_r+0x176>
 80076c2:	9105      	str	r1, [sp, #20]
 80076c4:	e7c3      	b.n	800764e <_vfiprintf_r+0x176>
 80076c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ca:	4604      	mov	r4, r0
 80076cc:	2301      	movs	r3, #1
 80076ce:	e7f0      	b.n	80076b2 <_vfiprintf_r+0x1da>
 80076d0:	ab03      	add	r3, sp, #12
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	462a      	mov	r2, r5
 80076d6:	4b16      	ldr	r3, [pc, #88]	; (8007730 <_vfiprintf_r+0x258>)
 80076d8:	a904      	add	r1, sp, #16
 80076da:	4630      	mov	r0, r6
 80076dc:	f7fd fde6 	bl	80052ac <_printf_float>
 80076e0:	4607      	mov	r7, r0
 80076e2:	1c78      	adds	r0, r7, #1
 80076e4:	d1d6      	bne.n	8007694 <_vfiprintf_r+0x1bc>
 80076e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e8:	07d9      	lsls	r1, r3, #31
 80076ea:	d405      	bmi.n	80076f8 <_vfiprintf_r+0x220>
 80076ec:	89ab      	ldrh	r3, [r5, #12]
 80076ee:	059a      	lsls	r2, r3, #22
 80076f0:	d402      	bmi.n	80076f8 <_vfiprintf_r+0x220>
 80076f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f4:	f000 faaf 	bl	8007c56 <__retarget_lock_release_recursive>
 80076f8:	89ab      	ldrh	r3, [r5, #12]
 80076fa:	065b      	lsls	r3, r3, #25
 80076fc:	f53f af12 	bmi.w	8007524 <_vfiprintf_r+0x4c>
 8007700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007702:	e711      	b.n	8007528 <_vfiprintf_r+0x50>
 8007704:	ab03      	add	r3, sp, #12
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	462a      	mov	r2, r5
 800770a:	4b09      	ldr	r3, [pc, #36]	; (8007730 <_vfiprintf_r+0x258>)
 800770c:	a904      	add	r1, sp, #16
 800770e:	4630      	mov	r0, r6
 8007710:	f7fe f870 	bl	80057f4 <_printf_i>
 8007714:	e7e4      	b.n	80076e0 <_vfiprintf_r+0x208>
 8007716:	bf00      	nop
 8007718:	0800838c 	.word	0x0800838c
 800771c:	080083ac 	.word	0x080083ac
 8007720:	0800836c 	.word	0x0800836c
 8007724:	08008214 	.word	0x08008214
 8007728:	0800821e 	.word	0x0800821e
 800772c:	080052ad 	.word	0x080052ad
 8007730:	080074b5 	.word	0x080074b5
 8007734:	0800821a 	.word	0x0800821a

08007738 <__swbuf_r>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	460e      	mov	r6, r1
 800773c:	4614      	mov	r4, r2
 800773e:	4605      	mov	r5, r0
 8007740:	b118      	cbz	r0, 800774a <__swbuf_r+0x12>
 8007742:	6983      	ldr	r3, [r0, #24]
 8007744:	b90b      	cbnz	r3, 800774a <__swbuf_r+0x12>
 8007746:	f000 f9e7 	bl	8007b18 <__sinit>
 800774a:	4b21      	ldr	r3, [pc, #132]	; (80077d0 <__swbuf_r+0x98>)
 800774c:	429c      	cmp	r4, r3
 800774e:	d12b      	bne.n	80077a8 <__swbuf_r+0x70>
 8007750:	686c      	ldr	r4, [r5, #4]
 8007752:	69a3      	ldr	r3, [r4, #24]
 8007754:	60a3      	str	r3, [r4, #8]
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	071a      	lsls	r2, r3, #28
 800775a:	d52f      	bpl.n	80077bc <__swbuf_r+0x84>
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	b36b      	cbz	r3, 80077bc <__swbuf_r+0x84>
 8007760:	6923      	ldr	r3, [r4, #16]
 8007762:	6820      	ldr	r0, [r4, #0]
 8007764:	1ac0      	subs	r0, r0, r3
 8007766:	6963      	ldr	r3, [r4, #20]
 8007768:	b2f6      	uxtb	r6, r6
 800776a:	4283      	cmp	r3, r0
 800776c:	4637      	mov	r7, r6
 800776e:	dc04      	bgt.n	800777a <__swbuf_r+0x42>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f93c 	bl	80079f0 <_fflush_r>
 8007778:	bb30      	cbnz	r0, 80077c8 <__swbuf_r+0x90>
 800777a:	68a3      	ldr	r3, [r4, #8]
 800777c:	3b01      	subs	r3, #1
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	701e      	strb	r6, [r3, #0]
 8007788:	6963      	ldr	r3, [r4, #20]
 800778a:	3001      	adds	r0, #1
 800778c:	4283      	cmp	r3, r0
 800778e:	d004      	beq.n	800779a <__swbuf_r+0x62>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	07db      	lsls	r3, r3, #31
 8007794:	d506      	bpl.n	80077a4 <__swbuf_r+0x6c>
 8007796:	2e0a      	cmp	r6, #10
 8007798:	d104      	bne.n	80077a4 <__swbuf_r+0x6c>
 800779a:	4621      	mov	r1, r4
 800779c:	4628      	mov	r0, r5
 800779e:	f000 f927 	bl	80079f0 <_fflush_r>
 80077a2:	b988      	cbnz	r0, 80077c8 <__swbuf_r+0x90>
 80077a4:	4638      	mov	r0, r7
 80077a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <__swbuf_r+0x9c>)
 80077aa:	429c      	cmp	r4, r3
 80077ac:	d101      	bne.n	80077b2 <__swbuf_r+0x7a>
 80077ae:	68ac      	ldr	r4, [r5, #8]
 80077b0:	e7cf      	b.n	8007752 <__swbuf_r+0x1a>
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <__swbuf_r+0xa0>)
 80077b4:	429c      	cmp	r4, r3
 80077b6:	bf08      	it	eq
 80077b8:	68ec      	ldreq	r4, [r5, #12]
 80077ba:	e7ca      	b.n	8007752 <__swbuf_r+0x1a>
 80077bc:	4621      	mov	r1, r4
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 f81a 	bl	80077f8 <__swsetup_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d0cb      	beq.n	8007760 <__swbuf_r+0x28>
 80077c8:	f04f 37ff 	mov.w	r7, #4294967295
 80077cc:	e7ea      	b.n	80077a4 <__swbuf_r+0x6c>
 80077ce:	bf00      	nop
 80077d0:	0800838c 	.word	0x0800838c
 80077d4:	080083ac 	.word	0x080083ac
 80077d8:	0800836c 	.word	0x0800836c

080077dc <__ascii_wctomb>:
 80077dc:	b149      	cbz	r1, 80077f2 <__ascii_wctomb+0x16>
 80077de:	2aff      	cmp	r2, #255	; 0xff
 80077e0:	bf85      	ittet	hi
 80077e2:	238a      	movhi	r3, #138	; 0x8a
 80077e4:	6003      	strhi	r3, [r0, #0]
 80077e6:	700a      	strbls	r2, [r1, #0]
 80077e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80077ec:	bf98      	it	ls
 80077ee:	2001      	movls	r0, #1
 80077f0:	4770      	bx	lr
 80077f2:	4608      	mov	r0, r1
 80077f4:	4770      	bx	lr
	...

080077f8 <__swsetup_r>:
 80077f8:	4b32      	ldr	r3, [pc, #200]	; (80078c4 <__swsetup_r+0xcc>)
 80077fa:	b570      	push	{r4, r5, r6, lr}
 80077fc:	681d      	ldr	r5, [r3, #0]
 80077fe:	4606      	mov	r6, r0
 8007800:	460c      	mov	r4, r1
 8007802:	b125      	cbz	r5, 800780e <__swsetup_r+0x16>
 8007804:	69ab      	ldr	r3, [r5, #24]
 8007806:	b913      	cbnz	r3, 800780e <__swsetup_r+0x16>
 8007808:	4628      	mov	r0, r5
 800780a:	f000 f985 	bl	8007b18 <__sinit>
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <__swsetup_r+0xd0>)
 8007810:	429c      	cmp	r4, r3
 8007812:	d10f      	bne.n	8007834 <__swsetup_r+0x3c>
 8007814:	686c      	ldr	r4, [r5, #4]
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800781c:	0719      	lsls	r1, r3, #28
 800781e:	d42c      	bmi.n	800787a <__swsetup_r+0x82>
 8007820:	06dd      	lsls	r5, r3, #27
 8007822:	d411      	bmi.n	8007848 <__swsetup_r+0x50>
 8007824:	2309      	movs	r3, #9
 8007826:	6033      	str	r3, [r6, #0]
 8007828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800782c:	81a3      	strh	r3, [r4, #12]
 800782e:	f04f 30ff 	mov.w	r0, #4294967295
 8007832:	e03e      	b.n	80078b2 <__swsetup_r+0xba>
 8007834:	4b25      	ldr	r3, [pc, #148]	; (80078cc <__swsetup_r+0xd4>)
 8007836:	429c      	cmp	r4, r3
 8007838:	d101      	bne.n	800783e <__swsetup_r+0x46>
 800783a:	68ac      	ldr	r4, [r5, #8]
 800783c:	e7eb      	b.n	8007816 <__swsetup_r+0x1e>
 800783e:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <__swsetup_r+0xd8>)
 8007840:	429c      	cmp	r4, r3
 8007842:	bf08      	it	eq
 8007844:	68ec      	ldreq	r4, [r5, #12]
 8007846:	e7e6      	b.n	8007816 <__swsetup_r+0x1e>
 8007848:	0758      	lsls	r0, r3, #29
 800784a:	d512      	bpl.n	8007872 <__swsetup_r+0x7a>
 800784c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800784e:	b141      	cbz	r1, 8007862 <__swsetup_r+0x6a>
 8007850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007854:	4299      	cmp	r1, r3
 8007856:	d002      	beq.n	800785e <__swsetup_r+0x66>
 8007858:	4630      	mov	r0, r6
 800785a:	f7ff fb31 	bl	8006ec0 <_free_r>
 800785e:	2300      	movs	r3, #0
 8007860:	6363      	str	r3, [r4, #52]	; 0x34
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	2300      	movs	r3, #0
 800786c:	6063      	str	r3, [r4, #4]
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	f043 0308 	orr.w	r3, r3, #8
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	b94b      	cbnz	r3, 8007892 <__swsetup_r+0x9a>
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007888:	d003      	beq.n	8007892 <__swsetup_r+0x9a>
 800788a:	4621      	mov	r1, r4
 800788c:	4630      	mov	r0, r6
 800788e:	f000 fa09 	bl	8007ca4 <__smakebuf_r>
 8007892:	89a0      	ldrh	r0, [r4, #12]
 8007894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007898:	f010 0301 	ands.w	r3, r0, #1
 800789c:	d00a      	beq.n	80078b4 <__swsetup_r+0xbc>
 800789e:	2300      	movs	r3, #0
 80078a0:	60a3      	str	r3, [r4, #8]
 80078a2:	6963      	ldr	r3, [r4, #20]
 80078a4:	425b      	negs	r3, r3
 80078a6:	61a3      	str	r3, [r4, #24]
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	b943      	cbnz	r3, 80078be <__swsetup_r+0xc6>
 80078ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078b0:	d1ba      	bne.n	8007828 <__swsetup_r+0x30>
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	0781      	lsls	r1, r0, #30
 80078b6:	bf58      	it	pl
 80078b8:	6963      	ldrpl	r3, [r4, #20]
 80078ba:	60a3      	str	r3, [r4, #8]
 80078bc:	e7f4      	b.n	80078a8 <__swsetup_r+0xb0>
 80078be:	2000      	movs	r0, #0
 80078c0:	e7f7      	b.n	80078b2 <__swsetup_r+0xba>
 80078c2:	bf00      	nop
 80078c4:	20000010 	.word	0x20000010
 80078c8:	0800838c 	.word	0x0800838c
 80078cc:	080083ac 	.word	0x080083ac
 80078d0:	0800836c 	.word	0x0800836c

080078d4 <abort>:
 80078d4:	b508      	push	{r3, lr}
 80078d6:	2006      	movs	r0, #6
 80078d8:	f000 fa54 	bl	8007d84 <raise>
 80078dc:	2001      	movs	r0, #1
 80078de:	f7f9 fe32 	bl	8001546 <_exit>
	...

080078e4 <__sflush_r>:
 80078e4:	898a      	ldrh	r2, [r1, #12]
 80078e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ea:	4605      	mov	r5, r0
 80078ec:	0710      	lsls	r0, r2, #28
 80078ee:	460c      	mov	r4, r1
 80078f0:	d458      	bmi.n	80079a4 <__sflush_r+0xc0>
 80078f2:	684b      	ldr	r3, [r1, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dc05      	bgt.n	8007904 <__sflush_r+0x20>
 80078f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dc02      	bgt.n	8007904 <__sflush_r+0x20>
 80078fe:	2000      	movs	r0, #0
 8007900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007906:	2e00      	cmp	r6, #0
 8007908:	d0f9      	beq.n	80078fe <__sflush_r+0x1a>
 800790a:	2300      	movs	r3, #0
 800790c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007910:	682f      	ldr	r7, [r5, #0]
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	d032      	beq.n	800797c <__sflush_r+0x98>
 8007916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	075a      	lsls	r2, r3, #29
 800791c:	d505      	bpl.n	800792a <__sflush_r+0x46>
 800791e:	6863      	ldr	r3, [r4, #4]
 8007920:	1ac0      	subs	r0, r0, r3
 8007922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007924:	b10b      	cbz	r3, 800792a <__sflush_r+0x46>
 8007926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007928:	1ac0      	subs	r0, r0, r3
 800792a:	2300      	movs	r3, #0
 800792c:	4602      	mov	r2, r0
 800792e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007930:	6a21      	ldr	r1, [r4, #32]
 8007932:	4628      	mov	r0, r5
 8007934:	47b0      	blx	r6
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	d106      	bne.n	800794a <__sflush_r+0x66>
 800793c:	6829      	ldr	r1, [r5, #0]
 800793e:	291d      	cmp	r1, #29
 8007940:	d82c      	bhi.n	800799c <__sflush_r+0xb8>
 8007942:	4a2a      	ldr	r2, [pc, #168]	; (80079ec <__sflush_r+0x108>)
 8007944:	40ca      	lsrs	r2, r1
 8007946:	07d6      	lsls	r6, r2, #31
 8007948:	d528      	bpl.n	800799c <__sflush_r+0xb8>
 800794a:	2200      	movs	r2, #0
 800794c:	6062      	str	r2, [r4, #4]
 800794e:	04d9      	lsls	r1, r3, #19
 8007950:	6922      	ldr	r2, [r4, #16]
 8007952:	6022      	str	r2, [r4, #0]
 8007954:	d504      	bpl.n	8007960 <__sflush_r+0x7c>
 8007956:	1c42      	adds	r2, r0, #1
 8007958:	d101      	bne.n	800795e <__sflush_r+0x7a>
 800795a:	682b      	ldr	r3, [r5, #0]
 800795c:	b903      	cbnz	r3, 8007960 <__sflush_r+0x7c>
 800795e:	6560      	str	r0, [r4, #84]	; 0x54
 8007960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007962:	602f      	str	r7, [r5, #0]
 8007964:	2900      	cmp	r1, #0
 8007966:	d0ca      	beq.n	80078fe <__sflush_r+0x1a>
 8007968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800796c:	4299      	cmp	r1, r3
 800796e:	d002      	beq.n	8007976 <__sflush_r+0x92>
 8007970:	4628      	mov	r0, r5
 8007972:	f7ff faa5 	bl	8006ec0 <_free_r>
 8007976:	2000      	movs	r0, #0
 8007978:	6360      	str	r0, [r4, #52]	; 0x34
 800797a:	e7c1      	b.n	8007900 <__sflush_r+0x1c>
 800797c:	6a21      	ldr	r1, [r4, #32]
 800797e:	2301      	movs	r3, #1
 8007980:	4628      	mov	r0, r5
 8007982:	47b0      	blx	r6
 8007984:	1c41      	adds	r1, r0, #1
 8007986:	d1c7      	bne.n	8007918 <__sflush_r+0x34>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0c4      	beq.n	8007918 <__sflush_r+0x34>
 800798e:	2b1d      	cmp	r3, #29
 8007990:	d001      	beq.n	8007996 <__sflush_r+0xb2>
 8007992:	2b16      	cmp	r3, #22
 8007994:	d101      	bne.n	800799a <__sflush_r+0xb6>
 8007996:	602f      	str	r7, [r5, #0]
 8007998:	e7b1      	b.n	80078fe <__sflush_r+0x1a>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a0:	81a3      	strh	r3, [r4, #12]
 80079a2:	e7ad      	b.n	8007900 <__sflush_r+0x1c>
 80079a4:	690f      	ldr	r7, [r1, #16]
 80079a6:	2f00      	cmp	r7, #0
 80079a8:	d0a9      	beq.n	80078fe <__sflush_r+0x1a>
 80079aa:	0793      	lsls	r3, r2, #30
 80079ac:	680e      	ldr	r6, [r1, #0]
 80079ae:	bf08      	it	eq
 80079b0:	694b      	ldreq	r3, [r1, #20]
 80079b2:	600f      	str	r7, [r1, #0]
 80079b4:	bf18      	it	ne
 80079b6:	2300      	movne	r3, #0
 80079b8:	eba6 0807 	sub.w	r8, r6, r7
 80079bc:	608b      	str	r3, [r1, #8]
 80079be:	f1b8 0f00 	cmp.w	r8, #0
 80079c2:	dd9c      	ble.n	80078fe <__sflush_r+0x1a>
 80079c4:	6a21      	ldr	r1, [r4, #32]
 80079c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079c8:	4643      	mov	r3, r8
 80079ca:	463a      	mov	r2, r7
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b0      	blx	r6
 80079d0:	2800      	cmp	r0, #0
 80079d2:	dc06      	bgt.n	80079e2 <__sflush_r+0xfe>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	e78e      	b.n	8007900 <__sflush_r+0x1c>
 80079e2:	4407      	add	r7, r0
 80079e4:	eba8 0800 	sub.w	r8, r8, r0
 80079e8:	e7e9      	b.n	80079be <__sflush_r+0xda>
 80079ea:	bf00      	nop
 80079ec:	20400001 	.word	0x20400001

080079f0 <_fflush_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	690b      	ldr	r3, [r1, #16]
 80079f4:	4605      	mov	r5, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	b913      	cbnz	r3, 8007a00 <_fflush_r+0x10>
 80079fa:	2500      	movs	r5, #0
 80079fc:	4628      	mov	r0, r5
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	b118      	cbz	r0, 8007a0a <_fflush_r+0x1a>
 8007a02:	6983      	ldr	r3, [r0, #24]
 8007a04:	b90b      	cbnz	r3, 8007a0a <_fflush_r+0x1a>
 8007a06:	f000 f887 	bl	8007b18 <__sinit>
 8007a0a:	4b14      	ldr	r3, [pc, #80]	; (8007a5c <_fflush_r+0x6c>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	d11b      	bne.n	8007a48 <_fflush_r+0x58>
 8007a10:	686c      	ldr	r4, [r5, #4]
 8007a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0ef      	beq.n	80079fa <_fflush_r+0xa>
 8007a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a1c:	07d0      	lsls	r0, r2, #31
 8007a1e:	d404      	bmi.n	8007a2a <_fflush_r+0x3a>
 8007a20:	0599      	lsls	r1, r3, #22
 8007a22:	d402      	bmi.n	8007a2a <_fflush_r+0x3a>
 8007a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a26:	f000 f915 	bl	8007c54 <__retarget_lock_acquire_recursive>
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f7ff ff59 	bl	80078e4 <__sflush_r>
 8007a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a34:	07da      	lsls	r2, r3, #31
 8007a36:	4605      	mov	r5, r0
 8007a38:	d4e0      	bmi.n	80079fc <_fflush_r+0xc>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	059b      	lsls	r3, r3, #22
 8007a3e:	d4dd      	bmi.n	80079fc <_fflush_r+0xc>
 8007a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a42:	f000 f908 	bl	8007c56 <__retarget_lock_release_recursive>
 8007a46:	e7d9      	b.n	80079fc <_fflush_r+0xc>
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <_fflush_r+0x70>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d101      	bne.n	8007a52 <_fflush_r+0x62>
 8007a4e:	68ac      	ldr	r4, [r5, #8]
 8007a50:	e7df      	b.n	8007a12 <_fflush_r+0x22>
 8007a52:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <_fflush_r+0x74>)
 8007a54:	429c      	cmp	r4, r3
 8007a56:	bf08      	it	eq
 8007a58:	68ec      	ldreq	r4, [r5, #12]
 8007a5a:	e7da      	b.n	8007a12 <_fflush_r+0x22>
 8007a5c:	0800838c 	.word	0x0800838c
 8007a60:	080083ac 	.word	0x080083ac
 8007a64:	0800836c 	.word	0x0800836c

08007a68 <std>:
 8007a68:	2300      	movs	r3, #0
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a76:	6083      	str	r3, [r0, #8]
 8007a78:	8181      	strh	r1, [r0, #12]
 8007a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a7c:	81c2      	strh	r2, [r0, #14]
 8007a7e:	6183      	str	r3, [r0, #24]
 8007a80:	4619      	mov	r1, r3
 8007a82:	2208      	movs	r2, #8
 8007a84:	305c      	adds	r0, #92	; 0x5c
 8007a86:	f7fd fb69 	bl	800515c <memset>
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <std+0x38>)
 8007a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a8e:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <std+0x3c>)
 8007a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a92:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <std+0x40>)
 8007a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <std+0x44>)
 8007a98:	6224      	str	r4, [r4, #32]
 8007a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08007dbd 	.word	0x08007dbd
 8007aa4:	08007ddf 	.word	0x08007ddf
 8007aa8:	08007e17 	.word	0x08007e17
 8007aac:	08007e3b 	.word	0x08007e3b

08007ab0 <_cleanup_r>:
 8007ab0:	4901      	ldr	r1, [pc, #4]	; (8007ab8 <_cleanup_r+0x8>)
 8007ab2:	f000 b8af 	b.w	8007c14 <_fwalk_reent>
 8007ab6:	bf00      	nop
 8007ab8:	080079f1 	.word	0x080079f1

08007abc <__sfmoreglue>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	2268      	movs	r2, #104	; 0x68
 8007ac0:	1e4d      	subs	r5, r1, #1
 8007ac2:	4355      	muls	r5, r2
 8007ac4:	460e      	mov	r6, r1
 8007ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007aca:	f7ff fa65 	bl	8006f98 <_malloc_r>
 8007ace:	4604      	mov	r4, r0
 8007ad0:	b140      	cbz	r0, 8007ae4 <__sfmoreglue+0x28>
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ad8:	300c      	adds	r0, #12
 8007ada:	60a0      	str	r0, [r4, #8]
 8007adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ae0:	f7fd fb3c 	bl	800515c <memset>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}

08007ae8 <__sfp_lock_acquire>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__sfp_lock_acquire+0x8>)
 8007aea:	f000 b8b3 	b.w	8007c54 <__retarget_lock_acquire_recursive>
 8007aee:	bf00      	nop
 8007af0:	20004b6d 	.word	0x20004b6d

08007af4 <__sfp_lock_release>:
 8007af4:	4801      	ldr	r0, [pc, #4]	; (8007afc <__sfp_lock_release+0x8>)
 8007af6:	f000 b8ae 	b.w	8007c56 <__retarget_lock_release_recursive>
 8007afa:	bf00      	nop
 8007afc:	20004b6d 	.word	0x20004b6d

08007b00 <__sinit_lock_acquire>:
 8007b00:	4801      	ldr	r0, [pc, #4]	; (8007b08 <__sinit_lock_acquire+0x8>)
 8007b02:	f000 b8a7 	b.w	8007c54 <__retarget_lock_acquire_recursive>
 8007b06:	bf00      	nop
 8007b08:	20004b6e 	.word	0x20004b6e

08007b0c <__sinit_lock_release>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	; (8007b14 <__sinit_lock_release+0x8>)
 8007b0e:	f000 b8a2 	b.w	8007c56 <__retarget_lock_release_recursive>
 8007b12:	bf00      	nop
 8007b14:	20004b6e 	.word	0x20004b6e

08007b18 <__sinit>:
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	f7ff fff0 	bl	8007b00 <__sinit_lock_acquire>
 8007b20:	69a3      	ldr	r3, [r4, #24]
 8007b22:	b11b      	cbz	r3, 8007b2c <__sinit+0x14>
 8007b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b28:	f7ff bff0 	b.w	8007b0c <__sinit_lock_release>
 8007b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b30:	6523      	str	r3, [r4, #80]	; 0x50
 8007b32:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <__sinit+0x68>)
 8007b34:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <__sinit+0x6c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	bf04      	itt	eq
 8007b3e:	2301      	moveq	r3, #1
 8007b40:	61a3      	streq	r3, [r4, #24]
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 f820 	bl	8007b88 <__sfp>
 8007b48:	6060      	str	r0, [r4, #4]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 f81c 	bl	8007b88 <__sfp>
 8007b50:	60a0      	str	r0, [r4, #8]
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f818 	bl	8007b88 <__sfp>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	60e0      	str	r0, [r4, #12]
 8007b5c:	2104      	movs	r1, #4
 8007b5e:	6860      	ldr	r0, [r4, #4]
 8007b60:	f7ff ff82 	bl	8007a68 <std>
 8007b64:	68a0      	ldr	r0, [r4, #8]
 8007b66:	2201      	movs	r2, #1
 8007b68:	2109      	movs	r1, #9
 8007b6a:	f7ff ff7d 	bl	8007a68 <std>
 8007b6e:	68e0      	ldr	r0, [r4, #12]
 8007b70:	2202      	movs	r2, #2
 8007b72:	2112      	movs	r1, #18
 8007b74:	f7ff ff78 	bl	8007a68 <std>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	61a3      	str	r3, [r4, #24]
 8007b7c:	e7d2      	b.n	8007b24 <__sinit+0xc>
 8007b7e:	bf00      	nop
 8007b80:	08007ff0 	.word	0x08007ff0
 8007b84:	08007ab1 	.word	0x08007ab1

08007b88 <__sfp>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	4607      	mov	r7, r0
 8007b8c:	f7ff ffac 	bl	8007ae8 <__sfp_lock_acquire>
 8007b90:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <__sfp+0x84>)
 8007b92:	681e      	ldr	r6, [r3, #0]
 8007b94:	69b3      	ldr	r3, [r6, #24]
 8007b96:	b913      	cbnz	r3, 8007b9e <__sfp+0x16>
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff ffbd 	bl	8007b18 <__sinit>
 8007b9e:	3648      	adds	r6, #72	; 0x48
 8007ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	d503      	bpl.n	8007bb0 <__sfp+0x28>
 8007ba8:	6833      	ldr	r3, [r6, #0]
 8007baa:	b30b      	cbz	r3, 8007bf0 <__sfp+0x68>
 8007bac:	6836      	ldr	r6, [r6, #0]
 8007bae:	e7f7      	b.n	8007ba0 <__sfp+0x18>
 8007bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bb4:	b9d5      	cbnz	r5, 8007bec <__sfp+0x64>
 8007bb6:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <__sfp+0x88>)
 8007bb8:	60e3      	str	r3, [r4, #12]
 8007bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8007bc0:	f000 f847 	bl	8007c52 <__retarget_lock_init_recursive>
 8007bc4:	f7ff ff96 	bl	8007af4 <__sfp_lock_release>
 8007bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bd0:	6025      	str	r5, [r4, #0]
 8007bd2:	61a5      	str	r5, [r4, #24]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bdc:	f7fd fabe 	bl	800515c <memset>
 8007be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007be8:	4620      	mov	r0, r4
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bec:	3468      	adds	r4, #104	; 0x68
 8007bee:	e7d9      	b.n	8007ba4 <__sfp+0x1c>
 8007bf0:	2104      	movs	r1, #4
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f7ff ff62 	bl	8007abc <__sfmoreglue>
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	6030      	str	r0, [r6, #0]
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d1d5      	bne.n	8007bac <__sfp+0x24>
 8007c00:	f7ff ff78 	bl	8007af4 <__sfp_lock_release>
 8007c04:	230c      	movs	r3, #12
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	e7ee      	b.n	8007be8 <__sfp+0x60>
 8007c0a:	bf00      	nop
 8007c0c:	08007ff0 	.word	0x08007ff0
 8007c10:	ffff0001 	.word	0xffff0001

08007c14 <_fwalk_reent>:
 8007c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c18:	4606      	mov	r6, r0
 8007c1a:	4688      	mov	r8, r1
 8007c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c20:	2700      	movs	r7, #0
 8007c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c26:	f1b9 0901 	subs.w	r9, r9, #1
 8007c2a:	d505      	bpl.n	8007c38 <_fwalk_reent+0x24>
 8007c2c:	6824      	ldr	r4, [r4, #0]
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d1f7      	bne.n	8007c22 <_fwalk_reent+0xe>
 8007c32:	4638      	mov	r0, r7
 8007c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c38:	89ab      	ldrh	r3, [r5, #12]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d907      	bls.n	8007c4e <_fwalk_reent+0x3a>
 8007c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c42:	3301      	adds	r3, #1
 8007c44:	d003      	beq.n	8007c4e <_fwalk_reent+0x3a>
 8007c46:	4629      	mov	r1, r5
 8007c48:	4630      	mov	r0, r6
 8007c4a:	47c0      	blx	r8
 8007c4c:	4307      	orrs	r7, r0
 8007c4e:	3568      	adds	r5, #104	; 0x68
 8007c50:	e7e9      	b.n	8007c26 <_fwalk_reent+0x12>

08007c52 <__retarget_lock_init_recursive>:
 8007c52:	4770      	bx	lr

08007c54 <__retarget_lock_acquire_recursive>:
 8007c54:	4770      	bx	lr

08007c56 <__retarget_lock_release_recursive>:
 8007c56:	4770      	bx	lr

08007c58 <__swhatbuf_r>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	460e      	mov	r6, r1
 8007c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c60:	2900      	cmp	r1, #0
 8007c62:	b096      	sub	sp, #88	; 0x58
 8007c64:	4614      	mov	r4, r2
 8007c66:	461d      	mov	r5, r3
 8007c68:	da08      	bge.n	8007c7c <__swhatbuf_r+0x24>
 8007c6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	602a      	str	r2, [r5, #0]
 8007c72:	061a      	lsls	r2, r3, #24
 8007c74:	d410      	bmi.n	8007c98 <__swhatbuf_r+0x40>
 8007c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c7a:	e00e      	b.n	8007c9a <__swhatbuf_r+0x42>
 8007c7c:	466a      	mov	r2, sp
 8007c7e:	f000 f903 	bl	8007e88 <_fstat_r>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	dbf1      	blt.n	8007c6a <__swhatbuf_r+0x12>
 8007c86:	9a01      	ldr	r2, [sp, #4]
 8007c88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c90:	425a      	negs	r2, r3
 8007c92:	415a      	adcs	r2, r3
 8007c94:	602a      	str	r2, [r5, #0]
 8007c96:	e7ee      	b.n	8007c76 <__swhatbuf_r+0x1e>
 8007c98:	2340      	movs	r3, #64	; 0x40
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	b016      	add	sp, #88	; 0x58
 8007ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ca4 <__smakebuf_r>:
 8007ca4:	898b      	ldrh	r3, [r1, #12]
 8007ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ca8:	079d      	lsls	r5, r3, #30
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	d507      	bpl.n	8007cc0 <__smakebuf_r+0x1c>
 8007cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	6123      	str	r3, [r4, #16]
 8007cb8:	2301      	movs	r3, #1
 8007cba:	6163      	str	r3, [r4, #20]
 8007cbc:	b002      	add	sp, #8
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	ab01      	add	r3, sp, #4
 8007cc2:	466a      	mov	r2, sp
 8007cc4:	f7ff ffc8 	bl	8007c58 <__swhatbuf_r>
 8007cc8:	9900      	ldr	r1, [sp, #0]
 8007cca:	4605      	mov	r5, r0
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff f963 	bl	8006f98 <_malloc_r>
 8007cd2:	b948      	cbnz	r0, 8007ce8 <__smakebuf_r+0x44>
 8007cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd8:	059a      	lsls	r2, r3, #22
 8007cda:	d4ef      	bmi.n	8007cbc <__smakebuf_r+0x18>
 8007cdc:	f023 0303 	bic.w	r3, r3, #3
 8007ce0:	f043 0302 	orr.w	r3, r3, #2
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	e7e3      	b.n	8007cb0 <__smakebuf_r+0xc>
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <__smakebuf_r+0x7c>)
 8007cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	6020      	str	r0, [r4, #0]
 8007cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	9b00      	ldr	r3, [sp, #0]
 8007cf8:	6163      	str	r3, [r4, #20]
 8007cfa:	9b01      	ldr	r3, [sp, #4]
 8007cfc:	6120      	str	r0, [r4, #16]
 8007cfe:	b15b      	cbz	r3, 8007d18 <__smakebuf_r+0x74>
 8007d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d04:	4630      	mov	r0, r6
 8007d06:	f000 f8d1 	bl	8007eac <_isatty_r>
 8007d0a:	b128      	cbz	r0, 8007d18 <__smakebuf_r+0x74>
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	89a0      	ldrh	r0, [r4, #12]
 8007d1a:	4305      	orrs	r5, r0
 8007d1c:	81a5      	strh	r5, [r4, #12]
 8007d1e:	e7cd      	b.n	8007cbc <__smakebuf_r+0x18>
 8007d20:	08007ab1 	.word	0x08007ab1

08007d24 <_malloc_usable_size_r>:
 8007d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d28:	1f18      	subs	r0, r3, #4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bfbc      	itt	lt
 8007d2e:	580b      	ldrlt	r3, [r1, r0]
 8007d30:	18c0      	addlt	r0, r0, r3
 8007d32:	4770      	bx	lr

08007d34 <_raise_r>:
 8007d34:	291f      	cmp	r1, #31
 8007d36:	b538      	push	{r3, r4, r5, lr}
 8007d38:	4604      	mov	r4, r0
 8007d3a:	460d      	mov	r5, r1
 8007d3c:	d904      	bls.n	8007d48 <_raise_r+0x14>
 8007d3e:	2316      	movs	r3, #22
 8007d40:	6003      	str	r3, [r0, #0]
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d4a:	b112      	cbz	r2, 8007d52 <_raise_r+0x1e>
 8007d4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d50:	b94b      	cbnz	r3, 8007d66 <_raise_r+0x32>
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 f830 	bl	8007db8 <_getpid_r>
 8007d58:	462a      	mov	r2, r5
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d62:	f000 b817 	b.w	8007d94 <_kill_r>
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d00a      	beq.n	8007d80 <_raise_r+0x4c>
 8007d6a:	1c59      	adds	r1, r3, #1
 8007d6c:	d103      	bne.n	8007d76 <_raise_r+0x42>
 8007d6e:	2316      	movs	r3, #22
 8007d70:	6003      	str	r3, [r0, #0]
 8007d72:	2001      	movs	r0, #1
 8007d74:	e7e7      	b.n	8007d46 <_raise_r+0x12>
 8007d76:	2400      	movs	r4, #0
 8007d78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	4798      	blx	r3
 8007d80:	2000      	movs	r0, #0
 8007d82:	e7e0      	b.n	8007d46 <_raise_r+0x12>

08007d84 <raise>:
 8007d84:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <raise+0xc>)
 8007d86:	4601      	mov	r1, r0
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	f7ff bfd3 	b.w	8007d34 <_raise_r>
 8007d8e:	bf00      	nop
 8007d90:	20000010 	.word	0x20000010

08007d94 <_kill_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	; (8007db4 <_kill_r+0x20>)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	f7f9 fbc0 	bl	8001526 <_kill>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d102      	bne.n	8007db0 <_kill_r+0x1c>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	b103      	cbz	r3, 8007db0 <_kill_r+0x1c>
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	bd38      	pop	{r3, r4, r5, pc}
 8007db2:	bf00      	nop
 8007db4:	20004b68 	.word	0x20004b68

08007db8 <_getpid_r>:
 8007db8:	f7f9 bbad 	b.w	8001516 <_getpid>

08007dbc <__sread>:
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc4:	f000 f894 	bl	8007ef0 <_read_r>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	bfab      	itete	ge
 8007dcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dce:	89a3      	ldrhlt	r3, [r4, #12]
 8007dd0:	181b      	addge	r3, r3, r0
 8007dd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dd6:	bfac      	ite	ge
 8007dd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dda:	81a3      	strhlt	r3, [r4, #12]
 8007ddc:	bd10      	pop	{r4, pc}

08007dde <__swrite>:
 8007dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de2:	461f      	mov	r7, r3
 8007de4:	898b      	ldrh	r3, [r1, #12]
 8007de6:	05db      	lsls	r3, r3, #23
 8007de8:	4605      	mov	r5, r0
 8007dea:	460c      	mov	r4, r1
 8007dec:	4616      	mov	r6, r2
 8007dee:	d505      	bpl.n	8007dfc <__swrite+0x1e>
 8007df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df4:	2302      	movs	r3, #2
 8007df6:	2200      	movs	r2, #0
 8007df8:	f000 f868 	bl	8007ecc <_lseek_r>
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e06:	81a3      	strh	r3, [r4, #12]
 8007e08:	4632      	mov	r2, r6
 8007e0a:	463b      	mov	r3, r7
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e12:	f000 b817 	b.w	8007e44 <_write_r>

08007e16 <__sseek>:
 8007e16:	b510      	push	{r4, lr}
 8007e18:	460c      	mov	r4, r1
 8007e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1e:	f000 f855 	bl	8007ecc <_lseek_r>
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	bf15      	itete	ne
 8007e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e32:	81a3      	strheq	r3, [r4, #12]
 8007e34:	bf18      	it	ne
 8007e36:	81a3      	strhne	r3, [r4, #12]
 8007e38:	bd10      	pop	{r4, pc}

08007e3a <__sclose>:
 8007e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e3e:	f000 b813 	b.w	8007e68 <_close_r>
	...

08007e44 <_write_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d07      	ldr	r5, [pc, #28]	; (8007e64 <_write_r+0x20>)
 8007e48:	4604      	mov	r4, r0
 8007e4a:	4608      	mov	r0, r1
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	602a      	str	r2, [r5, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f7f9 fb9e 	bl	8001594 <_write>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_write_r+0x1e>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_write_r+0x1e>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	20004b68 	.word	0x20004b68

08007e68 <_close_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d06      	ldr	r5, [pc, #24]	; (8007e84 <_close_r+0x1c>)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	602b      	str	r3, [r5, #0]
 8007e74:	f7f9 fbaa 	bl	80015cc <_close>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d102      	bne.n	8007e82 <_close_r+0x1a>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	b103      	cbz	r3, 8007e82 <_close_r+0x1a>
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	20004b68 	.word	0x20004b68

08007e88 <_fstat_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d07      	ldr	r5, [pc, #28]	; (8007ea8 <_fstat_r+0x20>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	4611      	mov	r1, r2
 8007e94:	602b      	str	r3, [r5, #0]
 8007e96:	f7f9 fba5 	bl	80015e4 <_fstat>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	d102      	bne.n	8007ea4 <_fstat_r+0x1c>
 8007e9e:	682b      	ldr	r3, [r5, #0]
 8007ea0:	b103      	cbz	r3, 8007ea4 <_fstat_r+0x1c>
 8007ea2:	6023      	str	r3, [r4, #0]
 8007ea4:	bd38      	pop	{r3, r4, r5, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20004b68 	.word	0x20004b68

08007eac <_isatty_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d06      	ldr	r5, [pc, #24]	; (8007ec8 <_isatty_r+0x1c>)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	f7f9 fba4 	bl	8001604 <_isatty>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_isatty_r+0x1a>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_isatty_r+0x1a>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	20004b68 	.word	0x20004b68

08007ecc <_lseek_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4d07      	ldr	r5, [pc, #28]	; (8007eec <_lseek_r+0x20>)
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	4608      	mov	r0, r1
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	602a      	str	r2, [r5, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f7f9 fb9d 	bl	800161a <_lseek>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d102      	bne.n	8007eea <_lseek_r+0x1e>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b103      	cbz	r3, 8007eea <_lseek_r+0x1e>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	20004b68 	.word	0x20004b68

08007ef0 <_read_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d07      	ldr	r5, [pc, #28]	; (8007f10 <_read_r+0x20>)
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	4608      	mov	r0, r1
 8007ef8:	4611      	mov	r1, r2
 8007efa:	2200      	movs	r2, #0
 8007efc:	602a      	str	r2, [r5, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f7f9 fb2b 	bl	800155a <_read>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_read_r+0x1e>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_read_r+0x1e>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	20004b68 	.word	0x20004b68

08007f14 <_init>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	bf00      	nop
 8007f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1a:	bc08      	pop	{r3}
 8007f1c:	469e      	mov	lr, r3
 8007f1e:	4770      	bx	lr

08007f20 <_fini>:
 8007f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f22:	bf00      	nop
 8007f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f26:	bc08      	pop	{r3}
 8007f28:	469e      	mov	lr, r3
 8007f2a:	4770      	bx	lr
